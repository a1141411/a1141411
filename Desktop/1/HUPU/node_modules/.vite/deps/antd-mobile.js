import {
  require_shim
} from "./chunk-5Y5EFU4X.js";
import {
  FieldContext_default,
  Field_default,
  List_default,
  ResizeObserver_es_default,
  es_default,
  require_MapCache,
  require_Stack,
  require_Uint8Array,
  require_arrayLikeKeys,
  require_baseGetTag,
  require_debounce,
  require_eq,
  require_getNative,
  require_isArguments,
  require_isArray,
  require_isArrayLike,
  require_isBuffer,
  require_isEqual,
  require_isFunction,
  require_isIndex,
  require_isObject,
  require_isObjectLike,
  require_isPrototype,
  require_isTypedArray,
  require_keys,
  require_overArg,
  require_root,
  useForm_default,
  useWatch_default
} from "./chunk-WRNERK7B.js";
import "./chunk-FL4OGVPL.js";
import {
  require_react_dom
} from "./chunk-VWVPYLKJ.js";
import "./chunk-6SGCV3RH.js";
import "./chunk-CQ2BC6QE.js";
import {
  AddOutline_default,
  CheckCircleFill_default,
  CheckOutline_default,
  ClockCircleFill_default,
  CloseCircleFill_default,
  CloseOutline_default,
  DownFill_default,
  DownOutline_default,
  ExclamationCircleFill_default,
  InformationCircleFill_default,
  LeftOutline_default,
  MinusOutline_default,
  QuestionCircleOutline_default,
  RightOutline_default,
  SearchOutline_default,
  SoundOutline_default,
  TextDeletionOutline_default
} from "./chunk-RRCPV2WZ.js";
import {
  require_react
} from "./chunk-FSYFAM4Q.js";
import {
  require_classnames
} from "./chunk-6L4LBTII.js";
import {
  __commonJS,
  __toESM
} from "./chunk-NKHIPFFU.js";

// node_modules/lodash/_defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/lodash/_defineProperty.js"(exports, module) {
    var getNative = require_getNative();
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    module.exports = defineProperty;
  }
});

// node_modules/lodash/_baseAssignValue.js
var require_baseAssignValue = __commonJS({
  "node_modules/lodash/_baseAssignValue.js"(exports, module) {
    var defineProperty = require_defineProperty();
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    module.exports = baseAssignValue;
  }
});

// node_modules/lodash/_assignValue.js
var require_assignValue = __commonJS({
  "node_modules/lodash/_assignValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignValue;
  }
});

// node_modules/lodash/_copyObject.js
var require_copyObject = __commonJS({
  "node_modules/lodash/_copyObject.js"(exports, module) {
    var assignValue = require_assignValue();
    var baseAssignValue = require_baseAssignValue();
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index = -1, length = props.length;
      while (++index < length) {
        var key = props[index];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    module.exports = copyObject;
  }
});

// node_modules/lodash/identity.js
var require_identity = __commonJS({
  "node_modules/lodash/identity.js"(exports, module) {
    function identity2(value) {
      return value;
    }
    module.exports = identity2;
  }
});

// node_modules/lodash/_apply.js
var require_apply = __commonJS({
  "node_modules/lodash/_apply.js"(exports, module) {
    function apply2(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    module.exports = apply2;
  }
});

// node_modules/lodash/_overRest.js
var require_overRest = __commonJS({
  "node_modules/lodash/_overRest.js"(exports, module) {
    var apply2 = require_apply();
    var nativeMax = Math.max;
    function overRest(func, start2, transform) {
      start2 = nativeMax(start2 === void 0 ? func.length - 1 : start2, 0);
      return function() {
        var args = arguments, index = -1, length = nativeMax(args.length - start2, 0), array = Array(length);
        while (++index < length) {
          array[index] = args[start2 + index];
        }
        index = -1;
        var otherArgs = Array(start2 + 1);
        while (++index < start2) {
          otherArgs[index] = args[index];
        }
        otherArgs[start2] = transform(array);
        return apply2(func, this, otherArgs);
      };
    }
    module.exports = overRest;
  }
});

// node_modules/lodash/constant.js
var require_constant = __commonJS({
  "node_modules/lodash/constant.js"(exports, module) {
    function constant(value) {
      return function() {
        return value;
      };
    }
    module.exports = constant;
  }
});

// node_modules/lodash/_baseSetToString.js
var require_baseSetToString = __commonJS({
  "node_modules/lodash/_baseSetToString.js"(exports, module) {
    var constant = require_constant();
    var defineProperty = require_defineProperty();
    var identity2 = require_identity();
    var baseSetToString = !defineProperty ? identity2 : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    module.exports = baseSetToString;
  }
});

// node_modules/lodash/_shortOut.js
var require_shortOut = __commonJS({
  "node_modules/lodash/_shortOut.js"(exports, module) {
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    module.exports = shortOut;
  }
});

// node_modules/lodash/_setToString.js
var require_setToString = __commonJS({
  "node_modules/lodash/_setToString.js"(exports, module) {
    var baseSetToString = require_baseSetToString();
    var shortOut = require_shortOut();
    var setToString = shortOut(baseSetToString);
    module.exports = setToString;
  }
});

// node_modules/lodash/_baseRest.js
var require_baseRest = __commonJS({
  "node_modules/lodash/_baseRest.js"(exports, module) {
    var identity2 = require_identity();
    var overRest = require_overRest();
    var setToString = require_setToString();
    function baseRest(func, start2) {
      return setToString(overRest(func, start2, identity2), func + "");
    }
    module.exports = baseRest;
  }
});

// node_modules/lodash/_isIterateeCall.js
var require_isIterateeCall = __commonJS({
  "node_modules/lodash/_isIterateeCall.js"(exports, module) {
    var eq = require_eq();
    var isArrayLike = require_isArrayLike();
    var isIndex = require_isIndex();
    var isObject2 = require_isObject();
    function isIterateeCall(value, index, object) {
      if (!isObject2(object)) {
        return false;
      }
      var type = typeof index;
      if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
        return eq(object[index], value);
      }
      return false;
    }
    module.exports = isIterateeCall;
  }
});

// node_modules/lodash/_createAssigner.js
var require_createAssigner = __commonJS({
  "node_modules/lodash/_createAssigner.js"(exports, module) {
    var baseRest = require_baseRest();
    var isIterateeCall = require_isIterateeCall();
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }
    module.exports = createAssigner;
  }
});

// node_modules/lodash/assignWith.js
var require_assignWith = __commonJS({
  "node_modules/lodash/assignWith.js"(exports, module) {
    var copyObject = require_copyObject();
    var createAssigner = require_createAssigner();
    var keys = require_keys();
    var assignWith2 = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });
    module.exports = assignWith2;
  }
});

// node_modules/lodash/throttle.js
var require_throttle = __commonJS({
  "node_modules/lodash/throttle.js"(exports, module) {
    var debounce3 = require_debounce();
    var isObject2 = require_isObject();
    var FUNC_ERROR_TEXT = "Expected a function";
    function throttle3(func, wait, options) {
      var leading = true, trailing = true;
      if (typeof func != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject2(options)) {
        leading = "leading" in options ? !!options.leading : leading;
        trailing = "trailing" in options ? !!options.trailing : trailing;
      }
      return debounce3(func, wait, {
        "leading": leading,
        "maxWait": wait,
        "trailing": trailing
      });
    }
    module.exports = throttle3;
  }
});

// node_modules/js-cookie/src/js.cookie.js
var require_js_cookie = __commonJS({
  "node_modules/js-cookie/src/js.cookie.js"(exports, module) {
    (function(factory) {
      var registeredInModuleLoader;
      if (typeof define === "function" && define.amd) {
        define(factory);
        registeredInModuleLoader = true;
      }
      if (typeof exports === "object") {
        module.exports = factory();
        registeredInModuleLoader = true;
      }
      if (!registeredInModuleLoader) {
        var OldCookies = window.Cookies;
        var api = window.Cookies = factory();
        api.noConflict = function() {
          window.Cookies = OldCookies;
          return api;
        };
      }
    })(function() {
      function extend() {
        var i = 0;
        var result = {};
        for (; i < arguments.length; i++) {
          var attributes = arguments[i];
          for (var key in attributes) {
            result[key] = attributes[key];
          }
        }
        return result;
      }
      function decode(s) {
        return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
      }
      function init(converter) {
        function api() {
        }
        function set(key, value, attributes) {
          if (typeof document === "undefined") {
            return;
          }
          attributes = extend({
            path: "/"
          }, api.defaults, attributes);
          if (typeof attributes.expires === "number") {
            attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e5);
          }
          attributes.expires = attributes.expires ? attributes.expires.toUTCString() : "";
          try {
            var result = JSON.stringify(value);
            if (/^[\{\[]/.test(result)) {
              value = result;
            }
          } catch (e) {
          }
          value = converter.write ? converter.write(value, key) : encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
          key = encodeURIComponent(String(key)).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/[\(\)]/g, escape);
          var stringifiedAttributes = "";
          for (var attributeName in attributes) {
            if (!attributes[attributeName]) {
              continue;
            }
            stringifiedAttributes += "; " + attributeName;
            if (attributes[attributeName] === true) {
              continue;
            }
            stringifiedAttributes += "=" + attributes[attributeName].split(";")[0];
          }
          return document.cookie = key + "=" + value + stringifiedAttributes;
        }
        function get(key, json) {
          if (typeof document === "undefined") {
            return;
          }
          var jar = {};
          var cookies = document.cookie ? document.cookie.split("; ") : [];
          var i = 0;
          for (; i < cookies.length; i++) {
            var parts = cookies[i].split("=");
            var cookie = parts.slice(1).join("=");
            if (!json && cookie.charAt(0) === '"') {
              cookie = cookie.slice(1, -1);
            }
            try {
              var name = decode(parts[0]);
              cookie = (converter.read || converter)(cookie, name) || decode(cookie);
              if (json) {
                try {
                  cookie = JSON.parse(cookie);
                } catch (e) {
                }
              }
              jar[name] = cookie;
              if (key === name) {
                break;
              }
            } catch (e) {
            }
          }
          return key ? jar[key] : jar;
        }
        api.set = set;
        api.get = function(key) {
          return get(key, false);
        };
        api.getJSON = function(key) {
          return get(key, true);
        };
        api.remove = function(key, attributes) {
          set(key, "", extend(attributes, {
            expires: -1
          }));
        };
        api.defaults = {};
        api.withConverter = init;
        return api;
      }
      return init(function() {
      });
    });
  }
});

// node_modules/dayjs/dayjs.min.js
var require_dayjs_min = __commonJS({
  "node_modules/dayjs/dayjs.min.js"(exports, module) {
    !function(t, e) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (t = "undefined" != typeof globalThis ? globalThis : t || self).dayjs = e();
    }(exports, function() {
      "use strict";
      var t = 1e3, e = 6e4, n = 36e5, r = "millisecond", i = "second", s = "minute", u = "hour", a = "day", o = "week", f = "month", h = "quarter", c = "year", d = "date", $ = "Invalid Date", l = /^(\d{4})[-/]?(\d{1,2})?[-/]?(\d{0,2})[Tt\s]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?[.:]?(\d+)?$/, y = /\[([^\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, M = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_") }, m = function(t2, e2, n2) {
        var r2 = String(t2);
        return !r2 || r2.length >= e2 ? t2 : "" + Array(e2 + 1 - r2.length).join(n2) + t2;
      }, g = { s: m, z: function(t2) {
        var e2 = -t2.utcOffset(), n2 = Math.abs(e2), r2 = Math.floor(n2 / 60), i2 = n2 % 60;
        return (e2 <= 0 ? "+" : "-") + m(r2, 2, "0") + ":" + m(i2, 2, "0");
      }, m: function t2(e2, n2) {
        if (e2.date() < n2.date())
          return -t2(n2, e2);
        var r2 = 12 * (n2.year() - e2.year()) + (n2.month() - e2.month()), i2 = e2.clone().add(r2, f), s2 = n2 - i2 < 0, u2 = e2.clone().add(r2 + (s2 ? -1 : 1), f);
        return +(-(r2 + (n2 - i2) / (s2 ? i2 - u2 : u2 - i2)) || 0);
      }, a: function(t2) {
        return t2 < 0 ? Math.ceil(t2) || 0 : Math.floor(t2);
      }, p: function(t2) {
        return { M: f, y: c, w: o, d: a, D: d, h: u, m: s, s: i, ms: r, Q: h }[t2] || String(t2 || "").toLowerCase().replace(/s$/, "");
      }, u: function(t2) {
        return void 0 === t2;
      } }, v = "en", D = {};
      D[v] = M;
      var p = function(t2) {
        return t2 instanceof _;
      }, S = function t2(e2, n2, r2) {
        var i2;
        if (!e2)
          return v;
        if ("string" == typeof e2) {
          var s2 = e2.toLowerCase();
          D[s2] && (i2 = s2), n2 && (D[s2] = n2, i2 = s2);
          var u2 = e2.split("-");
          if (!i2 && u2.length > 1)
            return t2(u2[0]);
        } else {
          var a2 = e2.name;
          D[a2] = e2, i2 = a2;
        }
        return !r2 && i2 && (v = i2), i2 || !r2 && v;
      }, w = function(t2, e2) {
        if (p(t2))
          return t2.clone();
        var n2 = "object" == typeof e2 ? e2 : {};
        return n2.date = t2, n2.args = arguments, new _(n2);
      }, O = g;
      O.l = S, O.i = p, O.w = function(t2, e2) {
        return w(t2, { locale: e2.$L, utc: e2.$u, x: e2.$x, $offset: e2.$offset });
      };
      var _ = function() {
        function M2(t2) {
          this.$L = S(t2.locale, null, true), this.parse(t2);
        }
        var m2 = M2.prototype;
        return m2.parse = function(t2) {
          this.$d = function(t3) {
            var e2 = t3.date, n2 = t3.utc;
            if (null === e2)
              return new Date(NaN);
            if (O.u(e2))
              return new Date();
            if (e2 instanceof Date)
              return new Date(e2);
            if ("string" == typeof e2 && !/Z$/i.test(e2)) {
              var r2 = e2.match(l);
              if (r2) {
                var i2 = r2[2] - 1 || 0, s2 = (r2[7] || "0").substring(0, 3);
                return n2 ? new Date(Date.UTC(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2)) : new Date(r2[1], i2, r2[3] || 1, r2[4] || 0, r2[5] || 0, r2[6] || 0, s2);
              }
            }
            return new Date(e2);
          }(t2), this.$x = t2.x || {}, this.init();
        }, m2.init = function() {
          var t2 = this.$d;
          this.$y = t2.getFullYear(), this.$M = t2.getMonth(), this.$D = t2.getDate(), this.$W = t2.getDay(), this.$H = t2.getHours(), this.$m = t2.getMinutes(), this.$s = t2.getSeconds(), this.$ms = t2.getMilliseconds();
        }, m2.$utils = function() {
          return O;
        }, m2.isValid = function() {
          return !(this.$d.toString() === $);
        }, m2.isSame = function(t2, e2) {
          var n2 = w(t2);
          return this.startOf(e2) <= n2 && n2 <= this.endOf(e2);
        }, m2.isAfter = function(t2, e2) {
          return w(t2) < this.startOf(e2);
        }, m2.isBefore = function(t2, e2) {
          return this.endOf(e2) < w(t2);
        }, m2.$g = function(t2, e2, n2) {
          return O.u(t2) ? this[e2] : this.set(n2, t2);
        }, m2.unix = function() {
          return Math.floor(this.valueOf() / 1e3);
        }, m2.valueOf = function() {
          return this.$d.getTime();
        }, m2.startOf = function(t2, e2) {
          var n2 = this, r2 = !!O.u(e2) || e2, h2 = O.p(t2), $2 = function(t3, e3) {
            var i2 = O.w(n2.$u ? Date.UTC(n2.$y, e3, t3) : new Date(n2.$y, e3, t3), n2);
            return r2 ? i2 : i2.endOf(a);
          }, l2 = function(t3, e3) {
            return O.w(n2.toDate()[t3].apply(n2.toDate("s"), (r2 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(e3)), n2);
          }, y2 = this.$W, M3 = this.$M, m3 = this.$D, g2 = "set" + (this.$u ? "UTC" : "");
          switch (h2) {
            case c:
              return r2 ? $2(1, 0) : $2(31, 11);
            case f:
              return r2 ? $2(1, M3) : $2(0, M3 + 1);
            case o:
              var v2 = this.$locale().weekStart || 0, D2 = (y2 < v2 ? y2 + 7 : y2) - v2;
              return $2(r2 ? m3 - D2 : m3 + (6 - D2), M3);
            case a:
            case d:
              return l2(g2 + "Hours", 0);
            case u:
              return l2(g2 + "Minutes", 1);
            case s:
              return l2(g2 + "Seconds", 2);
            case i:
              return l2(g2 + "Milliseconds", 3);
            default:
              return this.clone();
          }
        }, m2.endOf = function(t2) {
          return this.startOf(t2, false);
        }, m2.$set = function(t2, e2) {
          var n2, o2 = O.p(t2), h2 = "set" + (this.$u ? "UTC" : ""), $2 = (n2 = {}, n2[a] = h2 + "Date", n2[d] = h2 + "Date", n2[f] = h2 + "Month", n2[c] = h2 + "FullYear", n2[u] = h2 + "Hours", n2[s] = h2 + "Minutes", n2[i] = h2 + "Seconds", n2[r] = h2 + "Milliseconds", n2)[o2], l2 = o2 === a ? this.$D + (e2 - this.$W) : e2;
          if (o2 === f || o2 === c) {
            var y2 = this.clone().set(d, 1);
            y2.$d[$2](l2), y2.init(), this.$d = y2.set(d, Math.min(this.$D, y2.daysInMonth())).$d;
          } else
            $2 && this.$d[$2](l2);
          return this.init(), this;
        }, m2.set = function(t2, e2) {
          return this.clone().$set(t2, e2);
        }, m2.get = function(t2) {
          return this[O.p(t2)]();
        }, m2.add = function(r2, h2) {
          var d2, $2 = this;
          r2 = Number(r2);
          var l2 = O.p(h2), y2 = function(t2) {
            var e2 = w($2);
            return O.w(e2.date(e2.date() + Math.round(t2 * r2)), $2);
          };
          if (l2 === f)
            return this.set(f, this.$M + r2);
          if (l2 === c)
            return this.set(c, this.$y + r2);
          if (l2 === a)
            return y2(1);
          if (l2 === o)
            return y2(7);
          var M3 = (d2 = {}, d2[s] = e, d2[u] = n, d2[i] = t, d2)[l2] || 1, m3 = this.$d.getTime() + r2 * M3;
          return O.w(m3, this);
        }, m2.subtract = function(t2, e2) {
          return this.add(-1 * t2, e2);
        }, m2.format = function(t2) {
          var e2 = this, n2 = this.$locale();
          if (!this.isValid())
            return n2.invalidDate || $;
          var r2 = t2 || "YYYY-MM-DDTHH:mm:ssZ", i2 = O.z(this), s2 = this.$H, u2 = this.$m, a2 = this.$M, o2 = n2.weekdays, f2 = n2.months, h2 = function(t3, n3, i3, s3) {
            return t3 && (t3[n3] || t3(e2, r2)) || i3[n3].slice(0, s3);
          }, c6 = function(t3) {
            return O.s(s2 % 12 || 12, t3, "0");
          }, d2 = n2.meridiem || function(t3, e3, n3) {
            var r3 = t3 < 12 ? "AM" : "PM";
            return n3 ? r3.toLowerCase() : r3;
          }, l2 = { YY: String(this.$y).slice(-2), YYYY: this.$y, M: a2 + 1, MM: O.s(a2 + 1, 2, "0"), MMM: h2(n2.monthsShort, a2, f2, 3), MMMM: h2(f2, a2), D: this.$D, DD: O.s(this.$D, 2, "0"), d: String(this.$W), dd: h2(n2.weekdaysMin, this.$W, o2, 2), ddd: h2(n2.weekdaysShort, this.$W, o2, 3), dddd: o2[this.$W], H: String(s2), HH: O.s(s2, 2, "0"), h: c6(1), hh: c6(2), a: d2(s2, u2, true), A: d2(s2, u2, false), m: String(u2), mm: O.s(u2, 2, "0"), s: String(this.$s), ss: O.s(this.$s, 2, "0"), SSS: O.s(this.$ms, 3, "0"), Z: i2 };
          return r2.replace(y, function(t3, e3) {
            return e3 || l2[t3] || i2.replace(":", "");
          });
        }, m2.utcOffset = function() {
          return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
        }, m2.diff = function(r2, d2, $2) {
          var l2, y2 = O.p(d2), M3 = w(r2), m3 = (M3.utcOffset() - this.utcOffset()) * e, g2 = this - M3, v2 = O.m(this, M3);
          return v2 = (l2 = {}, l2[c] = v2 / 12, l2[f] = v2, l2[h] = v2 / 3, l2[o] = (g2 - m3) / 6048e5, l2[a] = (g2 - m3) / 864e5, l2[u] = g2 / n, l2[s] = g2 / e, l2[i] = g2 / t, l2)[y2] || g2, $2 ? v2 : O.a(v2);
        }, m2.daysInMonth = function() {
          return this.endOf(f).$D;
        }, m2.$locale = function() {
          return D[this.$L];
        }, m2.locale = function(t2, e2) {
          if (!t2)
            return this.$L;
          var n2 = this.clone(), r2 = S(t2, e2, true);
          return r2 && (n2.$L = r2), n2;
        }, m2.clone = function() {
          return O.w(this.$d, this);
        }, m2.toDate = function() {
          return new Date(this.valueOf());
        }, m2.toJSON = function() {
          return this.isValid() ? this.toISOString() : null;
        }, m2.toISOString = function() {
          return this.$d.toISOString();
        }, m2.toString = function() {
          return this.$d.toUTCString();
        }, M2;
      }(), T = _.prototype;
      return w.prototype = T, [["$ms", r], ["$s", i], ["$m", s], ["$H", u], ["$W", a], ["$M", f], ["$y", c], ["$D", d]].forEach(function(t2) {
        T[t2[1]] = function(e2) {
          return this.$g(e2, t2[0], t2[1]);
        };
      }), w.extend = function(t2, e2) {
        return t2.$i || (t2(e2, _, w), t2.$i = true), w;
      }, w.locale = S, w.isDayjs = p, w.unix = function(t2) {
        return w(1e3 * t2);
      }, w.en = D[v], w.Ls = D, w.p = {}, w;
    });
  }
});

// node_modules/screenfull/dist/screenfull.js
var require_screenfull = __commonJS({
  "node_modules/screenfull/dist/screenfull.js"(exports, module) {
    (function() {
      "use strict";
      var document2 = typeof window !== "undefined" && typeof window.document !== "undefined" ? window.document : {};
      var isCommonjs = typeof module !== "undefined" && module.exports;
      var fn = function() {
        var val;
        var fnMap = [
          [
            "requestFullscreen",
            "exitFullscreen",
            "fullscreenElement",
            "fullscreenEnabled",
            "fullscreenchange",
            "fullscreenerror"
          ],
          [
            "webkitRequestFullscreen",
            "webkitExitFullscreen",
            "webkitFullscreenElement",
            "webkitFullscreenEnabled",
            "webkitfullscreenchange",
            "webkitfullscreenerror"
          ],
          [
            "webkitRequestFullScreen",
            "webkitCancelFullScreen",
            "webkitCurrentFullScreenElement",
            "webkitCancelFullScreen",
            "webkitfullscreenchange",
            "webkitfullscreenerror"
          ],
          [
            "mozRequestFullScreen",
            "mozCancelFullScreen",
            "mozFullScreenElement",
            "mozFullScreenEnabled",
            "mozfullscreenchange",
            "mozfullscreenerror"
          ],
          [
            "msRequestFullscreen",
            "msExitFullscreen",
            "msFullscreenElement",
            "msFullscreenEnabled",
            "MSFullscreenChange",
            "MSFullscreenError"
          ]
        ];
        var i = 0;
        var l = fnMap.length;
        var ret = {};
        for (; i < l; i++) {
          val = fnMap[i];
          if (val && val[1] in document2) {
            for (i = 0; i < val.length; i++) {
              ret[fnMap[0][i]] = val[i];
            }
            return ret;
          }
        }
        return false;
      }();
      var eventNameMap = {
        change: fn.fullscreenchange,
        error: fn.fullscreenerror
      };
      var screenfull2 = {
        request: function(element, options) {
          return new Promise(function(resolve, reject) {
            var onFullScreenEntered = function() {
              this.off("change", onFullScreenEntered);
              resolve();
            }.bind(this);
            this.on("change", onFullScreenEntered);
            element = element || document2.documentElement;
            var returnPromise = element[fn.requestFullscreen](options);
            if (returnPromise instanceof Promise) {
              returnPromise.then(onFullScreenEntered).catch(reject);
            }
          }.bind(this));
        },
        exit: function() {
          return new Promise(function(resolve, reject) {
            if (!this.isFullscreen) {
              resolve();
              return;
            }
            var onFullScreenExit = function() {
              this.off("change", onFullScreenExit);
              resolve();
            }.bind(this);
            this.on("change", onFullScreenExit);
            var returnPromise = document2[fn.exitFullscreen]();
            if (returnPromise instanceof Promise) {
              returnPromise.then(onFullScreenExit).catch(reject);
            }
          }.bind(this));
        },
        toggle: function(element, options) {
          return this.isFullscreen ? this.exit() : this.request(element, options);
        },
        onchange: function(callback) {
          this.on("change", callback);
        },
        onerror: function(callback) {
          this.on("error", callback);
        },
        on: function(event, callback) {
          var eventName = eventNameMap[event];
          if (eventName) {
            document2.addEventListener(eventName, callback, false);
          }
        },
        off: function(event, callback) {
          var eventName = eventNameMap[event];
          if (eventName) {
            document2.removeEventListener(eventName, callback, false);
          }
        },
        raw: fn
      };
      if (!fn) {
        if (isCommonjs) {
          module.exports = { isEnabled: false };
        } else {
          window.screenfull = { isEnabled: false };
        }
        return;
      }
      Object.defineProperties(screenfull2, {
        isFullscreen: {
          get: function() {
            return Boolean(document2[fn.fullscreenElement]);
          }
        },
        element: {
          enumerable: true,
          get: function() {
            return document2[fn.fullscreenElement];
          }
        },
        isEnabled: {
          enumerable: true,
          get: function() {
            return Boolean(document2[fn.fullscreenEnabled]);
          }
        }
      });
      if (isCommonjs) {
        module.exports = screenfull2;
      } else {
        window.screenfull = screenfull2;
      }
    })();
  }
});

// node_modules/dayjs/plugin/isoWeek.js
var require_isoWeek = __commonJS({
  "node_modules/dayjs/plugin/isoWeek.js"(exports, module) {
    !function(e, t) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_isoWeek = t();
    }(exports, function() {
      "use strict";
      var e = "day";
      return function(t, i, s) {
        var a = function(t2) {
          return t2.add(4 - t2.isoWeekday(), e);
        }, d = i.prototype;
        d.isoWeekYear = function() {
          return a(this).year();
        }, d.isoWeek = function(t2) {
          if (!this.$utils().u(t2))
            return this.add(7 * (t2 - this.isoWeek()), e);
          var i2, d2, n2, o, r = a(this), u = (i2 = this.isoWeekYear(), d2 = this.$u, n2 = (d2 ? s.utc : s)().year(i2).startOf("year"), o = 4 - n2.isoWeekday(), n2.isoWeekday() > 4 && (o += 7), n2.add(o, e));
          return r.diff(u, "week") + 1;
        }, d.isoWeekday = function(e2) {
          return this.$utils().u(e2) ? this.day() || 7 : this.day(this.day() % 7 ? e2 : e2 - 7);
        };
        var n = d.startOf;
        d.startOf = function(e2, t2) {
          var i2 = this.$utils(), s2 = !!i2.u(t2) || t2;
          return "isoweek" === i2.p(e2) ? s2 ? this.date(this.date() - (this.isoWeekday() - 1)).startOf("day") : this.date(this.date() - 1 - (this.isoWeekday() - 1) + 7).endOf("day") : n.bind(this)(e2, t2);
        };
      };
    });
  }
});

// node_modules/antd-mobile/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/antd-mobile/node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        var REACT_FRAGMENT_TYPE = 60107;
        var REACT_STRICT_MODE_TYPE = 60108;
        var REACT_PROFILER_TYPE = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        var REACT_SUSPENSE_TYPE = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
          REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
          REACT_PROFILER_TYPE = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var enableScopeAPI = false;
        function isValidElementType(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
              return true;
            }
          }
          return false;
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment2 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        var hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isConcurrentMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
              hasWarnedAboutDeprecatedIsConcurrentMode = true;
              console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement3(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment3(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo2(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment2;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement3;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment3;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo2;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/antd-mobile/node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/antd-mobile/node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/lodash/memoize.js
var require_memoize = __commonJS({
  "node_modules/lodash/memoize.js"(exports, module) {
    var MapCache = require_MapCache();
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize2(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize2.Cache || MapCache)();
      return memoized;
    }
    memoize2.Cache = MapCache;
    module.exports = memoize2;
  }
});

// node_modules/dayjs/plugin/isoWeeksInYear.js
var require_isoWeeksInYear = __commonJS({
  "node_modules/dayjs/plugin/isoWeeksInYear.js"(exports, module) {
    !function(e, n) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = n() : "function" == typeof define && define.amd ? define(n) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_isoWeeksInYear = n();
    }(exports, function() {
      "use strict";
      return function(e, n) {
        n.prototype.isoWeeksInYear = function() {
          var e2 = this.isLeapYear(), n2 = this.endOf("y").day();
          return 4 === n2 || e2 && 5 === n2 ? 53 : 52;
        };
      };
    });
  }
});

// node_modules/dayjs/plugin/isLeapYear.js
var require_isLeapYear = __commonJS({
  "node_modules/dayjs/plugin/isLeapYear.js"(exports, module) {
    !function(e, t) {
      "object" == typeof exports && "undefined" != typeof module ? module.exports = t() : "function" == typeof define && define.amd ? define(t) : (e = "undefined" != typeof globalThis ? globalThis : e || self).dayjs_plugin_isLeapYear = t();
    }(exports, function() {
      "use strict";
      return function(e, t) {
        t.prototype.isLeapYear = function() {
          return this.$y % 4 == 0 && this.$y % 100 != 0 || this.$y % 400 == 0;
        };
      };
    });
  }
});

// node_modules/staged-components/index.js
var require_staged_components = __commonJS({
  "node_modules/staged-components/index.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.staged = void 0;
    var react_1 = __importDefault(require_react());
    function processNext(next) {
      if (typeof next === "function") {
        return react_1.default.createElement(Stage, { stage: next });
      } else {
        return next;
      }
    }
    function Stage(props) {
      const next = props.stage();
      return processNext(next);
    }
    function staged3(stage) {
      return function Staged(props, ref) {
        const next = stage(props, ref);
        return processNext(next);
      };
    }
    exports.staged = staged3;
  }
});

// node_modules/lodash/_assignMergeValue.js
var require_assignMergeValue = __commonJS({
  "node_modules/lodash/_assignMergeValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignMergeValue;
  }
});

// node_modules/lodash/_createBaseFor.js
var require_createBaseFor = __commonJS({
  "node_modules/lodash/_createBaseFor.js"(exports, module) {
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    module.exports = createBaseFor;
  }
});

// node_modules/lodash/_baseFor.js
var require_baseFor = __commonJS({
  "node_modules/lodash/_baseFor.js"(exports, module) {
    var createBaseFor = require_createBaseFor();
    var baseFor = createBaseFor();
    module.exports = baseFor;
  }
});

// node_modules/lodash/_cloneBuffer.js
var require_cloneBuffer = __commonJS({
  "node_modules/lodash/_cloneBuffer.js"(exports, module) {
    var root = require_root();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    module.exports = cloneBuffer;
  }
});

// node_modules/lodash/_cloneArrayBuffer.js
var require_cloneArrayBuffer = __commonJS({
  "node_modules/lodash/_cloneArrayBuffer.js"(exports, module) {
    var Uint8Array = require_Uint8Array();
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }
    module.exports = cloneArrayBuffer;
  }
});

// node_modules/lodash/_cloneTypedArray.js
var require_cloneTypedArray = __commonJS({
  "node_modules/lodash/_cloneTypedArray.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    module.exports = cloneTypedArray;
  }
});

// node_modules/lodash/_copyArray.js
var require_copyArray = __commonJS({
  "node_modules/lodash/_copyArray.js"(exports, module) {
    function copyArray(source, array) {
      var index = -1, length = source.length;
      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }
    module.exports = copyArray;
  }
});

// node_modules/lodash/_baseCreate.js
var require_baseCreate = __commonJS({
  "node_modules/lodash/_baseCreate.js"(exports, module) {
    var isObject2 = require_isObject();
    var objectCreate = Object.create;
    var baseCreate = function() {
      function object() {
      }
      return function(proto) {
        if (!isObject2(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    module.exports = baseCreate;
  }
});

// node_modules/lodash/_getPrototype.js
var require_getPrototype = __commonJS({
  "node_modules/lodash/_getPrototype.js"(exports, module) {
    var overArg = require_overArg();
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    module.exports = getPrototype;
  }
});

// node_modules/lodash/_initCloneObject.js
var require_initCloneObject = __commonJS({
  "node_modules/lodash/_initCloneObject.js"(exports, module) {
    var baseCreate = require_baseCreate();
    var getPrototype = require_getPrototype();
    var isPrototype = require_isPrototype();
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    module.exports = initCloneObject;
  }
});

// node_modules/lodash/isArrayLikeObject.js
var require_isArrayLikeObject = __commonJS({
  "node_modules/lodash/isArrayLikeObject.js"(exports, module) {
    var isArrayLike = require_isArrayLike();
    var isObjectLike = require_isObjectLike();
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    module.exports = isArrayLikeObject;
  }
});

// node_modules/lodash/isPlainObject.js
var require_isPlainObject = __commonJS({
  "node_modules/lodash/isPlainObject.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var getPrototype = require_getPrototype();
    var isObjectLike = require_isObjectLike();
    var objectTag = "[object Object]";
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    module.exports = isPlainObject;
  }
});

// node_modules/lodash/_safeGet.js
var require_safeGet = __commonJS({
  "node_modules/lodash/_safeGet.js"(exports, module) {
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    module.exports = safeGet;
  }
});

// node_modules/lodash/_nativeKeysIn.js
var require_nativeKeysIn = __commonJS({
  "node_modules/lodash/_nativeKeysIn.js"(exports, module) {
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = nativeKeysIn;
  }
});

// node_modules/lodash/_baseKeysIn.js
var require_baseKeysIn = __commonJS({
  "node_modules/lodash/_baseKeysIn.js"(exports, module) {
    var isObject2 = require_isObject();
    var isPrototype = require_isPrototype();
    var nativeKeysIn = require_nativeKeysIn();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeysIn(object) {
      if (!isObject2(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeysIn;
  }
});

// node_modules/lodash/keysIn.js
var require_keysIn = __commonJS({
  "node_modules/lodash/keysIn.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeysIn = require_baseKeysIn();
    var isArrayLike = require_isArrayLike();
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    module.exports = keysIn;
  }
});

// node_modules/lodash/toPlainObject.js
var require_toPlainObject = __commonJS({
  "node_modules/lodash/toPlainObject.js"(exports, module) {
    var copyObject = require_copyObject();
    var keysIn = require_keysIn();
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    module.exports = toPlainObject;
  }
});

// node_modules/lodash/_baseMergeDeep.js
var require_baseMergeDeep = __commonJS({
  "node_modules/lodash/_baseMergeDeep.js"(exports, module) {
    var assignMergeValue = require_assignMergeValue();
    var cloneBuffer = require_cloneBuffer();
    var cloneTypedArray = require_cloneTypedArray();
    var copyArray = require_copyArray();
    var initCloneObject = require_initCloneObject();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isArrayLikeObject = require_isArrayLikeObject();
    var isBuffer = require_isBuffer();
    var isFunction3 = require_isFunction();
    var isObject2 = require_isObject();
    var isPlainObject = require_isPlainObject();
    var isTypedArray = require_isTypedArray();
    var safeGet = require_safeGet();
    var toPlainObject = require_toPlainObject();
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject2(objValue) || isFunction3(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    module.exports = baseMergeDeep;
  }
});

// node_modules/lodash/_baseMerge.js
var require_baseMerge = __commonJS({
  "node_modules/lodash/_baseMerge.js"(exports, module) {
    var Stack = require_Stack();
    var assignMergeValue = require_assignMergeValue();
    var baseFor = require_baseFor();
    var baseMergeDeep = require_baseMergeDeep();
    var isObject2 = require_isObject();
    var keysIn = require_keysIn();
    var safeGet = require_safeGet();
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject2(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    module.exports = baseMerge;
  }
});

// node_modules/lodash/merge.js
var require_merge = __commonJS({
  "node_modules/lodash/merge.js"(exports, module) {
    var baseMerge = require_baseMerge();
    var createAssigner = require_createAssigner();
    var merge2 = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    module.exports = merge2;
  }
});

// node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime/helpers/typeof.js"(exports, module) {
    function _typeof(obj) {
      "@babel/helpers - typeof";
      return module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
        return typeof obj2;
      } : function(obj2) {
        return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof(obj);
    }
    module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/interopRequireWildcard.js
var require_interopRequireWildcard = __commonJS({
  "node_modules/@babel/runtime/helpers/interopRequireWildcard.js"(exports, module) {
    var _typeof = require_typeof()["default"];
    function _getRequireWildcardCache(nodeInterop) {
      if (typeof WeakMap !== "function")
        return null;
      var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
      var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
      return (_getRequireWildcardCache = function _getRequireWildcardCache2(nodeInterop2) {
        return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
      })(nodeInterop);
    }
    function _interopRequireWildcard(obj, nodeInterop) {
      if (!nodeInterop && obj && obj.__esModule) {
        return obj;
      }
      if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
        return {
          "default": obj
        };
      }
      var cache = _getRequireWildcardCache(nodeInterop);
      if (cache && cache.has(obj)) {
        return cache.get(obj);
      }
      var newObj = {};
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var key in obj) {
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
      newObj["default"] = obj;
      if (cache) {
        cache.set(obj, newObj);
      }
      return newObj;
    }
    module.exports = _interopRequireWildcard, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/interopRequireDefault.js
var require_interopRequireDefault = __commonJS({
  "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports, module) {
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : {
        "default": obj
      };
    }
    module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/rc-util/lib/warning.js
var require_warning = __commonJS({
  "node_modules/rc-util/lib/warning.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.call = call3;
    exports.default = void 0;
    exports.note = note;
    exports.noteOnce = noteOnce;
    exports.resetWarned = resetWarned;
    exports.warning = warning;
    exports.warningOnce = warningOnce;
    var warned = {};
    function warning(valid, message) {
      if (!valid && console !== void 0) {
        console.error("Warning: ".concat(message));
      }
    }
    function note(valid, message) {
      if (!valid && console !== void 0) {
        console.warn("Note: ".concat(message));
      }
    }
    function resetWarned() {
      warned = {};
    }
    function call3(method, valid, message) {
      if (!valid && !warned[message]) {
        method(false, message);
        warned[message] = true;
      }
    }
    function warningOnce(valid, message) {
      call3(warning, valid, message);
    }
    function noteOnce(valid, message) {
      call3(note, valid, message);
    }
    var _default = warningOnce;
    exports.default = _default;
  }
});

// node_modules/rc-field-form/lib/FieldContext.js
var require_FieldContext = __commonJS({
  "node_modules/rc-field-form/lib/FieldContext.js"(exports) {
    "use strict";
    var _interopRequireWildcard = require_interopRequireWildcard().default;
    var _interopRequireDefault = require_interopRequireDefault().default;
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.default = exports.HOOK_MARK = void 0;
    var _warning = _interopRequireDefault(require_warning());
    var React139 = _interopRequireWildcard(require_react());
    var HOOK_MARK = "RC_FORM_INTERNAL_HOOKS";
    exports.HOOK_MARK = HOOK_MARK;
    var warningFunc = function warningFunc2() {
      (0, _warning.default)(false, "Can not find FormContext. Please make sure you wrap Field under Form.");
    };
    var Context = React139.createContext({
      getFieldValue: warningFunc,
      getFieldsValue: warningFunc,
      getFieldError: warningFunc,
      getFieldWarning: warningFunc,
      getFieldsError: warningFunc,
      isFieldsTouched: warningFunc,
      isFieldTouched: warningFunc,
      isFieldValidating: warningFunc,
      isFieldsValidating: warningFunc,
      resetFields: warningFunc,
      setFields: warningFunc,
      setFieldValue: warningFunc,
      setFieldsValue: warningFunc,
      validateFields: warningFunc,
      submit: warningFunc,
      getInternalHooks: function getInternalHooks() {
        warningFunc();
        return {
          dispatch: warningFunc,
          initEntityValue: warningFunc,
          registerField: warningFunc,
          useSubscribe: warningFunc,
          setInitialValues: warningFunc,
          destroyForm: warningFunc,
          setCallbacks: warningFunc,
          registerWatch: warningFunc,
          getFields: warningFunc,
          setValidateMessages: warningFunc,
          setPreserve: warningFunc,
          getInitialValue: warningFunc
        };
      }
    });
    var _default = Context;
    exports.default = _default;
  }
});

// node_modules/antd-mobile/es/global/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/global/global.css";

// node_modules/antd-mobile/es/utils/can-use-dom.js
var canUseDom = !!(typeof window !== "undefined" && typeof document !== "undefined" && window.document && window.document.createElement);

// node_modules/antd-mobile/es/global/index.js
if (canUseDom) {
  document.addEventListener("touchstart", () => {
  }, true);
}

// node_modules/tslib/tslib.es6.js
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __awaiter(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

// node_modules/antd-mobile/es/components/config-provider/config-provider.js
var import_react = __toESM(require_react());

// node_modules/antd-mobile/es/utils/merge-locale.js
function mergeLocale(base2, patch) {
  function merge2(a, b) {
    if (typeof a !== "object" || typeof b !== "object" || Array.isArray(a) || Array.isArray(b)) {
      return b !== void 0 ? b : a;
    }
    const result = {};
    for (const key in a) {
      if (a.hasOwnProperty(key)) {
        result[key] = merge2(a[key], b[key]);
      }
    }
    return result;
  }
  return merge2(base2, patch);
}

// node_modules/antd-mobile/es/locales/base.js
var typeTemplate = "${label} is not a valid ${type}";
var base = {
  locale: "en",
  common: {
    confirm: "Confirm",
    cancel: "Cancel",
    loading: "Loading"
  },
  Calendar: {
    markItems: ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"],
    renderYearAndMonth: (year, month) => `${year}/${month}`
  },
  Cascader: {
    placeholder: "Selecting"
  },
  Dialog: {
    ok: "OK"
  },
  ErrorBlock: {
    default: {
      title: "Oops, something went wrong",
      description: "Please wait a minute and try again"
    },
    busy: {
      title: "Oops, not loading",
      description: "Try to refresh the page"
    },
    disconnected: {
      title: "Network is busy",
      description: "Try to refresh the page"
    },
    empty: {
      title: "Hmm, couldn't find that...",
      description: "Want to try a new search?"
    }
  },
  Form: {
    required: "Required",
    optional: "Optional",
    defaultValidateMessages: {
      default: "Field validation error for ${label}",
      required: "Please enter ${label}",
      enum: "${label} must be one of [${enum}]",
      whitespace: "${label} cannot be a blank character",
      date: {
        format: "${label} date format is invalid",
        parse: "${label} cannot be converted to a date",
        invalid: "${label} is an invalid date"
      },
      types: {
        string: typeTemplate,
        method: typeTemplate,
        array: typeTemplate,
        object: typeTemplate,
        number: typeTemplate,
        date: typeTemplate,
        boolean: typeTemplate,
        integer: typeTemplate,
        float: typeTemplate,
        regexp: typeTemplate,
        email: typeTemplate,
        url: typeTemplate,
        hex: typeTemplate
      },
      string: {
        len: "${label} must be ${len} characters",
        min: "${label} must be at least ${min} characters",
        max: "${label} must be up to ${max} characters",
        range: "${label} must be between ${min}-${max} characters"
      },
      number: {
        len: "${label} must be equal to ${len}",
        min: "${label} must be minimum ${min}",
        max: "${label} must be maximum ${max}",
        range: "${label} must be between ${min}-${max}"
      },
      array: {
        len: "Must be ${len} ${label}",
        min: "At least ${min} ${label}",
        max: "At most ${max} ${label}",
        range: "The amount of ${label} must be between ${min}-${max}"
      },
      pattern: {
        mismatch: "${label} does not match the pattern ${pattern}"
      }
    }
  },
  ImageUploader: {
    uploading: "Uploading...",
    upload: "Upload"
  },
  InfiniteScroll: {
    noMore: "No more",
    failedToLoad: "Failed to load",
    retry: "Retry"
  },
  Input: {
    clear: "clear"
  },
  Mask: {
    name: "Mask"
  },
  Modal: {
    ok: "OK"
  },
  PasscodeInput: {
    name: "Passcode Input"
  },
  PullToRefresh: {
    pulling: "Scroll down to refresh",
    canRelease: "Release to refresh immediately",
    complete: "Refresh successful"
  },
  SearchBar: {
    name: "Search Bar"
  },
  Slider: {
    name: "Slider"
  },
  Stepper: {
    decrease: "decrease",
    increase: "increase"
  },
  Switch: {
    name: "Switch"
  }
};

// node_modules/antd-mobile/es/locales/zh-CN.js
var typeTemplate2 = "${label}\u4E0D\u662F\u4E00\u4E2A\u6709\u6548\u7684${type}";
var zhCN = mergeLocale(base, {
  locale: "zh-CH",
  common: {
    confirm: "\u786E\u5B9A",
    cancel: "\u53D6\u6D88",
    loading: "\u52A0\u8F7D\u4E2D"
  },
  Calendar: {
    markItems: ["\u4E00", "\u4E8C", "\u4E09", "\u56DB", "\u4E94", "\u516D", "\u65E5"],
    renderYearAndMonth: (year, month) => `${year}\u5E74${month}\u6708`
  },
  Cascader: {
    placeholder: "\u8BF7\u9009\u62E9"
  },
  Dialog: {
    ok: "\u6211\u77E5\u9053\u4E86"
  },
  ErrorBlock: {
    default: {
      title: "\u9875\u9762\u9047\u5230\u4E00\u4E9B\u5C0F\u95EE\u9898",
      description: "\u5F85\u4F1A\u6765\u8BD5\u8BD5"
    },
    busy: {
      title: "\u524D\u65B9\u62E5\u5835",
      description: "\u5237\u65B0\u8BD5\u8BD5"
    },
    disconnected: {
      title: "\u7F51\u7EDC\u6709\u70B9\u5FD9",
      description: "\u52A8\u52A8\u624B\u6307\u5E2E\u5FD9\u4FEE\u590D"
    },
    empty: {
      title: "\u6CA1\u6709\u627E\u5230\u4F60\u9700\u8981\u7684\u4E1C\u897F",
      description: "\u627E\u627E\u5176\u4ED6\u7684\u5427"
    }
  },
  Form: {
    required: "\u5FC5\u586B",
    optional: "\u9009\u586B",
    defaultValidateMessages: {
      default: "\u5B57\u6BB5\u9A8C\u8BC1\u9519\u8BEF${label}",
      required: "\u8BF7\u8F93\u5165${label}",
      enum: "${label}\u5FC5\u987B\u662F\u5176\u4E2D\u4E00\u4E2A[${enum}]",
      whitespace: "${label}\u4E0D\u80FD\u4E3A\u7A7A\u5B57\u7B26",
      date: {
        format: "${label}\u65E5\u671F\u683C\u5F0F\u65E0\u6548",
        parse: "${label}\u4E0D\u80FD\u8F6C\u6362\u4E3A\u65E5\u671F",
        invalid: "${label}\u662F\u4E00\u4E2A\u65E0\u6548\u65E5\u671F"
      },
      types: {
        string: typeTemplate2,
        method: typeTemplate2,
        array: typeTemplate2,
        object: typeTemplate2,
        number: typeTemplate2,
        date: typeTemplate2,
        boolean: typeTemplate2,
        integer: typeTemplate2,
        float: typeTemplate2,
        regexp: typeTemplate2,
        email: typeTemplate2,
        url: typeTemplate2,
        hex: typeTemplate2
      },
      string: {
        len: "${label}\u987B\u4E3A${len}\u4E2A\u5B57\u7B26",
        min: "${label}\u6700\u5C11${min}\u4E2A\u5B57\u7B26",
        max: "${label}\u6700\u591A${max}\u4E2A\u5B57\u7B26",
        range: "${label}\u987B\u5728${min}-${max}\u5B57\u7B26\u4E4B\u95F4"
      },
      number: {
        len: "${label}\u5FC5\u987B\u7B49\u4E8E${len}",
        min: "${label}\u6700\u5C0F\u503C\u4E3A${min}",
        max: "${label}\u6700\u5927\u503C\u4E3A${max}",
        range: "${label}\u987B\u5728${min}-${max}\u4E4B\u95F4"
      },
      array: {
        len: "\u987B\u4E3A${len}\u4E2A${label}",
        min: "\u6700\u5C11${min}\u4E2A${label}",
        max: "\u6700\u591A${max}\u4E2A${label}",
        range: "${label}\u6570\u91CF\u987B\u5728${min}-${max}\u4E4B\u95F4"
      },
      pattern: {
        mismatch: "${label}\u4E0E\u6A21\u5F0F\u4E0D\u5339\u914D${pattern}"
      }
    }
  },
  ImageUploader: {
    uploading: "\u4E0A\u4F20\u4E2D...",
    upload: "\u4E0A\u4F20"
  },
  InfiniteScroll: {
    noMore: "\u6CA1\u6709\u66F4\u591A\u4E86",
    failedToLoad: "\u52A0\u8F7D\u5931\u8D25",
    retry: "\u91CD\u65B0\u52A0\u8F7D"
  },
  Input: {
    clear: "\u6E05\u9664"
  },
  Mask: {
    name: "\u906E\u7F69\u5C42"
  },
  Modal: {
    ok: "\u6211\u77E5\u9053\u4E86"
  },
  PasscodeInput: {
    name: "\u5BC6\u7801\u8F93\u5165\u6846"
  },
  PullToRefresh: {
    pulling: "\u4E0B\u62C9\u5237\u65B0",
    canRelease: "\u91CA\u653E\u7ACB\u5373\u5237\u65B0",
    complete: "\u5237\u65B0\u6210\u529F"
  },
  SearchBar: {
    name: "\u641C\u7D22\u6846"
  },
  Slider: {
    name: "\u6ED1\u52A8\u8F93\u5165\u6761"
  },
  Stepper: {
    decrease: "\u51CF\u5C11",
    increase: "\u589E\u52A0"
  },
  Switch: {
    name: "\u5F00\u5173"
  }
});
var zh_CN_default = zhCN;

// node_modules/antd-mobile/es/components/config-provider/config-provider.js
var defaultConfigRef = {
  current: {
    locale: zh_CN_default
  }
};
function setDefaultConfig(config3) {
  defaultConfigRef.current = config3;
}
function getDefaultConfig() {
  return defaultConfigRef.current;
}
var ConfigContext = import_react.default.createContext(null);
var ConfigProvider = (props) => {
  const {
    children
  } = props, config3 = __rest(props, ["children"]);
  const parentConfig = useConfig();
  return import_react.default.createElement(ConfigContext.Provider, {
    value: Object.assign(Object.assign({}, parentConfig), config3)
  }, children);
};
function useConfig() {
  var _a;
  return (_a = (0, import_react.useContext)(ConfigContext)) !== null && _a !== void 0 ? _a : getDefaultConfig();
}

// node_modules/antd-mobile/es/components/config-provider/index.js
var config_provider_default = ConfigProvider;

// node_modules/antd-mobile/es/components/action-sheet/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/action-sheet/action-sheet.css";

// node_modules/antd-mobile/es/utils/attach-properties-to-component.js
function attachPropertiesToComponent(component, properties) {
  const ret = component;
  for (const key in properties) {
    if (properties.hasOwnProperty(key)) {
      ret[key] = properties[key];
    }
  }
  return ret;
}

// node_modules/antd-mobile/es/components/action-sheet/action-sheet.js
var import_react93 = __toESM(require_react());

// node_modules/antd-mobile/es/utils/native-props.js
var import_react2 = __toESM(require_react());
var import_classnames = __toESM(require_classnames());
function withNativeProps(props, element) {
  const p = Object.assign({}, element.props);
  if (props.className) {
    p.className = (0, import_classnames.default)(element.props.className, props.className);
  }
  if (props.style) {
    p.style = Object.assign(Object.assign({}, p.style), props.style);
  }
  if (props.tabIndex !== void 0) {
    p.tabIndex = props.tabIndex;
  }
  for (const key in props) {
    if (!props.hasOwnProperty(key))
      continue;
    if (key.startsWith("data-") || key.startsWith("aria-")) {
      p[key] = props[key];
    }
  }
  return import_react2.default.cloneElement(element, p);
}

// node_modules/antd-mobile/es/utils/with-default-props.js
var import_assignWith = __toESM(require_assignWith());
function mergeProps(...items) {
  function customizer(objValue, srcValue) {
    return srcValue === void 0 ? objValue : srcValue;
  }
  let ret = Object.assign({}, items[0]);
  for (let i = 1; i < items.length; i++) {
    ret = (0, import_assignWith.default)(ret, items[i], customizer);
  }
  return ret;
}

// node_modules/antd-mobile/es/components/action-sheet/action-sheet.js
var import_classnames4 = __toESM(require_classnames());

// node_modules/antd-mobile/es/components/popup/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/popup/popup.css";

// node_modules/antd-mobile/es/components/popup/popup.js
var import_classnames2 = __toESM(require_classnames());
var import_react90 = __toESM(require_react());

// node_modules/ahooks/es/createUpdateEffect/index.js
var import_react3 = __toESM(require_react());
var createUpdateEffect = function createUpdateEffect2(hook) {
  return function(effect, deps) {
    var isMounted = (0, import_react3.useRef)(false);
    hook(function() {
      return function() {
        isMounted.current = false;
      };
    }, []);
    hook(function() {
      if (!isMounted.current) {
        isMounted.current = true;
      } else {
        return effect();
      }
    }, deps);
  };
};

// node_modules/ahooks/es/useAntdTable/index.js
var import_react20 = __toESM(require_react());

// node_modules/ahooks/es/useMemoizedFn/index.js
var import_react4 = __toESM(require_react());

// node_modules/ahooks/es/utils/index.js
var isFunction = function isFunction2(value) {
  return typeof value === "function";
};
var isNumber = function isNumber2(value) {
  return typeof value === "number";
};
var isUndef = function isUndef2(value) {
  return typeof value === "undefined";
};

// node_modules/ahooks/es/utils/isDev.js
var isDev = true;
var isDev_default = isDev;

// node_modules/ahooks/es/useMemoizedFn/index.js
function useMemoizedFn(fn) {
  if (isDev_default) {
    if (!isFunction(fn)) {
      console.error("useMemoizedFn expected parameter is a function, got " + typeof fn);
    }
  }
  var fnRef = (0, import_react4.useRef)(fn);
  fnRef.current = (0, import_react4.useMemo)(function() {
    return fn;
  }, [fn]);
  var memoizedFn = (0, import_react4.useRef)();
  if (!memoizedFn.current) {
    memoizedFn.current = function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return fnRef.current.apply(this, args);
    };
  }
  return memoizedFn.current;
}
var useMemoizedFn_default = useMemoizedFn;

// node_modules/ahooks/es/usePagination/index.js
var import_react19 = __toESM(require_react());

// node_modules/ahooks/es/useRequest/src/plugins/useAutoRunPlugin.js
var import_react6 = __toESM(require_react());

// node_modules/ahooks/es/useUpdateEffect/index.js
var import_react5 = __toESM(require_react());
var useUpdateEffect_default = createUpdateEffect(import_react5.useEffect);

// node_modules/ahooks/es/useRequest/src/plugins/useAutoRunPlugin.js
var __read = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread = function() {
  for (var ar = [], i = 0; i < arguments.length; i++) {
    ar = ar.concat(__read(arguments[i]));
  }
  return ar;
};
var useAutoRunPlugin = function useAutoRunPlugin2(fetchInstance, _a) {
  var manual = _a.manual, _b = _a.ready, ready = _b === void 0 ? true : _b, _c = _a.defaultParams, defaultParams = _c === void 0 ? [] : _c, _d = _a.refreshDeps, refreshDeps = _d === void 0 ? [] : _d, refreshDepsAction = _a.refreshDepsAction;
  var hasAutoRun = (0, import_react6.useRef)(false);
  hasAutoRun.current = false;
  useUpdateEffect_default(function() {
    if (!manual && ready) {
      hasAutoRun.current = true;
      fetchInstance.run.apply(fetchInstance, __spread(defaultParams));
    }
  }, [ready]);
  useUpdateEffect_default(function() {
    if (hasAutoRun.current) {
      return;
    }
    if (!manual) {
      hasAutoRun.current = true;
      if (refreshDepsAction) {
        refreshDepsAction();
      } else {
        fetchInstance.refresh();
      }
    }
  }, __spread(refreshDeps));
  return {
    onBefore: function onBefore() {
      if (!ready) {
        return {
          stopNow: true
        };
      }
    }
  };
};
useAutoRunPlugin.onInit = function(_a) {
  var _b = _a.ready, ready = _b === void 0 ? true : _b, manual = _a.manual;
  return {
    loading: !manual && ready
  };
};

// node_modules/ahooks/es/useRequest/src/plugins/useCachePlugin.js
var import_react10 = __toESM(require_react());

// node_modules/ahooks/es/useCreation/index.js
var import_react7 = __toESM(require_react());

// node_modules/ahooks/es/utils/depsAreSame.js
function depsAreSame(oldDeps, deps) {
  if (oldDeps === deps)
    return true;
  for (var i = 0; i < oldDeps.length; i++) {
    if (!Object.is(oldDeps[i], deps[i]))
      return false;
  }
  return true;
}

// node_modules/ahooks/es/useUnmount/index.js
var import_react9 = __toESM(require_react());

// node_modules/ahooks/es/useLatest/index.js
var import_react8 = __toESM(require_react());
function useLatest(value) {
  var ref = (0, import_react8.useRef)(value);
  ref.current = value;
  return ref;
}
var useLatest_default = useLatest;

// node_modules/ahooks/es/useUnmount/index.js
var useUnmount = function useUnmount2(fn) {
  if (isDev_default) {
    if (!isFunction(fn)) {
      console.error("useUnmount expected parameter is a function, got " + typeof fn);
    }
  }
  var fnRef = useLatest_default(fn);
  (0, import_react9.useEffect)(function() {
    return function() {
      fnRef.current();
    };
  }, []);
};
var useUnmount_default = useUnmount;

// node_modules/ahooks/es/useRequest/src/plugins/useDebouncePlugin.js
var import_debounce = __toESM(require_debounce());
var import_react11 = __toESM(require_react());

// node_modules/ahooks/es/useRequest/src/plugins/useLoadingDelayPlugin.js
var import_react12 = __toESM(require_react());

// node_modules/ahooks/es/useRequest/src/plugins/usePollingPlugin.js
var import_react13 = __toESM(require_react());

// node_modules/ahooks/es/utils/isBrowser.js
var isBrowser = !!(typeof window !== "undefined" && window.document && window.document.createElement);
var isBrowser_default = isBrowser;

// node_modules/ahooks/es/useRequest/src/utils/isDocumentVisible.js
function isDocumentVisible() {
  if (isBrowser_default) {
    return document.visibilityState !== "hidden";
  }
  return true;
}

// node_modules/ahooks/es/useRequest/src/utils/subscribeReVisible.js
var listeners = [];
if (isBrowser_default) {
  revalidate = function revalidate2() {
    if (!isDocumentVisible())
      return;
    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      listener();
    }
  };
  window.addEventListener("visibilitychange", revalidate, false);
}
var revalidate;

// node_modules/ahooks/es/useRequest/src/plugins/useRefreshOnWindowFocusPlugin.js
var import_react14 = __toESM(require_react());

// node_modules/ahooks/es/useRequest/src/utils/isOnline.js
function isOnline() {
  if (isBrowser_default && typeof navigator.onLine !== "undefined") {
    return navigator.onLine;
  }
  return true;
}

// node_modules/ahooks/es/useRequest/src/utils/subscribeFocus.js
var listeners2 = [];
if (isBrowser_default) {
  revalidate = function revalidate2() {
    if (!isDocumentVisible() || !isOnline())
      return;
    for (var i = 0; i < listeners2.length; i++) {
      var listener = listeners2[i];
      listener();
    }
  };
  window.addEventListener("visibilitychange", revalidate, false);
  window.addEventListener("focus", revalidate, false);
}
var revalidate;

// node_modules/ahooks/es/useRequest/src/plugins/useRetryPlugin.js
var import_react15 = __toESM(require_react());

// node_modules/ahooks/es/useRequest/src/plugins/useThrottlePlugin.js
var import_throttle = __toESM(require_throttle());
var import_react16 = __toESM(require_react());

// node_modules/ahooks/es/useMount/index.js
var import_react17 = __toESM(require_react());
var useMount = function useMount2(fn) {
  if (isDev_default) {
    if (!isFunction(fn)) {
      console.error('useMount: parameter `fn` expected to be a function, but got "' + typeof fn + '".');
    }
  }
  (0, import_react17.useEffect)(function() {
    fn === null || fn === void 0 ? void 0 : fn();
  }, []);
};
var useMount_default = useMount;

// node_modules/ahooks/es/useUpdate/index.js
var import_react18 = __toESM(require_react());
var __read2 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var useUpdate = function useUpdate2() {
  var _a = __read2((0, import_react18.useState)({}), 2), setState = _a[1];
  return (0, import_react18.useCallback)(function() {
    return setState({});
  }, []);
};
var useUpdate_default = useUpdate;

// node_modules/ahooks/es/useRequest/src/Fetch.js
var __assign = function() {
  __assign = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __awaiter2 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator = function(thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1)
        throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  }, f, y, t, g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }
    if (op[0] & 5)
      throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};
var __rest2 = function(s, e) {
  var t = {};
  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  }
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
};
var __read3 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread2 = function() {
  for (var ar = [], i = 0; i < arguments.length; i++) {
    ar = ar.concat(__read3(arguments[i]));
  }
  return ar;
};
var Fetch = function() {
  function Fetch2(serviceRef, options, subscribe2, initState2) {
    if (initState2 === void 0) {
      initState2 = {};
    }
    this.serviceRef = serviceRef;
    this.options = options;
    this.subscribe = subscribe2;
    this.initState = initState2;
    this.count = 0;
    this.state = {
      loading: false,
      params: void 0,
      data: void 0,
      error: void 0
    };
    this.state = __assign(__assign(__assign({}, this.state), {
      loading: !options.manual
    }), initState2);
  }
  Fetch2.prototype.setState = function(s) {
    if (s === void 0) {
      s = {};
    }
    this.state = __assign(__assign({}, this.state), s);
    this.subscribe();
  };
  Fetch2.prototype.runPluginHandler = function(event) {
    var rest = [];
    for (var _i = 1; _i < arguments.length; _i++) {
      rest[_i - 1] = arguments[_i];
    }
    var r = this.pluginImpls.map(function(i) {
      var _a;
      return (_a = i[event]) === null || _a === void 0 ? void 0 : _a.call.apply(_a, __spread2([i], rest));
    }).filter(Boolean);
    return Object.assign.apply(Object, __spread2([{}], r));
  };
  Fetch2.prototype.runAsync = function() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    var params = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      params[_i] = arguments[_i];
    }
    return __awaiter2(this, void 0, void 0, function() {
      var currentCount, _l, _m, stopNow, _o, returnNow, state, servicePromise, res, error_1;
      var _p;
      return __generator(this, function(_q) {
        switch (_q.label) {
          case 0:
            this.count += 1;
            currentCount = this.count;
            _l = this.runPluginHandler("onBefore", params), _m = _l.stopNow, stopNow = _m === void 0 ? false : _m, _o = _l.returnNow, returnNow = _o === void 0 ? false : _o, state = __rest2(_l, ["stopNow", "returnNow"]);
            if (stopNow) {
              return [
                2,
                new Promise(function() {
                })
              ];
            }
            this.setState(__assign({
              loading: true,
              params
            }, state));
            if (returnNow) {
              return [
                2,
                Promise.resolve(state.data)
              ];
            }
            (_b = (_a = this.options).onBefore) === null || _b === void 0 ? void 0 : _b.call(_a, params);
            _q.label = 1;
          case 1:
            _q.trys.push([1, 3, , 4]);
            servicePromise = this.runPluginHandler("onRequest", this.serviceRef.current, params).servicePromise;
            if (!servicePromise) {
              servicePromise = (_p = this.serviceRef).current.apply(_p, __spread2(params));
            }
            return [
              4,
              servicePromise
            ];
          case 2:
            res = _q.sent();
            if (currentCount !== this.count) {
              return [
                2,
                new Promise(function() {
                })
              ];
            }
            this.setState({
              data: res,
              error: void 0,
              loading: false
            });
            (_d = (_c = this.options).onSuccess) === null || _d === void 0 ? void 0 : _d.call(_c, res, params);
            this.runPluginHandler("onSuccess", res, params);
            (_f = (_e = this.options).onFinally) === null || _f === void 0 ? void 0 : _f.call(_e, params, res, void 0);
            if (currentCount === this.count) {
              this.runPluginHandler("onFinally", params, res, void 0);
            }
            return [
              2,
              res
            ];
          case 3:
            error_1 = _q.sent();
            if (currentCount !== this.count) {
              return [
                2,
                new Promise(function() {
                })
              ];
            }
            this.setState({
              error: error_1,
              loading: false
            });
            (_h = (_g = this.options).onError) === null || _h === void 0 ? void 0 : _h.call(_g, error_1, params);
            this.runPluginHandler("onError", error_1, params);
            (_k = (_j = this.options).onFinally) === null || _k === void 0 ? void 0 : _k.call(_j, params, void 0, error_1);
            if (currentCount === this.count) {
              this.runPluginHandler("onFinally", params, void 0, error_1);
            }
            throw error_1;
          case 4:
            return [
              2
            ];
        }
      });
    });
  };
  Fetch2.prototype.run = function() {
    var _this = this;
    var params = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      params[_i] = arguments[_i];
    }
    this.runAsync.apply(this, __spread2(params))["catch"](function(error) {
      if (!_this.options.onError) {
        console.error(error);
      }
    });
  };
  Fetch2.prototype.cancel = function() {
    this.count += 1;
    this.setState({
      loading: false
    });
    this.runPluginHandler("onCancel");
  };
  Fetch2.prototype.refresh = function() {
    this.run.apply(this, __spread2(this.state.params || []));
  };
  Fetch2.prototype.refreshAsync = function() {
    return this.runAsync.apply(this, __spread2(this.state.params || []));
  };
  Fetch2.prototype.mutate = function(data) {
    var targetData = isFunction(data) ? data(this.state.data) : data;
    this.runPluginHandler("onMutate", targetData);
    this.setState({
      data: targetData
    });
  };
  return Fetch2;
}();

// node_modules/ahooks/es/useAsyncEffect/index.js
var import_react21 = __toESM(require_react());

// node_modules/ahooks/es/useBoolean/index.js
var import_react23 = __toESM(require_react());

// node_modules/ahooks/es/useToggle/index.js
var import_react22 = __toESM(require_react());

// node_modules/ahooks/es/utils/domTarget.js
function getTargetElement(target, defaultElement) {
  if (!isBrowser_default) {
    return void 0;
  }
  if (!target) {
    return defaultElement;
  }
  var targetElement;
  if (isFunction(target)) {
    targetElement = target();
  } else if ("current" in target) {
    targetElement = target.current;
  } else {
    targetElement = target;
  }
  return targetElement;
}

// node_modules/ahooks/es/utils/getDocumentOrShadow.js
var checkIfAllInShadow = function checkIfAllInShadow2(targets) {
  return targets.every(function(item) {
    var targetElement = getTargetElement(item);
    if (!targetElement)
      return false;
    if (targetElement.getRootNode() instanceof ShadowRoot)
      return true;
  });
};
var getShadow = function getShadow2(node) {
  if (!node) {
    return document;
  }
  return node.getRootNode();
};
var getDocumentOrShadow = function getDocumentOrShadow2(target) {
  if (!target || !document.getRootNode) {
    return document;
  }
  var targets = Array.isArray(target) ? target : [target];
  if (checkIfAllInShadow(targets)) {
    return getShadow(getTargetElement(targets[0]));
  }
  return document;
};
var getDocumentOrShadow_default = getDocumentOrShadow;

// node_modules/ahooks/es/utils/useEffectWithTarget.js
var import_react25 = __toESM(require_react());

// node_modules/ahooks/es/utils/createEffectWithTarget.js
var import_react24 = __toESM(require_react());
var createEffectWithTarget = function createEffectWithTarget2(useEffectType) {
  var useEffectWithTarget3 = function useEffectWithTarget4(effect, deps, target) {
    var hasInitRef = (0, import_react24.useRef)(false);
    var lastElementRef = (0, import_react24.useRef)([]);
    var lastDepsRef = (0, import_react24.useRef)([]);
    var unLoadRef = (0, import_react24.useRef)();
    useEffectType(function() {
      var _a;
      var targets = Array.isArray(target) ? target : [target];
      var els = targets.map(function(item) {
        return getTargetElement(item);
      });
      if (!hasInitRef.current) {
        hasInitRef.current = true;
        lastElementRef.current = els;
        lastDepsRef.current = deps;
        unLoadRef.current = effect();
        return;
      }
      if (els.length !== lastElementRef.current.length || !depsAreSame(els, lastElementRef.current) || !depsAreSame(deps, lastDepsRef.current)) {
        (_a = unLoadRef.current) === null || _a === void 0 ? void 0 : _a.call(unLoadRef);
        lastElementRef.current = els;
        lastDepsRef.current = deps;
        unLoadRef.current = effect();
      }
    });
    useUnmount_default(function() {
      var _a;
      (_a = unLoadRef.current) === null || _a === void 0 ? void 0 : _a.call(unLoadRef);
      hasInitRef.current = false;
    });
  };
  return useEffectWithTarget3;
};
var createEffectWithTarget_default = createEffectWithTarget;

// node_modules/ahooks/es/utils/useEffectWithTarget.js
var useEffectWithTarget = createEffectWithTarget_default(import_react25.useEffect);
var useEffectWithTarget_default = useEffectWithTarget;

// node_modules/ahooks/es/useClickAway/index.js
function useClickAway(onClickAway, target, eventName) {
  if (eventName === void 0) {
    eventName = "click";
  }
  var onClickAwayRef = useLatest_default(onClickAway);
  useEffectWithTarget_default(function() {
    var handler = function handler2(event) {
      var targets = Array.isArray(target) ? target : [target];
      if (targets.some(function(item) {
        var targetElement = getTargetElement(item);
        return !targetElement || targetElement.contains(event.target);
      })) {
        return;
      }
      onClickAwayRef.current(event);
    };
    var documentOrShadow = getDocumentOrShadow_default(target);
    var eventNames = Array.isArray(eventName) ? eventName : [eventName];
    eventNames.forEach(function(event) {
      return documentOrShadow.addEventListener(event, handler);
    });
    return function() {
      eventNames.forEach(function(event) {
        return documentOrShadow.removeEventListener(event, handler);
      });
    };
  }, Array.isArray(eventName) ? eventName : [eventName], target);
}

// node_modules/ahooks/es/useControllableValue/index.js
var import_react26 = __toESM(require_react());

// node_modules/ahooks/es/useCookieState/index.js
var import_js_cookie = __toESM(require_js_cookie());
var import_react27 = __toESM(require_react());

// node_modules/ahooks/es/useCountDown/index.js
var import_dayjs = __toESM(require_dayjs_min());
var import_react28 = __toESM(require_react());

// node_modules/ahooks/es/useCounter/index.js
var import_react29 = __toESM(require_react());

// node_modules/ahooks/es/useDebounce/index.js
var import_react31 = __toESM(require_react());

// node_modules/ahooks/es/useDebounceFn/index.js
var import_debounce2 = __toESM(require_debounce());
var import_react30 = __toESM(require_react());
var __read4 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread3 = function() {
  for (var ar = [], i = 0; i < arguments.length; i++) {
    ar = ar.concat(__read4(arguments[i]));
  }
  return ar;
};
function useDebounceFn(fn, options) {
  var _a;
  if (isDev_default) {
    if (!isFunction(fn)) {
      console.error("useDebounceFn expected parameter is a function, got " + typeof fn);
    }
  }
  var fnRef = useLatest_default(fn);
  var wait = (_a = options === null || options === void 0 ? void 0 : options.wait) !== null && _a !== void 0 ? _a : 1e3;
  var debounced = (0, import_react30.useMemo)(function() {
    return (0, import_debounce2.default)(function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return fnRef.current.apply(fnRef, __spread3(args));
    }, wait, options);
  }, []);
  useUnmount_default(function() {
    debounced.cancel();
  });
  return {
    run: debounced,
    cancel: debounced.cancel,
    flush: debounced.flush
  };
}
var useDebounceFn_default = useDebounceFn;

// node_modules/ahooks/es/useDebounceEffect/index.js
var import_react32 = __toESM(require_react());
var __read5 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
function useDebounceEffect(effect, deps, options) {
  var _a = __read5((0, import_react32.useState)({}), 2), flag = _a[0], setFlag = _a[1];
  var run = useDebounceFn_default(function() {
    setFlag({});
  }, options).run;
  (0, import_react32.useEffect)(function() {
    return run();
  }, deps);
  useUpdateEffect_default(effect, [flag]);
}
var useDebounceEffect_default = useDebounceEffect;

// node_modules/ahooks/es/useDeepCompareEffect/index.js
var import_react34 = __toESM(require_react());

// node_modules/ahooks/es/createDeepCompareEffect/index.js
var import_react33 = __toESM(require_react());
var import_isEqual = __toESM(require_isEqual());
var depsEqual = function depsEqual2(aDeps, bDeps) {
  if (aDeps === void 0) {
    aDeps = [];
  }
  if (bDeps === void 0) {
    bDeps = [];
  }
  return (0, import_isEqual.default)(aDeps, bDeps);
};
var createDeepCompareEffect = function createDeepCompareEffect2(hook) {
  return function(effect, deps) {
    var ref = (0, import_react33.useRef)();
    var signalRef = (0, import_react33.useRef)(0);
    if (deps === void 0 || !depsEqual(deps, ref.current)) {
      ref.current = deps;
      signalRef.current += 1;
    }
    hook(effect, [signalRef.current]);
  };
};

// node_modules/ahooks/es/useDeepCompareEffect/index.js
var useDeepCompareEffect_default = createDeepCompareEffect(import_react34.useEffect);

// node_modules/ahooks/es/useDeepCompareLayoutEffect/index.js
var import_react35 = __toESM(require_react());
var useDeepCompareLayoutEffect_default = createDeepCompareEffect(import_react35.useLayoutEffect);

// node_modules/ahooks/es/useDocumentVisibility/index.js
var import_react36 = __toESM(require_react());

// node_modules/ahooks/es/useDrop/index.js
var import_react37 = __toESM(require_react());

// node_modules/ahooks/es/useDynamicList/index.js
var import_react38 = __toESM(require_react());

// node_modules/ahooks/es/useEventEmitter/index.js
var import_react39 = __toESM(require_react());
var __values = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function next() {
        if (o && i >= o.length)
          o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var EventEmitter = function() {
  function EventEmitter2() {
    var _this = this;
    this.subscriptions = /* @__PURE__ */ new Set();
    this.emit = function(val) {
      var e_1, _a;
      try {
        for (var _b = __values(_this.subscriptions), _c = _b.next(); !_c.done; _c = _b.next()) {
          var subscription = _c.value;
          subscription(val);
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b["return"]))
            _a.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    };
    this.useSubscription = function(callback) {
      var callbackRef = (0, import_react39.useRef)();
      callbackRef.current = callback;
      (0, import_react39.useEffect)(function() {
        function subscription(val) {
          if (callbackRef.current) {
            callbackRef.current(val);
          }
        }
        _this.subscriptions.add(subscription);
        return function() {
          _this.subscriptions["delete"](subscription);
        };
      }, []);
    };
  }
  return EventEmitter2;
}();

// node_modules/ahooks/es/useEventTarget/index.js
var import_react40 = __toESM(require_react());

// node_modules/ahooks/es/useExternal/index.js
var import_react41 = __toESM(require_react());

// node_modules/ahooks/es/useFavicon/index.js
var import_react42 = __toESM(require_react());

// node_modules/ahooks/es/useFocusWithin/index.js
var import_react43 = __toESM(require_react());

// node_modules/ahooks/es/useFullscreen/index.js
var import_react44 = __toESM(require_react());
var import_screenfull = __toESM(require_screenfull());

// node_modules/ahooks/es/useGetState/index.js
var import_react45 = __toESM(require_react());

// node_modules/ahooks/es/useHistoryTravel/index.js
var import_react46 = __toESM(require_react());

// node_modules/ahooks/es/useInfiniteScroll/index.js
var import_react47 = __toESM(require_react());

// node_modules/ahooks/es/useInterval/index.js
var import_react48 = __toESM(require_react());

// node_modules/intersection-observer/intersection-observer.js
(function() {
  "use strict";
  if (typeof window !== "object") {
    return;
  }
  if ("IntersectionObserver" in window && "IntersectionObserverEntry" in window && "intersectionRatio" in window.IntersectionObserverEntry.prototype) {
    if (!("isIntersecting" in window.IntersectionObserverEntry.prototype)) {
      Object.defineProperty(
        window.IntersectionObserverEntry.prototype,
        "isIntersecting",
        {
          get: function() {
            return this.intersectionRatio > 0;
          }
        }
      );
    }
    return;
  }
  function getFrameElement(doc) {
    try {
      return doc.defaultView && doc.defaultView.frameElement || null;
    } catch (e) {
      return null;
    }
  }
  var document2 = function(startDoc) {
    var doc = startDoc;
    var frame = getFrameElement(doc);
    while (frame) {
      doc = frame.ownerDocument;
      frame = getFrameElement(doc);
    }
    return doc;
  }(window.document);
  var registry = [];
  var crossOriginUpdater = null;
  var crossOriginRect = null;
  function IntersectionObserverEntry(entry) {
    this.time = entry.time;
    this.target = entry.target;
    this.rootBounds = ensureDOMRect(entry.rootBounds);
    this.boundingClientRect = ensureDOMRect(entry.boundingClientRect);
    this.intersectionRect = ensureDOMRect(entry.intersectionRect || getEmptyRect());
    this.isIntersecting = !!entry.intersectionRect;
    var targetRect = this.boundingClientRect;
    var targetArea = targetRect.width * targetRect.height;
    var intersectionRect = this.intersectionRect;
    var intersectionArea = intersectionRect.width * intersectionRect.height;
    if (targetArea) {
      this.intersectionRatio = Number((intersectionArea / targetArea).toFixed(4));
    } else {
      this.intersectionRatio = this.isIntersecting ? 1 : 0;
    }
  }
  function IntersectionObserver2(callback, opt_options) {
    var options = opt_options || {};
    if (typeof callback != "function") {
      throw new Error("callback must be a function");
    }
    if (options.root && options.root.nodeType != 1 && options.root.nodeType != 9) {
      throw new Error("root must be a Document or Element");
    }
    this._checkForIntersections = throttle3(
      this._checkForIntersections.bind(this),
      this.THROTTLE_TIMEOUT
    );
    this._callback = callback;
    this._observationTargets = [];
    this._queuedEntries = [];
    this._rootMarginValues = this._parseRootMargin(options.rootMargin);
    this.thresholds = this._initThresholds(options.threshold);
    this.root = options.root || null;
    this.rootMargin = this._rootMarginValues.map(function(margin) {
      return margin.value + margin.unit;
    }).join(" ");
    this._monitoringDocuments = [];
    this._monitoringUnsubscribes = [];
  }
  IntersectionObserver2.prototype.THROTTLE_TIMEOUT = 100;
  IntersectionObserver2.prototype.POLL_INTERVAL = null;
  IntersectionObserver2.prototype.USE_MUTATION_OBSERVER = true;
  IntersectionObserver2._setupCrossOriginUpdater = function() {
    if (!crossOriginUpdater) {
      crossOriginUpdater = function(boundingClientRect, intersectionRect) {
        if (!boundingClientRect || !intersectionRect) {
          crossOriginRect = getEmptyRect();
        } else {
          crossOriginRect = convertFromParentRect(boundingClientRect, intersectionRect);
        }
        registry.forEach(function(observer) {
          observer._checkForIntersections();
        });
      };
    }
    return crossOriginUpdater;
  };
  IntersectionObserver2._resetCrossOriginUpdater = function() {
    crossOriginUpdater = null;
    crossOriginRect = null;
  };
  IntersectionObserver2.prototype.observe = function(target) {
    var isTargetAlreadyObserved = this._observationTargets.some(function(item) {
      return item.element == target;
    });
    if (isTargetAlreadyObserved) {
      return;
    }
    if (!(target && target.nodeType == 1)) {
      throw new Error("target must be an Element");
    }
    this._registerInstance();
    this._observationTargets.push({ element: target, entry: null });
    this._monitorIntersections(target.ownerDocument);
    this._checkForIntersections();
  };
  IntersectionObserver2.prototype.unobserve = function(target) {
    this._observationTargets = this._observationTargets.filter(function(item) {
      return item.element != target;
    });
    this._unmonitorIntersections(target.ownerDocument);
    if (this._observationTargets.length == 0) {
      this._unregisterInstance();
    }
  };
  IntersectionObserver2.prototype.disconnect = function() {
    this._observationTargets = [];
    this._unmonitorAllIntersections();
    this._unregisterInstance();
  };
  IntersectionObserver2.prototype.takeRecords = function() {
    var records = this._queuedEntries.slice();
    this._queuedEntries = [];
    return records;
  };
  IntersectionObserver2.prototype._initThresholds = function(opt_threshold) {
    var threshold = opt_threshold || [0];
    if (!Array.isArray(threshold))
      threshold = [threshold];
    return threshold.sort().filter(function(t, i, a) {
      if (typeof t != "number" || isNaN(t) || t < 0 || t > 1) {
        throw new Error("threshold must be a number between 0 and 1 inclusively");
      }
      return t !== a[i - 1];
    });
  };
  IntersectionObserver2.prototype._parseRootMargin = function(opt_rootMargin) {
    var marginString = opt_rootMargin || "0px";
    var margins = marginString.split(/\s+/).map(function(margin) {
      var parts = /^(-?\d*\.?\d+)(px|%)$/.exec(margin);
      if (!parts) {
        throw new Error("rootMargin must be specified in pixels or percent");
      }
      return { value: parseFloat(parts[1]), unit: parts[2] };
    });
    margins[1] = margins[1] || margins[0];
    margins[2] = margins[2] || margins[0];
    margins[3] = margins[3] || margins[1];
    return margins;
  };
  IntersectionObserver2.prototype._monitorIntersections = function(doc) {
    var win = doc.defaultView;
    if (!win) {
      return;
    }
    if (this._monitoringDocuments.indexOf(doc) != -1) {
      return;
    }
    var callback = this._checkForIntersections;
    var monitoringInterval = null;
    var domObserver = null;
    if (this.POLL_INTERVAL) {
      monitoringInterval = win.setInterval(callback, this.POLL_INTERVAL);
    } else {
      addEvent(win, "resize", callback, true);
      addEvent(doc, "scroll", callback, true);
      if (this.USE_MUTATION_OBSERVER && "MutationObserver" in win) {
        domObserver = new win.MutationObserver(callback);
        domObserver.observe(doc, {
          attributes: true,
          childList: true,
          characterData: true,
          subtree: true
        });
      }
    }
    this._monitoringDocuments.push(doc);
    this._monitoringUnsubscribes.push(function() {
      var win2 = doc.defaultView;
      if (win2) {
        if (monitoringInterval) {
          win2.clearInterval(monitoringInterval);
        }
        removeEvent(win2, "resize", callback, true);
      }
      removeEvent(doc, "scroll", callback, true);
      if (domObserver) {
        domObserver.disconnect();
      }
    });
    var rootDoc = this.root && (this.root.ownerDocument || this.root) || document2;
    if (doc != rootDoc) {
      var frame = getFrameElement(doc);
      if (frame) {
        this._monitorIntersections(frame.ownerDocument);
      }
    }
  };
  IntersectionObserver2.prototype._unmonitorIntersections = function(doc) {
    var index = this._monitoringDocuments.indexOf(doc);
    if (index == -1) {
      return;
    }
    var rootDoc = this.root && (this.root.ownerDocument || this.root) || document2;
    var hasDependentTargets = this._observationTargets.some(function(item) {
      var itemDoc = item.element.ownerDocument;
      if (itemDoc == doc) {
        return true;
      }
      while (itemDoc && itemDoc != rootDoc) {
        var frame2 = getFrameElement(itemDoc);
        itemDoc = frame2 && frame2.ownerDocument;
        if (itemDoc == doc) {
          return true;
        }
      }
      return false;
    });
    if (hasDependentTargets) {
      return;
    }
    var unsubscribe = this._monitoringUnsubscribes[index];
    this._monitoringDocuments.splice(index, 1);
    this._monitoringUnsubscribes.splice(index, 1);
    unsubscribe();
    if (doc != rootDoc) {
      var frame = getFrameElement(doc);
      if (frame) {
        this._unmonitorIntersections(frame.ownerDocument);
      }
    }
  };
  IntersectionObserver2.prototype._unmonitorAllIntersections = function() {
    var unsubscribes = this._monitoringUnsubscribes.slice(0);
    this._monitoringDocuments.length = 0;
    this._monitoringUnsubscribes.length = 0;
    for (var i = 0; i < unsubscribes.length; i++) {
      unsubscribes[i]();
    }
  };
  IntersectionObserver2.prototype._checkForIntersections = function() {
    if (!this.root && crossOriginUpdater && !crossOriginRect) {
      return;
    }
    var rootIsInDom = this._rootIsInDom();
    var rootRect = rootIsInDom ? this._getRootRect() : getEmptyRect();
    this._observationTargets.forEach(function(item) {
      var target = item.element;
      var targetRect = getBoundingClientRect2(target);
      var rootContainsTarget = this._rootContainsTarget(target);
      var oldEntry = item.entry;
      var intersectionRect = rootIsInDom && rootContainsTarget && this._computeTargetAndRootIntersection(target, targetRect, rootRect);
      var rootBounds = null;
      if (!this._rootContainsTarget(target)) {
        rootBounds = getEmptyRect();
      } else if (!crossOriginUpdater || this.root) {
        rootBounds = rootRect;
      }
      var newEntry = item.entry = new IntersectionObserverEntry({
        time: now(),
        target,
        boundingClientRect: targetRect,
        rootBounds,
        intersectionRect
      });
      if (!oldEntry) {
        this._queuedEntries.push(newEntry);
      } else if (rootIsInDom && rootContainsTarget) {
        if (this._hasCrossedThreshold(oldEntry, newEntry)) {
          this._queuedEntries.push(newEntry);
        }
      } else {
        if (oldEntry && oldEntry.isIntersecting) {
          this._queuedEntries.push(newEntry);
        }
      }
    }, this);
    if (this._queuedEntries.length) {
      this._callback(this.takeRecords(), this);
    }
  };
  IntersectionObserver2.prototype._computeTargetAndRootIntersection = function(target, targetRect, rootRect) {
    if (window.getComputedStyle(target).display == "none")
      return;
    var intersectionRect = targetRect;
    var parent = getParentNode2(target);
    var atRoot = false;
    while (!atRoot && parent) {
      var parentRect = null;
      var parentComputedStyle = parent.nodeType == 1 ? window.getComputedStyle(parent) : {};
      if (parentComputedStyle.display == "none")
        return null;
      if (parent == this.root || parent.nodeType == 9) {
        atRoot = true;
        if (parent == this.root || parent == document2) {
          if (crossOriginUpdater && !this.root) {
            if (!crossOriginRect || crossOriginRect.width == 0 && crossOriginRect.height == 0) {
              parent = null;
              parentRect = null;
              intersectionRect = null;
            } else {
              parentRect = crossOriginRect;
            }
          } else {
            parentRect = rootRect;
          }
        } else {
          var frame = getParentNode2(parent);
          var frameRect = frame && getBoundingClientRect2(frame);
          var frameIntersect = frame && this._computeTargetAndRootIntersection(frame, frameRect, rootRect);
          if (frameRect && frameIntersect) {
            parent = frame;
            parentRect = convertFromParentRect(frameRect, frameIntersect);
          } else {
            parent = null;
            intersectionRect = null;
          }
        }
      } else {
        var doc = parent.ownerDocument;
        if (parent != doc.body && parent != doc.documentElement && parentComputedStyle.overflow != "visible") {
          parentRect = getBoundingClientRect2(parent);
        }
      }
      if (parentRect) {
        intersectionRect = computeRectIntersection(parentRect, intersectionRect);
      }
      if (!intersectionRect)
        break;
      parent = parent && getParentNode2(parent);
    }
    return intersectionRect;
  };
  IntersectionObserver2.prototype._getRootRect = function() {
    var rootRect;
    if (this.root && !isDoc(this.root)) {
      rootRect = getBoundingClientRect2(this.root);
    } else {
      var doc = isDoc(this.root) ? this.root : document2;
      var html = doc.documentElement;
      var body = doc.body;
      rootRect = {
        top: 0,
        left: 0,
        right: html.clientWidth || body.clientWidth,
        width: html.clientWidth || body.clientWidth,
        bottom: html.clientHeight || body.clientHeight,
        height: html.clientHeight || body.clientHeight
      };
    }
    return this._expandRectByRootMargin(rootRect);
  };
  IntersectionObserver2.prototype._expandRectByRootMargin = function(rect) {
    var margins = this._rootMarginValues.map(function(margin, i) {
      return margin.unit == "px" ? margin.value : margin.value * (i % 2 ? rect.width : rect.height) / 100;
    });
    var newRect = {
      top: rect.top - margins[0],
      right: rect.right + margins[1],
      bottom: rect.bottom + margins[2],
      left: rect.left - margins[3]
    };
    newRect.width = newRect.right - newRect.left;
    newRect.height = newRect.bottom - newRect.top;
    return newRect;
  };
  IntersectionObserver2.prototype._hasCrossedThreshold = function(oldEntry, newEntry) {
    var oldRatio = oldEntry && oldEntry.isIntersecting ? oldEntry.intersectionRatio || 0 : -1;
    var newRatio = newEntry.isIntersecting ? newEntry.intersectionRatio || 0 : -1;
    if (oldRatio === newRatio)
      return;
    for (var i = 0; i < this.thresholds.length; i++) {
      var threshold = this.thresholds[i];
      if (threshold == oldRatio || threshold == newRatio || threshold < oldRatio !== threshold < newRatio) {
        return true;
      }
    }
  };
  IntersectionObserver2.prototype._rootIsInDom = function() {
    return !this.root || containsDeep(document2, this.root);
  };
  IntersectionObserver2.prototype._rootContainsTarget = function(target) {
    var rootDoc = this.root && (this.root.ownerDocument || this.root) || document2;
    return containsDeep(rootDoc, target) && (!this.root || rootDoc == target.ownerDocument);
  };
  IntersectionObserver2.prototype._registerInstance = function() {
    if (registry.indexOf(this) < 0) {
      registry.push(this);
    }
  };
  IntersectionObserver2.prototype._unregisterInstance = function() {
    var index = registry.indexOf(this);
    if (index != -1)
      registry.splice(index, 1);
  };
  function now() {
    return window.performance && performance.now && performance.now();
  }
  function throttle3(fn, timeout) {
    var timer = null;
    return function() {
      if (!timer) {
        timer = setTimeout(function() {
          fn();
          timer = null;
        }, timeout);
      }
    };
  }
  function addEvent(node, event, fn, opt_useCapture) {
    if (typeof node.addEventListener == "function") {
      node.addEventListener(event, fn, opt_useCapture || false);
    } else if (typeof node.attachEvent == "function") {
      node.attachEvent("on" + event, fn);
    }
  }
  function removeEvent(node, event, fn, opt_useCapture) {
    if (typeof node.removeEventListener == "function") {
      node.removeEventListener(event, fn, opt_useCapture || false);
    } else if (typeof node.detachEvent == "function") {
      node.detachEvent("on" + event, fn);
    }
  }
  function computeRectIntersection(rect1, rect2) {
    var top = Math.max(rect1.top, rect2.top);
    var bottom = Math.min(rect1.bottom, rect2.bottom);
    var left = Math.max(rect1.left, rect2.left);
    var right = Math.min(rect1.right, rect2.right);
    var width = right - left;
    var height = bottom - top;
    return width >= 0 && height >= 0 && {
      top,
      bottom,
      left,
      right,
      width,
      height
    } || null;
  }
  function getBoundingClientRect2(el) {
    var rect;
    try {
      rect = el.getBoundingClientRect();
    } catch (err) {
    }
    if (!rect)
      return getEmptyRect();
    if (!(rect.width && rect.height)) {
      rect = {
        top: rect.top,
        right: rect.right,
        bottom: rect.bottom,
        left: rect.left,
        width: rect.right - rect.left,
        height: rect.bottom - rect.top
      };
    }
    return rect;
  }
  function getEmptyRect() {
    return {
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      width: 0,
      height: 0
    };
  }
  function ensureDOMRect(rect) {
    if (!rect || "x" in rect) {
      return rect;
    }
    return {
      top: rect.top,
      y: rect.top,
      bottom: rect.bottom,
      left: rect.left,
      x: rect.left,
      right: rect.right,
      width: rect.width,
      height: rect.height
    };
  }
  function convertFromParentRect(parentBoundingRect, parentIntersectionRect) {
    var top = parentIntersectionRect.top - parentBoundingRect.top;
    var left = parentIntersectionRect.left - parentBoundingRect.left;
    return {
      top,
      left,
      height: parentIntersectionRect.height,
      width: parentIntersectionRect.width,
      bottom: top + parentIntersectionRect.height,
      right: left + parentIntersectionRect.width
    };
  }
  function containsDeep(parent, child) {
    var node = child;
    while (node) {
      if (node == parent)
        return true;
      node = getParentNode2(node);
    }
    return false;
  }
  function getParentNode2(node) {
    var parent = node.parentNode;
    if (node.nodeType == 9 && node != document2) {
      return getFrameElement(node);
    }
    if (parent && parent.assignedSlot) {
      parent = parent.assignedSlot.parentNode;
    }
    if (parent && parent.nodeType == 11 && parent.host) {
      return parent.host;
    }
    return parent;
  }
  function isDoc(node) {
    return node && node.nodeType === 9;
  }
  window.IntersectionObserver = IntersectionObserver2;
  window.IntersectionObserverEntry = IntersectionObserverEntry;
})();

// node_modules/ahooks/es/useInViewport/index.js
var import_react49 = __toESM(require_react());
var __assign2 = function() {
  __assign2 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
var __read6 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __values2 = function(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function next() {
        if (o && i >= o.length)
          o = void 0;
        return {
          value: o && o[i++],
          done: !o
        };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
function useInViewport(target, options) {
  var _a = __read6((0, import_react49.useState)(), 2), state = _a[0], setState = _a[1];
  var _b = __read6((0, import_react49.useState)(), 2), ratio = _b[0], setRatio = _b[1];
  useEffectWithTarget_default(function() {
    var el = getTargetElement(target);
    if (!el) {
      return;
    }
    var observer = new IntersectionObserver(function(entries) {
      var e_1, _a2;
      try {
        for (var entries_1 = __values2(entries), entries_1_1 = entries_1.next(); !entries_1_1.done; entries_1_1 = entries_1.next()) {
          var entry = entries_1_1.value;
          setRatio(entry.intersectionRatio);
          setState(entry.isIntersecting);
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (entries_1_1 && !entries_1_1.done && (_a2 = entries_1["return"]))
            _a2.call(entries_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    }, __assign2(__assign2({}, options), {
      root: getTargetElement(options === null || options === void 0 ? void 0 : options.root)
    }));
    observer.observe(el);
    return function() {
      observer.disconnect();
    };
  }, [], target);
  return [state, ratio];
}
var useInViewport_default = useInViewport;

// node_modules/ahooks/es/useIsomorphicLayoutEffect/index.js
var import_react50 = __toESM(require_react());
var useIsomorphicLayoutEffect = isBrowser_default ? import_react50.useLayoutEffect : import_react50.useEffect;
var useIsomorphicLayoutEffect_default = useIsomorphicLayoutEffect;

// node_modules/ahooks/es/utils/useDeepCompareWithTarget.js
var import_isEqual2 = __toESM(require_isEqual());
var import_react51 = __toESM(require_react());

// node_modules/ahooks/es/createUseStorageState/index.js
var import_react52 = __toESM(require_react());
var __read7 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
function createUseStorageState(getStorage) {
  function useStorageState(key, options) {
    var storage;
    try {
      storage = getStorage();
    } catch (err) {
      console.error(err);
    }
    var serializer = function serializer2(value) {
      if (options === null || options === void 0 ? void 0 : options.serializer) {
        return options === null || options === void 0 ? void 0 : options.serializer(value);
      }
      return JSON.stringify(value);
    };
    var deserializer = function deserializer2(value) {
      if (options === null || options === void 0 ? void 0 : options.deserializer) {
        return options === null || options === void 0 ? void 0 : options.deserializer(value);
      }
      return JSON.parse(value);
    };
    function getStoredValue() {
      try {
        var raw = storage === null || storage === void 0 ? void 0 : storage.getItem(key);
        if (raw) {
          return deserializer(raw);
        }
      } catch (e) {
        console.error(e);
      }
      if (isFunction(options === null || options === void 0 ? void 0 : options.defaultValue)) {
        return options === null || options === void 0 ? void 0 : options.defaultValue();
      }
      return options === null || options === void 0 ? void 0 : options.defaultValue;
    }
    var _a = __read7((0, import_react52.useState)(function() {
      return getStoredValue();
    }), 2), state = _a[0], setState = _a[1];
    useUpdateEffect_default(function() {
      setState(getStoredValue());
    }, [key]);
    var updateState = function updateState2(value) {
      var currentState = isFunction(value) ? value(state) : value;
      setState(currentState);
      if (isUndef(currentState)) {
        storage === null || storage === void 0 ? void 0 : storage.removeItem(key);
      } else {
        try {
          storage === null || storage === void 0 ? void 0 : storage.setItem(key, serializer(currentState));
        } catch (e) {
          console.error(e);
        }
      }
    };
    return [state, useMemoizedFn_default(updateState)];
  }
  return useStorageState;
}

// node_modules/ahooks/es/useLocalStorageState/index.js
var useLocalStorageState = createUseStorageState(function() {
  return isBrowser_default ? localStorage : void 0;
});

// node_modules/ahooks/es/useLockFn/index.js
var import_react53 = __toESM(require_react());
var __awaiter3 = function(thisArg, _arguments, P2, generator) {
  function adopt(value) {
    return value instanceof P2 ? value : new P2(function(resolve) {
      resolve(value);
    });
  }
  return new (P2 || (P2 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var __generator2 = function(thisArg, body) {
  var _ = {
    label: 0,
    sent: function sent() {
      if (t[0] & 1)
        throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  }, f, y, t, g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_) {
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return {
              value: op[1],
              done: false
            };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    }
    if (op[0] & 5)
      throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};
var __read8 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread4 = function() {
  for (var ar = [], i = 0; i < arguments.length; i++) {
    ar = ar.concat(__read8(arguments[i]));
  }
  return ar;
};
function useLockFn(fn) {
  var _this = this;
  var lockRef = (0, import_react53.useRef)(false);
  return (0, import_react53.useCallback)(function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    return __awaiter3(_this, void 0, void 0, function() {
      var ret, e_1;
      return __generator2(this, function(_a) {
        switch (_a.label) {
          case 0:
            if (lockRef.current)
              return [
                2
              ];
            lockRef.current = true;
            _a.label = 1;
          case 1:
            _a.trys.push([1, 3, , 4]);
            return [
              4,
              fn.apply(void 0, __spread4(args))
            ];
          case 2:
            ret = _a.sent();
            lockRef.current = false;
            return [
              2,
              ret
            ];
          case 3:
            e_1 = _a.sent();
            lockRef.current = false;
            throw e_1;
          case 4:
            return [
              2
            ];
        }
      });
    });
  }, [fn]);
}
var useLockFn_default = useLockFn;

// node_modules/ahooks/es/useLongPress/index.js
var import_react54 = __toESM(require_react());
var touchSupported = isBrowser_default && ("ontouchstart" in window || window.DocumentTouch && document instanceof DocumentTouch);

// node_modules/ahooks/es/useMap/index.js
var import_react55 = __toESM(require_react());

// node_modules/ahooks/es/useRafState/index.js
var import_react56 = __toESM(require_react());
var __read9 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
function useRafState(initialState) {
  var ref = (0, import_react56.useRef)(0);
  var _a = __read9((0, import_react56.useState)(initialState), 2), state = _a[0], setState = _a[1];
  var setRafState = (0, import_react56.useCallback)(function(value) {
    cancelAnimationFrame(ref.current);
    ref.current = requestAnimationFrame(function() {
      setState(value);
    });
  }, []);
  useUnmount_default(function() {
    cancelAnimationFrame(ref.current);
  });
  return [state, setRafState];
}
var useRafState_default = useRafState;

// node_modules/ahooks/es/useNetwork/index.js
var import_react57 = __toESM(require_react());
var NetworkEventType;
(function(NetworkEventType2) {
  NetworkEventType2["ONLINE"] = "online";
  NetworkEventType2["OFFLINE"] = "offline";
  NetworkEventType2["CHANGE"] = "change";
})(NetworkEventType || (NetworkEventType = {}));

// node_modules/ahooks/es/usePrevious/index.js
var import_react58 = __toESM(require_react());

// node_modules/ahooks/es/useRafInterval/index.js
var import_react59 = __toESM(require_react());

// node_modules/ahooks/es/useRafTimeout/index.js
var import_react60 = __toESM(require_react());

// node_modules/ahooks/es/useReactive/index.js
var import_react61 = __toESM(require_react());

// node_modules/ahooks/es/useResetState/index.js
var import_react62 = __toESM(require_react());

// node_modules/ahooks/es/useResponsive/index.js
var import_react63 = __toESM(require_react());

// node_modules/ahooks/es/useSafeState/index.js
var import_react65 = __toESM(require_react());

// node_modules/ahooks/es/useUnmountedRef/index.js
var import_react64 = __toESM(require_react());
var useUnmountedRef = function useUnmountedRef2() {
  var unmountedRef = (0, import_react64.useRef)(false);
  (0, import_react64.useEffect)(function() {
    unmountedRef.current = false;
    return function() {
      unmountedRef.current = true;
    };
  }, []);
  return unmountedRef;
};
var useUnmountedRef_default = useUnmountedRef;

// node_modules/ahooks/es/useSelections/index.js
var import_react66 = __toESM(require_react());

// node_modules/ahooks/es/useSessionStorageState/index.js
var useSessionStorageState = createUseStorageState(function() {
  return isBrowser_default ? sessionStorage : void 0;
});

// node_modules/ahooks/es/useSet/index.js
var import_react67 = __toESM(require_react());

// node_modules/ahooks/es/useSetState/index.js
var import_react68 = __toESM(require_react());

// node_modules/ahooks/es/utils/useLayoutEffectWithTarget.js
var import_react69 = __toESM(require_react());
var useEffectWithTarget2 = createEffectWithTarget_default(import_react69.useLayoutEffect);
var useLayoutEffectWithTarget_default = useEffectWithTarget2;

// node_modules/ahooks/es/utils/useIsomorphicLayoutEffectWithTarget.js
var useIsomorphicLayoutEffectWithTarget = isBrowser_default ? useLayoutEffectWithTarget_default : useEffectWithTarget_default;
var useIsomorphicLayoutEffectWithTarget_default = useIsomorphicLayoutEffectWithTarget;

// node_modules/ahooks/es/useSize/index.js
var __read10 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
function useSize(target) {
  var _a = __read10(useRafState_default(), 2), state = _a[0], setState = _a[1];
  useIsomorphicLayoutEffectWithTarget_default(function() {
    var el = getTargetElement(target);
    if (!el) {
      return;
    }
    var resizeObserver = new ResizeObserver_es_default(function(entries) {
      entries.forEach(function(entry) {
        var _a2 = entry.target, clientWidth = _a2.clientWidth, clientHeight = _a2.clientHeight;
        setState({
          width: clientWidth,
          height: clientHeight
        });
      });
    });
    resizeObserver.observe(el);
    return function() {
      resizeObserver.disconnect();
    };
  }, [], target);
  return state;
}
var useSize_default = useSize;

// node_modules/ahooks/es/useTextSelection/index.js
var import_react70 = __toESM(require_react());
var __assign3 = function() {
  __assign3 = Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
      }
    }
    return t;
  };
  return __assign3.apply(this, arguments);
};
var initRect = {
  top: NaN,
  left: NaN,
  bottom: NaN,
  right: NaN,
  height: NaN,
  width: NaN
};
var initState = __assign3({
  text: ""
}, initRect);

// node_modules/ahooks/es/useThrottle/index.js
var import_react72 = __toESM(require_react());

// node_modules/ahooks/es/useThrottleFn/index.js
var import_throttle2 = __toESM(require_throttle());
var import_react71 = __toESM(require_react());
var __read11 = function(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {
      ar.push(r.value);
    }
  } catch (error) {
    e = {
      error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
};
var __spread5 = function() {
  for (var ar = [], i = 0; i < arguments.length; i++) {
    ar = ar.concat(__read11(arguments[i]));
  }
  return ar;
};
function useThrottleFn(fn, options) {
  var _a;
  if (isDev_default) {
    if (!isFunction(fn)) {
      console.error("useThrottleFn expected parameter is a function, got " + typeof fn);
    }
  }
  var fnRef = useLatest_default(fn);
  var wait = (_a = options === null || options === void 0 ? void 0 : options.wait) !== null && _a !== void 0 ? _a : 1e3;
  var throttled = (0, import_react71.useMemo)(function() {
    return (0, import_throttle2.default)(function() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      return fnRef.current.apply(fnRef, __spread5(args));
    }, wait, options);
  }, []);
  useUnmount_default(function() {
    throttled.cancel();
  });
  return {
    run: throttled,
    cancel: throttled.cancel,
    flush: throttled.flush
  };
}
var useThrottleFn_default = useThrottleFn;

// node_modules/ahooks/es/useThrottleEffect/index.js
var import_react73 = __toESM(require_react());

// node_modules/ahooks/es/useTimeout/index.js
var import_react74 = __toESM(require_react());
function useTimeout(fn, delay) {
  var fnRef = useLatest_default(fn);
  var timerRef = (0, import_react74.useRef)();
  (0, import_react74.useEffect)(function() {
    if (!isNumber(delay) || delay < 0)
      return;
    timerRef.current = setTimeout(function() {
      fnRef.current();
    }, delay);
    return function() {
      if (timerRef.current) {
        clearTimeout(timerRef.current);
      }
    };
  }, [delay]);
  var clear4 = (0, import_react74.useCallback)(function() {
    if (timerRef.current) {
      clearTimeout(timerRef.current);
    }
  }, []);
  return clear4;
}
var useTimeout_default = useTimeout;

// node_modules/ahooks/es/useTitle/index.js
var import_react75 = __toESM(require_react());

// node_modules/ahooks/es/useTrackedEffect/index.js
var import_react76 = __toESM(require_react());

// node_modules/ahooks/es/useUpdateLayoutEffect/index.js
var import_react77 = __toESM(require_react());
var useUpdateLayoutEffect_default = createUpdateEffect(import_react77.useLayoutEffect);

// node_modules/ahooks/es/useVirtualList/index.js
var import_react78 = __toESM(require_react());

// node_modules/ahooks/es/useWebSocket/index.js
var import_react79 = __toESM(require_react());
var ReadyState;
(function(ReadyState2) {
  ReadyState2[ReadyState2["Connecting"] = 0] = "Connecting";
  ReadyState2[ReadyState2["Open"] = 1] = "Open";
  ReadyState2[ReadyState2["Closing"] = 2] = "Closing";
  ReadyState2[ReadyState2["Closed"] = 3] = "Closed";
})(ReadyState || (ReadyState = {}));

// node_modules/ahooks/es/useWhyDidYouUpdate/index.js
var import_react80 = __toESM(require_react());

// node_modules/antd-mobile/es/components/mask/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/mask/mask.css";

// node_modules/antd-mobile/es/components/mask/mask.js
var import_react88 = __toESM(require_react());

// node_modules/antd-mobile/es/utils/use-touch.js
var import_react81 = __toESM(require_react());
var MIN_DISTANCE = 10;
function getDirection(x, y) {
  if (x > y && x > MIN_DISTANCE) {
    return "horizontal";
  }
  if (y > x && y > MIN_DISTANCE) {
    return "vertical";
  }
  return "";
}
function useTouch() {
  const startX = (0, import_react81.useRef)(0);
  const startY = (0, import_react81.useRef)(0);
  const deltaX = (0, import_react81.useRef)(0);
  const deltaY = (0, import_react81.useRef)(0);
  const offsetX = (0, import_react81.useRef)(0);
  const offsetY = (0, import_react81.useRef)(0);
  const direction = (0, import_react81.useRef)("");
  const isVertical = () => direction.current === "vertical";
  const isHorizontal = () => direction.current === "horizontal";
  const reset = () => {
    deltaX.current = 0;
    deltaY.current = 0;
    offsetX.current = 0;
    offsetY.current = 0;
    direction.current = "";
  };
  const start2 = (event) => {
    reset();
    startX.current = event.touches[0].clientX;
    startY.current = event.touches[0].clientY;
  };
  const move = (event) => {
    const touch = event.touches[0];
    deltaX.current = touch.clientX < 0 ? 0 : touch.clientX - startX.current;
    deltaY.current = touch.clientY - startY.current;
    offsetX.current = Math.abs(deltaX.current);
    offsetY.current = Math.abs(deltaY.current);
    if (!direction.current) {
      direction.current = getDirection(offsetX.current, offsetY.current);
    }
  };
  return {
    move,
    start: start2,
    reset,
    startX,
    startY,
    deltaX,
    deltaY,
    offsetX,
    offsetY,
    direction,
    isVertical,
    isHorizontal
  };
}

// node_modules/antd-mobile/es/utils/use-lock-scroll.js
var import_react82 = __toESM(require_react());

// node_modules/antd-mobile/es/utils/get-scroll-parent.js
var defaultRoot = canUseDom ? window : void 0;
var overflowStylePatterns = ["scroll", "auto", "overlay"];
function isElement(node) {
  const ELEMENT_NODE_TYPE = 1;
  return node.nodeType === ELEMENT_NODE_TYPE;
}
function getScrollParent(el, root = defaultRoot) {
  let node = el;
  while (node && node !== root && isElement(node)) {
    if (node === document.body) {
      return root;
    }
    const {
      overflowY
    } = window.getComputedStyle(node);
    if (overflowStylePatterns.includes(overflowY) && node.scrollHeight > node.clientHeight) {
      return node;
    }
    node = node.parentNode;
  }
  return root;
}

// node_modules/antd-mobile/es/utils/supports-passive.js
var supportsPassive = false;
if (canUseDom) {
  try {
    const opts = {};
    Object.defineProperty(opts, "passive", {
      get() {
        supportsPassive = true;
      }
    });
    window.addEventListener("test-passive", null, opts);
  } catch (e) {
  }
}

// node_modules/antd-mobile/es/utils/use-lock-scroll.js
var totalLockCount = 0;
var BODY_LOCK_CLASS = "adm-overflow-hidden";
function useLockScroll(rootRef, shouldLock) {
  const touch = useTouch();
  const onTouchMove = (event) => {
    touch.move(event);
    const direction = touch.deltaY.current > 0 ? "10" : "01";
    const el = getScrollParent(event.target, rootRef.current);
    if (!el)
      return;
    const {
      scrollHeight,
      offsetHeight,
      scrollTop
    } = el;
    let status = "11";
    if (scrollTop === 0) {
      status = offsetHeight >= scrollHeight ? "00" : "01";
    } else if (scrollTop + offsetHeight >= scrollHeight) {
      status = "10";
    }
    if (status !== "11" && touch.isVertical() && !(parseInt(status, 2) & parseInt(direction, 2))) {
      if (event.cancelable) {
        event.preventDefault();
      }
    }
  };
  const lock = () => {
    document.addEventListener("touchstart", touch.start);
    document.addEventListener("touchmove", onTouchMove, supportsPassive ? {
      passive: false
    } : false);
    if (!totalLockCount) {
      document.body.classList.add(BODY_LOCK_CLASS);
    }
    totalLockCount++;
  };
  const unlock = () => {
    if (totalLockCount) {
      document.removeEventListener("touchstart", touch.start);
      document.removeEventListener("touchmove", onTouchMove);
      totalLockCount--;
      if (!totalLockCount) {
        document.body.classList.remove(BODY_LOCK_CLASS);
      }
    }
  };
  (0, import_react82.useEffect)(() => {
    if (shouldLock) {
      lock();
      return () => {
        unlock();
      };
    }
  }, [shouldLock]);
}

// node_modules/@react-spring/rafz/dist/react-spring-rafz.esm.js
var updateQueue = makeQueue();
var raf = (fn) => schedule(fn, updateQueue);
var writeQueue = makeQueue();
raf.write = (fn) => schedule(fn, writeQueue);
var onStartQueue = makeQueue();
raf.onStart = (fn) => schedule(fn, onStartQueue);
var onFrameQueue = makeQueue();
raf.onFrame = (fn) => schedule(fn, onFrameQueue);
var onFinishQueue = makeQueue();
raf.onFinish = (fn) => schedule(fn, onFinishQueue);
var timeouts = [];
raf.setTimeout = (handler, ms) => {
  let time = raf.now() + ms;
  let cancel = () => {
    let i = timeouts.findIndex((t) => t.cancel == cancel);
    if (~i)
      timeouts.splice(i, 1);
    pendingCount -= ~i ? 1 : 0;
  };
  let timeout = {
    time,
    handler,
    cancel
  };
  timeouts.splice(findTimeout(time), 0, timeout);
  pendingCount += 1;
  start();
  return timeout;
};
var findTimeout = (time) => ~(~timeouts.findIndex((t) => t.time > time) || ~timeouts.length);
raf.cancel = (fn) => {
  onStartQueue.delete(fn);
  onFrameQueue.delete(fn);
  onFinishQueue.delete(fn);
  updateQueue.delete(fn);
  writeQueue.delete(fn);
};
raf.sync = (fn) => {
  sync = true;
  raf.batchedUpdates(fn);
  sync = false;
};
raf.throttle = (fn) => {
  let lastArgs;
  function queuedFn() {
    try {
      fn(...lastArgs);
    } finally {
      lastArgs = null;
    }
  }
  function throttled(...args) {
    lastArgs = args;
    raf.onStart(queuedFn);
  }
  throttled.handler = fn;
  throttled.cancel = () => {
    onStartQueue.delete(queuedFn);
    lastArgs = null;
  };
  return throttled;
};
var nativeRaf = typeof window != "undefined" ? window.requestAnimationFrame : () => {
};
raf.use = (impl) => nativeRaf = impl;
raf.now = typeof performance != "undefined" ? () => performance.now() : Date.now;
raf.batchedUpdates = (fn) => fn();
raf.catch = console.error;
raf.frameLoop = "always";
raf.advance = () => {
  if (raf.frameLoop !== "demand") {
    console.warn("Cannot call the manual advancement of rafz whilst frameLoop is not set as demand");
  } else {
    update();
  }
};
var ts = -1;
var pendingCount = 0;
var sync = false;
function schedule(fn, queue) {
  if (sync) {
    queue.delete(fn);
    fn(0);
  } else {
    queue.add(fn);
    start();
  }
}
function start() {
  if (ts < 0) {
    ts = 0;
    if (raf.frameLoop !== "demand") {
      nativeRaf(loop);
    }
  }
}
function stop() {
  ts = -1;
}
function loop() {
  if (~ts) {
    nativeRaf(loop);
    raf.batchedUpdates(update);
  }
}
function update() {
  let prevTs = ts;
  ts = raf.now();
  let count = findTimeout(ts);
  if (count) {
    eachSafely(timeouts.splice(0, count), (t) => t.handler());
    pendingCount -= count;
  }
  if (!pendingCount) {
    stop();
    return;
  }
  onStartQueue.flush();
  updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);
  onFrameQueue.flush();
  writeQueue.flush();
  onFinishQueue.flush();
}
function makeQueue() {
  let next = /* @__PURE__ */ new Set();
  let current = next;
  return {
    add(fn) {
      pendingCount += current == next && !next.has(fn) ? 1 : 0;
      next.add(fn);
    },
    delete(fn) {
      pendingCount -= current == next && next.has(fn) ? 1 : 0;
      return next.delete(fn);
    },
    flush(arg) {
      if (current.size) {
        next = /* @__PURE__ */ new Set();
        pendingCount -= current.size;
        eachSafely(current, (fn) => fn(arg) && next.add(fn));
        pendingCount += next.size;
        current = next;
      }
    }
  };
}
function eachSafely(values, each2) {
  values.forEach((value) => {
    try {
      each2(value);
    } catch (e) {
      raf.catch(e);
    }
  });
}

// node_modules/@react-spring/shared/dist/react-spring-shared.esm.js
var import_react83 = __toESM(require_react());
function noop() {
}
var defineHidden = (obj, key, value) => Object.defineProperty(obj, key, {
  value,
  writable: true,
  configurable: true
});
var is = {
  arr: Array.isArray,
  obj: (a) => !!a && a.constructor.name === "Object",
  fun: (a) => typeof a === "function",
  str: (a) => typeof a === "string",
  num: (a) => typeof a === "number",
  und: (a) => a === void 0
};
function isEqual3(a, b) {
  if (is.arr(a)) {
    if (!is.arr(b) || a.length !== b.length)
      return false;
    for (let i = 0; i < a.length; i++) {
      if (a[i] !== b[i])
        return false;
    }
    return true;
  }
  return a === b;
}
var each = (obj, fn) => obj.forEach(fn);
function eachProp(obj, fn, ctx2) {
  if (is.arr(obj)) {
    for (let i = 0; i < obj.length; i++) {
      fn.call(ctx2, obj[i], `${i}`);
    }
    return;
  }
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      fn.call(ctx2, obj[key], key);
    }
  }
}
var toArray = (a) => is.und(a) ? [] : is.arr(a) ? a : [a];
function flush(queue, iterator) {
  if (queue.size) {
    const items = Array.from(queue);
    queue.clear();
    each(items, iterator);
  }
}
var flushCalls = (queue, ...args) => flush(queue, (fn) => fn(...args));
var isSSR = () => typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
var createStringInterpolator$1;
var to;
var colors$1 = null;
var skipAnimation = false;
var willAdvance = noop;
var assign = (globals2) => {
  if (globals2.to)
    to = globals2.to;
  if (globals2.now)
    raf.now = globals2.now;
  if (globals2.colors !== void 0)
    colors$1 = globals2.colors;
  if (globals2.skipAnimation != null)
    skipAnimation = globals2.skipAnimation;
  if (globals2.createStringInterpolator)
    createStringInterpolator$1 = globals2.createStringInterpolator;
  if (globals2.requestAnimationFrame)
    raf.use(globals2.requestAnimationFrame);
  if (globals2.batchedUpdates)
    raf.batchedUpdates = globals2.batchedUpdates;
  if (globals2.willAdvance)
    willAdvance = globals2.willAdvance;
  if (globals2.frameLoop)
    raf.frameLoop = globals2.frameLoop;
};
var globals = Object.freeze({
  __proto__: null,
  get createStringInterpolator() {
    return createStringInterpolator$1;
  },
  get to() {
    return to;
  },
  get colors() {
    return colors$1;
  },
  get skipAnimation() {
    return skipAnimation;
  },
  get willAdvance() {
    return willAdvance;
  },
  assign
});
var startQueue = /* @__PURE__ */ new Set();
var currentFrame = [];
var prevFrame = [];
var priority = 0;
var frameLoop = {
  get idle() {
    return !startQueue.size && !currentFrame.length;
  },
  start(animation) {
    if (priority > animation.priority) {
      startQueue.add(animation);
      raf.onStart(flushStartQueue);
    } else {
      startSafely(animation);
      raf(advance);
    }
  },
  advance,
  sort(animation) {
    if (priority) {
      raf.onFrame(() => frameLoop.sort(animation));
    } else {
      const prevIndex = currentFrame.indexOf(animation);
      if (~prevIndex) {
        currentFrame.splice(prevIndex, 1);
        startUnsafely(animation);
      }
    }
  },
  clear() {
    currentFrame = [];
    startQueue.clear();
  }
};
function flushStartQueue() {
  startQueue.forEach(startSafely);
  startQueue.clear();
  raf(advance);
}
function startSafely(animation) {
  if (!currentFrame.includes(animation))
    startUnsafely(animation);
}
function startUnsafely(animation) {
  currentFrame.splice(findIndex(currentFrame, (other) => other.priority > animation.priority), 0, animation);
}
function advance(dt) {
  const nextFrame = prevFrame;
  for (let i = 0; i < currentFrame.length; i++) {
    const animation = currentFrame[i];
    priority = animation.priority;
    if (!animation.idle) {
      willAdvance(animation);
      animation.advance(dt);
      if (!animation.idle) {
        nextFrame.push(animation);
      }
    }
  }
  priority = 0;
  prevFrame = currentFrame;
  prevFrame.length = 0;
  currentFrame = nextFrame;
  return currentFrame.length > 0;
}
function findIndex(arr, test) {
  const index = arr.findIndex(test);
  return index < 0 ? arr.length : index;
}
var colors = {
  transparent: 0,
  aliceblue: 4042850303,
  antiquewhite: 4209760255,
  aqua: 16777215,
  aquamarine: 2147472639,
  azure: 4043309055,
  beige: 4126530815,
  bisque: 4293182719,
  black: 255,
  blanchedalmond: 4293643775,
  blue: 65535,
  blueviolet: 2318131967,
  brown: 2771004159,
  burlywood: 3736635391,
  burntsienna: 3934150143,
  cadetblue: 1604231423,
  chartreuse: 2147418367,
  chocolate: 3530104575,
  coral: 4286533887,
  cornflowerblue: 1687547391,
  cornsilk: 4294499583,
  crimson: 3692313855,
  cyan: 16777215,
  darkblue: 35839,
  darkcyan: 9145343,
  darkgoldenrod: 3095792639,
  darkgray: 2846468607,
  darkgreen: 6553855,
  darkgrey: 2846468607,
  darkkhaki: 3182914559,
  darkmagenta: 2332068863,
  darkolivegreen: 1433087999,
  darkorange: 4287365375,
  darkorchid: 2570243327,
  darkred: 2332033279,
  darksalmon: 3918953215,
  darkseagreen: 2411499519,
  darkslateblue: 1211993087,
  darkslategray: 793726975,
  darkslategrey: 793726975,
  darkturquoise: 13554175,
  darkviolet: 2483082239,
  deeppink: 4279538687,
  deepskyblue: 12582911,
  dimgray: 1768516095,
  dimgrey: 1768516095,
  dodgerblue: 512819199,
  firebrick: 2988581631,
  floralwhite: 4294635775,
  forestgreen: 579543807,
  fuchsia: 4278255615,
  gainsboro: 3705462015,
  ghostwhite: 4177068031,
  gold: 4292280575,
  goldenrod: 3668254975,
  gray: 2155905279,
  green: 8388863,
  greenyellow: 2919182335,
  grey: 2155905279,
  honeydew: 4043305215,
  hotpink: 4285117695,
  indianred: 3445382399,
  indigo: 1258324735,
  ivory: 4294963455,
  khaki: 4041641215,
  lavender: 3873897215,
  lavenderblush: 4293981695,
  lawngreen: 2096890111,
  lemonchiffon: 4294626815,
  lightblue: 2916673279,
  lightcoral: 4034953471,
  lightcyan: 3774873599,
  lightgoldenrodyellow: 4210742015,
  lightgray: 3553874943,
  lightgreen: 2431553791,
  lightgrey: 3553874943,
  lightpink: 4290167295,
  lightsalmon: 4288707327,
  lightseagreen: 548580095,
  lightskyblue: 2278488831,
  lightslategray: 2005441023,
  lightslategrey: 2005441023,
  lightsteelblue: 2965692159,
  lightyellow: 4294959359,
  lime: 16711935,
  limegreen: 852308735,
  linen: 4210091775,
  magenta: 4278255615,
  maroon: 2147483903,
  mediumaquamarine: 1724754687,
  mediumblue: 52735,
  mediumorchid: 3126187007,
  mediumpurple: 2473647103,
  mediumseagreen: 1018393087,
  mediumslateblue: 2070474495,
  mediumspringgreen: 16423679,
  mediumturquoise: 1221709055,
  mediumvioletred: 3340076543,
  midnightblue: 421097727,
  mintcream: 4127193855,
  mistyrose: 4293190143,
  moccasin: 4293178879,
  navajowhite: 4292783615,
  navy: 33023,
  oldlace: 4260751103,
  olive: 2155872511,
  olivedrab: 1804477439,
  orange: 4289003775,
  orangered: 4282712319,
  orchid: 3664828159,
  palegoldenrod: 4008225535,
  palegreen: 2566625535,
  paleturquoise: 2951671551,
  palevioletred: 3681588223,
  papayawhip: 4293907967,
  peachpuff: 4292524543,
  peru: 3448061951,
  pink: 4290825215,
  plum: 3718307327,
  powderblue: 2967529215,
  purple: 2147516671,
  rebeccapurple: 1714657791,
  red: 4278190335,
  rosybrown: 3163525119,
  royalblue: 1097458175,
  saddlebrown: 2336560127,
  salmon: 4202722047,
  sandybrown: 4104413439,
  seagreen: 780883967,
  seashell: 4294307583,
  sienna: 2689740287,
  silver: 3233857791,
  skyblue: 2278484991,
  slateblue: 1784335871,
  slategray: 1887473919,
  slategrey: 1887473919,
  snow: 4294638335,
  springgreen: 16744447,
  steelblue: 1182971135,
  tan: 3535047935,
  teal: 8421631,
  thistle: 3636451583,
  tomato: 4284696575,
  turquoise: 1088475391,
  violet: 4001558271,
  wheat: 4125012991,
  white: 4294967295,
  whitesmoke: 4126537215,
  yellow: 4294902015,
  yellowgreen: 2597139199
};
var NUMBER = "[-+]?\\d*\\.?\\d+";
var PERCENTAGE = NUMBER + "%";
function call(...parts) {
  return "\\(\\s*(" + parts.join(")\\s*,\\s*(") + ")\\s*\\)";
}
var rgb = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
var rgba = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
var hsl = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
var hsla = new RegExp("hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));
var hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex6 = /^#([0-9a-fA-F]{6})$/;
var hex8 = /^#([0-9a-fA-F]{8})$/;
function normalizeColor(color) {
  let match;
  if (typeof color === "number") {
    return color >>> 0 === color && color >= 0 && color <= 4294967295 ? color : null;
  }
  if (match = hex6.exec(color))
    return parseInt(match[1] + "ff", 16) >>> 0;
  if (colors$1 && colors$1[color] !== void 0) {
    return colors$1[color];
  }
  if (match = rgb.exec(color)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 255) >>> 0;
  }
  if (match = rgba.exec(color)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
  }
  if (match = hex3.exec(color)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + "ff", 16) >>> 0;
  }
  if (match = hex8.exec(color))
    return parseInt(match[1], 16) >>> 0;
  if (match = hex4.exec(color)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
  }
  if (match = hsl.exec(color)) {
    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 255) >>> 0;
  }
  if (match = hsla.exec(color)) {
    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
  }
  return null;
}
function hue2rgb(p, q, t) {
  if (t < 0)
    t += 1;
  if (t > 1)
    t -= 1;
  if (t < 1 / 6)
    return p + (q - p) * 6 * t;
  if (t < 1 / 2)
    return q;
  if (t < 2 / 3)
    return p + (q - p) * (2 / 3 - t) * 6;
  return p;
}
function hslToRgb(h, s, l) {
  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
  const p = 2 * l - q;
  const r = hue2rgb(p, q, h + 1 / 3);
  const g = hue2rgb(p, q, h);
  const b = hue2rgb(p, q, h - 1 / 3);
  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
}
function parse255(str) {
  const int = parseInt(str, 10);
  if (int < 0)
    return 0;
  if (int > 255)
    return 255;
  return int;
}
function parse360(str) {
  const int = parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}
function parse1(str) {
  const num = parseFloat(str);
  if (num < 0)
    return 0;
  if (num > 1)
    return 255;
  return Math.round(num * 255);
}
function parsePercentage(str) {
  const int = parseFloat(str);
  if (int < 0)
    return 0;
  if (int > 100)
    return 1;
  return int / 100;
}
function colorToRgba(input) {
  let int32Color = normalizeColor(input);
  if (int32Color === null)
    return input;
  int32Color = int32Color || 0;
  let r = (int32Color & 4278190080) >>> 24;
  let g = (int32Color & 16711680) >>> 16;
  let b = (int32Color & 65280) >>> 8;
  let a = (int32Color & 255) / 255;
  return `rgba(${r}, ${g}, ${b}, ${a})`;
}
var createInterpolator = (range, output, extrapolate) => {
  if (is.fun(range)) {
    return range;
  }
  if (is.arr(range)) {
    return createInterpolator({
      range,
      output,
      extrapolate
    });
  }
  if (is.str(range.output[0])) {
    return createStringInterpolator$1(range);
  }
  const config3 = range;
  const outputRange = config3.output;
  const inputRange = config3.range || [0, 1];
  const extrapolateLeft = config3.extrapolateLeft || config3.extrapolate || "extend";
  const extrapolateRight = config3.extrapolateRight || config3.extrapolate || "extend";
  const easing = config3.easing || ((t) => t);
  return (input) => {
    const range2 = findRange(input, inputRange);
    return interpolate(input, inputRange[range2], inputRange[range2 + 1], outputRange[range2], outputRange[range2 + 1], easing, extrapolateLeft, extrapolateRight, config3.map);
  };
};
function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map) {
  let result = map ? map(input) : input;
  if (result < inputMin) {
    if (extrapolateLeft === "identity")
      return result;
    else if (extrapolateLeft === "clamp")
      result = inputMin;
  }
  if (result > inputMax) {
    if (extrapolateRight === "identity")
      return result;
    else if (extrapolateRight === "clamp")
      result = inputMax;
  }
  if (outputMin === outputMax)
    return outputMin;
  if (inputMin === inputMax)
    return input <= inputMin ? outputMin : outputMax;
  if (inputMin === -Infinity)
    result = -result;
  else if (inputMax === Infinity)
    result = result - inputMin;
  else
    result = (result - inputMin) / (inputMax - inputMin);
  result = easing(result);
  if (outputMin === -Infinity)
    result = -result;
  else if (outputMax === Infinity)
    result = result + outputMin;
  else
    result = result * (outputMax - outputMin) + outputMin;
  return result;
}
function findRange(input, inputRange) {
  for (var i = 1; i < inputRange.length - 1; ++i)
    if (inputRange[i] >= input)
      break;
  return i - 1;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var $get = Symbol.for("FluidValue.get");
var $observers = Symbol.for("FluidValue.observers");
var hasFluidValue = (arg) => Boolean(arg && arg[$get]);
var getFluidValue = (arg) => arg && arg[$get] ? arg[$get]() : arg;
var getFluidObservers = (target) => target[$observers] || null;
function callFluidObserver(observer, event) {
  if (observer.eventObserved) {
    observer.eventObserved(event);
  } else {
    observer(event);
  }
}
function callFluidObservers(target, event) {
  let observers = target[$observers];
  if (observers) {
    observers.forEach((observer) => {
      callFluidObserver(observer, event);
    });
  }
}
var FluidValue = class {
  constructor(get) {
    this[$get] = void 0;
    this[$observers] = void 0;
    if (!get && !(get = this.get)) {
      throw Error("Unknown getter");
    }
    setFluidGetter(this, get);
  }
};
var setFluidGetter = (target, get) => setHidden(target, $get, get);
function addFluidObserver(target, observer) {
  if (target[$get]) {
    let observers = target[$observers];
    if (!observers) {
      setHidden(target, $observers, observers = /* @__PURE__ */ new Set());
    }
    if (!observers.has(observer)) {
      observers.add(observer);
      if (target.observerAdded) {
        target.observerAdded(observers.size, observer);
      }
    }
  }
  return observer;
}
function removeFluidObserver(target, observer) {
  let observers = target[$observers];
  if (observers && observers.has(observer)) {
    const count = observers.size - 1;
    if (count) {
      observers.delete(observer);
    } else {
      target[$observers] = null;
    }
    if (target.observerRemoved) {
      target.observerRemoved(count, observer);
    }
  }
}
var setHidden = (target, key, value) => Object.defineProperty(target, key, {
  value,
  writable: true,
  configurable: true
});
var numberRegex = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
var unitRegex = new RegExp(`(${numberRegex.source})(%|[a-z]+)`, "i");
var rgbaRegex = /rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi;
var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
var variableToRgba = (input) => {
  const [token, fallback] = parseCSSVariable(input);
  if (!token || isSSR()) {
    return input;
  }
  const value = window.getComputedStyle(document.documentElement).getPropertyValue(token);
  if (value) {
    return value.trim();
  } else if (fallback && fallback.startsWith("--")) {
    const _value = window.getComputedStyle(document.documentElement).getPropertyValue(fallback);
    if (_value) {
      return _value;
    } else {
      return input;
    }
  } else if (fallback && cssVariableRegex.test(fallback)) {
    return variableToRgba(fallback);
  } else if (fallback) {
    return fallback;
  }
  return input;
};
var parseCSSVariable = (current) => {
  const match = cssVariableRegex.exec(current);
  if (!match)
    return [,];
  const [, token, fallback] = match;
  return [token, fallback];
};
var namedColorRegex;
var rgbaRound = (_, p1, p2, p3, p4) => `rgba(${Math.round(p1)}, ${Math.round(p2)}, ${Math.round(p3)}, ${p4})`;
var createStringInterpolator = (config3) => {
  if (!namedColorRegex)
    namedColorRegex = colors$1 ? new RegExp(`(${Object.keys(colors$1).join("|")})(?!\\w)`, "g") : /^\b$/;
  const output = config3.output.map((value) => {
    return getFluidValue(value).replace(cssVariableRegex, variableToRgba).replace(colorRegex, colorToRgba).replace(namedColorRegex, colorToRgba);
  });
  const keyframes = output.map((value) => value.match(numberRegex).map(Number));
  const outputRanges = keyframes[0].map((_, i) => keyframes.map((values) => {
    if (!(i in values)) {
      throw Error('The arity of each "output" value must be equal');
    }
    return values[i];
  }));
  const interpolators = outputRanges.map((output2) => createInterpolator(_extends({}, config3, {
    output: output2
  })));
  return (input) => {
    var _output$find;
    const missingUnit = !unitRegex.test(output[0]) && ((_output$find = output.find((value) => unitRegex.test(value))) == null ? void 0 : _output$find.replace(numberRegex, ""));
    let i = 0;
    return output[0].replace(numberRegex, () => `${interpolators[i++](input)}${missingUnit || ""}`).replace(rgbaRegex, rgbaRound);
  };
};
var prefix = "react-spring: ";
var once = (fn) => {
  const func = fn;
  let called = false;
  if (typeof func != "function") {
    throw new TypeError(`${prefix}once requires a function parameter`);
  }
  return (...args) => {
    if (!called) {
      func(...args);
      called = true;
    }
  };
};
var warnInterpolate = once(console.warn);
function deprecateInterpolate() {
  warnInterpolate(`${prefix}The "interpolate" function is deprecated in v9 (use "to" instead)`);
}
var warnDirectCall = once(console.warn);
function deprecateDirectCall() {
  warnDirectCall(`${prefix}Directly calling start instead of using the api object is deprecated in v9 (use ".start" instead), this will be removed in later 0.X.0 versions`);
}
function isAnimatedString(value) {
  return is.str(value) && (value[0] == "#" || /\d/.test(value) || !isSSR() && cssVariableRegex.test(value) || value in (colors$1 || {}));
}
var useIsomorphicLayoutEffect2 = isSSR() ? import_react83.useEffect : import_react83.useLayoutEffect;
var useIsMounted = () => {
  const isMounted = (0, import_react83.useRef)(false);
  useIsomorphicLayoutEffect2(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
};
function useForceUpdate() {
  const update3 = (0, import_react83.useState)()[1];
  const isMounted = useIsMounted();
  return () => {
    if (isMounted.current) {
      update3(Math.random());
    }
  };
}
function useMemoOne(getResult, inputs) {
  const [initial] = (0, import_react83.useState)(() => ({
    inputs,
    result: getResult()
  }));
  const committed = (0, import_react83.useRef)();
  const prevCache = committed.current;
  let cache = prevCache;
  if (cache) {
    const useCache = Boolean(inputs && cache.inputs && areInputsEqual(inputs, cache.inputs));
    if (!useCache) {
      cache = {
        inputs,
        result: getResult()
      };
    }
  } else {
    cache = initial;
  }
  (0, import_react83.useEffect)(() => {
    committed.current = cache;
    if (prevCache == initial) {
      initial.inputs = initial.result = void 0;
    }
  }, [cache]);
  return cache.result;
}
function areInputsEqual(next, prev) {
  if (next.length !== prev.length) {
    return false;
  }
  for (let i = 0; i < next.length; i++) {
    if (next[i] !== prev[i]) {
      return false;
    }
  }
  return true;
}
var useOnce = (effect) => (0, import_react83.useEffect)(effect, emptyDeps);
var emptyDeps = [];
function usePrev(value) {
  const prevRef = (0, import_react83.useRef)();
  (0, import_react83.useEffect)(() => {
    prevRef.current = value;
  });
  return prevRef.current;
}

// node_modules/@react-spring/core/dist/react-spring-core.esm.js
var React4 = __toESM(require_react());
var import_react85 = __toESM(require_react());

// node_modules/@react-spring/animated/dist/react-spring-animated.esm.js
var React3 = __toESM(require_react());
var import_react84 = __toESM(require_react());
var $node = Symbol.for("Animated:node");
var isAnimated = (value) => !!value && value[$node] === value;
var getAnimated = (owner) => owner && owner[$node];
var setAnimated = (owner, node) => defineHidden(owner, $node, node);
var getPayload = (owner) => owner && owner[$node] && owner[$node].getPayload();
var Animated = class {
  constructor() {
    this.payload = void 0;
    setAnimated(this, this);
  }
  getPayload() {
    return this.payload || [];
  }
};
var AnimatedValue = class extends Animated {
  constructor(_value) {
    super();
    this.done = true;
    this.elapsedTime = void 0;
    this.lastPosition = void 0;
    this.lastVelocity = void 0;
    this.v0 = void 0;
    this.durationProgress = 0;
    this._value = _value;
    if (is.num(this._value)) {
      this.lastPosition = this._value;
    }
  }
  static create(value) {
    return new AnimatedValue(value);
  }
  getPayload() {
    return [this];
  }
  getValue() {
    return this._value;
  }
  setValue(value, step) {
    if (is.num(value)) {
      this.lastPosition = value;
      if (step) {
        value = Math.round(value / step) * step;
        if (this.done) {
          this.lastPosition = value;
        }
      }
    }
    if (this._value === value) {
      return false;
    }
    this._value = value;
    return true;
  }
  reset() {
    const {
      done
    } = this;
    this.done = false;
    if (is.num(this._value)) {
      this.elapsedTime = 0;
      this.durationProgress = 0;
      this.lastPosition = this._value;
      if (done)
        this.lastVelocity = null;
      this.v0 = null;
    }
  }
};
var AnimatedString = class extends AnimatedValue {
  constructor(value) {
    super(0);
    this._string = null;
    this._toString = void 0;
    this._toString = createInterpolator({
      output: [value, value]
    });
  }
  static create(value) {
    return new AnimatedString(value);
  }
  getValue() {
    let value = this._string;
    return value == null ? this._string = this._toString(this._value) : value;
  }
  setValue(value) {
    if (is.str(value)) {
      if (value == this._string) {
        return false;
      }
      this._string = value;
      this._value = 1;
    } else if (super.setValue(value)) {
      this._string = null;
    } else {
      return false;
    }
    return true;
  }
  reset(goal) {
    if (goal) {
      this._toString = createInterpolator({
        output: [this.getValue(), goal]
      });
    }
    this._value = 0;
    super.reset();
  }
};
var TreeContext = {
  dependencies: null
};
var AnimatedObject = class extends Animated {
  constructor(source) {
    super();
    this.source = source;
    this.setValue(source);
  }
  getValue(animated2) {
    const values = {};
    eachProp(this.source, (source, key) => {
      if (isAnimated(source)) {
        values[key] = source.getValue(animated2);
      } else if (hasFluidValue(source)) {
        values[key] = getFluidValue(source);
      } else if (!animated2) {
        values[key] = source;
      }
    });
    return values;
  }
  setValue(source) {
    this.source = source;
    this.payload = this._makePayload(source);
  }
  reset() {
    if (this.payload) {
      each(this.payload, (node) => node.reset());
    }
  }
  _makePayload(source) {
    if (source) {
      const payload = /* @__PURE__ */ new Set();
      eachProp(source, this._addToPayload, payload);
      return Array.from(payload);
    }
  }
  _addToPayload(source) {
    if (TreeContext.dependencies && hasFluidValue(source)) {
      TreeContext.dependencies.add(source);
    }
    const payload = getPayload(source);
    if (payload) {
      each(payload, (node) => this.add(node));
    }
  }
};
var AnimatedArray = class extends AnimatedObject {
  constructor(source) {
    super(source);
  }
  static create(source) {
    return new AnimatedArray(source);
  }
  getValue() {
    return this.source.map((node) => node.getValue());
  }
  setValue(source) {
    const payload = this.getPayload();
    if (source.length == payload.length) {
      return payload.map((node, i) => node.setValue(source[i])).some(Boolean);
    }
    super.setValue(source.map(makeAnimated));
    return true;
  }
};
function makeAnimated(value) {
  const nodeType = isAnimatedString(value) ? AnimatedString : AnimatedValue;
  return nodeType.create(value);
}
function getAnimatedType(value) {
  const parentNode = getAnimated(value);
  return parentNode ? parentNode.constructor : is.arr(value) ? AnimatedArray : isAnimatedString(value) ? AnimatedString : AnimatedValue;
}
function _extends2() {
  _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
var withAnimated = (Component, host2) => {
  const hasInstance = !is.fun(Component) || Component.prototype && Component.prototype.isReactComponent;
  return (0, import_react84.forwardRef)((givenProps, givenRef) => {
    const instanceRef = (0, import_react84.useRef)(null);
    const ref = hasInstance && (0, import_react84.useCallback)((value) => {
      instanceRef.current = updateRef(givenRef, value);
    }, [givenRef]);
    const [props, deps] = getAnimatedState(givenProps, host2);
    const forceUpdate = useForceUpdate();
    const callback = () => {
      const instance = instanceRef.current;
      if (hasInstance && !instance) {
        return;
      }
      const didUpdate = instance ? host2.applyAnimatedValues(instance, props.getValue(true)) : false;
      if (didUpdate === false) {
        forceUpdate();
      }
    };
    const observer = new PropsObserver(callback, deps);
    const observerRef = (0, import_react84.useRef)();
    useIsomorphicLayoutEffect2(() => {
      observerRef.current = observer;
      each(deps, (dep) => addFluidObserver(dep, observer));
      return () => {
        if (observerRef.current) {
          each(observerRef.current.deps, (dep) => removeFluidObserver(dep, observerRef.current));
          raf.cancel(observerRef.current.update);
        }
      };
    });
    (0, import_react84.useEffect)(callback, []);
    useOnce(() => () => {
      const observer2 = observerRef.current;
      each(observer2.deps, (dep) => removeFluidObserver(dep, observer2));
    });
    const usedProps = host2.getComponentProps(props.getValue());
    return React3.createElement(Component, _extends2({}, usedProps, {
      ref
    }));
  });
};
var PropsObserver = class {
  constructor(update3, deps) {
    this.update = update3;
    this.deps = deps;
  }
  eventObserved(event) {
    if (event.type == "change") {
      raf.write(this.update);
    }
  }
};
function getAnimatedState(props, host2) {
  const dependencies = /* @__PURE__ */ new Set();
  TreeContext.dependencies = dependencies;
  if (props.style)
    props = _extends2({}, props, {
      style: host2.createAnimatedStyle(props.style)
    });
  props = new AnimatedObject(props);
  TreeContext.dependencies = null;
  return [props, dependencies];
}
function updateRef(ref, value) {
  if (ref) {
    if (is.fun(ref))
      ref(value);
    else
      ref.current = value;
  }
  return value;
}
var cacheKey = Symbol.for("AnimatedComponent");
var createHost = (components, {
  applyAnimatedValues: _applyAnimatedValues = () => false,
  createAnimatedStyle: _createAnimatedStyle = (style) => new AnimatedObject(style),
  getComponentProps: _getComponentProps = (props) => props
} = {}) => {
  const hostConfig = {
    applyAnimatedValues: _applyAnimatedValues,
    createAnimatedStyle: _createAnimatedStyle,
    getComponentProps: _getComponentProps
  };
  const animated2 = (Component) => {
    const displayName = getDisplayName(Component) || "Anonymous";
    if (is.str(Component)) {
      Component = animated2[Component] || (animated2[Component] = withAnimated(Component, hostConfig));
    } else {
      Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));
    }
    Component.displayName = `Animated(${displayName})`;
    return Component;
  };
  eachProp(components, (Component, key) => {
    if (is.arr(components)) {
      key = getDisplayName(Component);
    }
    animated2[key] = animated2(Component);
  });
  return {
    animated: animated2
  };
};
var getDisplayName = (arg) => is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) && arg.name || null;

// node_modules/@react-spring/core/dist/react-spring-core.esm.js
function _extends3() {
  _extends3 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
function callProp(value, ...args) {
  return is.fun(value) ? value(...args) : value;
}
var matchProp = (value, key) => value === true || !!(key && value && (is.fun(value) ? value(key) : toArray(value).includes(key)));
var resolveProp = (prop, key) => is.obj(prop) ? key && prop[key] : prop;
var getDefaultProp = (props, key) => props.default === true ? props[key] : props.default ? props.default[key] : void 0;
var noopTransform = (value) => value;
var getDefaultProps = (props, transform = noopTransform) => {
  let keys = DEFAULT_PROPS;
  if (props.default && props.default !== true) {
    props = props.default;
    keys = Object.keys(props);
  }
  const defaults2 = {};
  for (const key of keys) {
    const value = transform(props[key], key);
    if (!is.und(value)) {
      defaults2[key] = value;
    }
  }
  return defaults2;
};
var DEFAULT_PROPS = ["config", "onProps", "onStart", "onChange", "onPause", "onResume", "onRest"];
var RESERVED_PROPS = {
  config: 1,
  from: 1,
  to: 1,
  ref: 1,
  loop: 1,
  reset: 1,
  pause: 1,
  cancel: 1,
  reverse: 1,
  immediate: 1,
  default: 1,
  delay: 1,
  onProps: 1,
  onStart: 1,
  onChange: 1,
  onPause: 1,
  onResume: 1,
  onRest: 1,
  onResolve: 1,
  items: 1,
  trail: 1,
  sort: 1,
  expires: 1,
  initial: 1,
  enter: 1,
  update: 1,
  leave: 1,
  children: 1,
  onDestroyed: 1,
  keys: 1,
  callId: 1,
  parentId: 1
};
function getForwardProps(props) {
  const forward = {};
  let count = 0;
  eachProp(props, (value, prop) => {
    if (!RESERVED_PROPS[prop]) {
      forward[prop] = value;
      count++;
    }
  });
  if (count) {
    return forward;
  }
}
function inferTo(props) {
  const to3 = getForwardProps(props);
  if (to3) {
    const out = {
      to: to3
    };
    eachProp(props, (val, key) => key in to3 || (out[key] = val));
    return out;
  }
  return _extends3({}, props);
}
function computeGoal(value) {
  value = getFluidValue(value);
  return is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? globals.createStringInterpolator({
    range: [0, 1],
    output: [value, value]
  })(1) : value;
}
function hasProps(props) {
  for (const _ in props)
    return true;
  return false;
}
function isAsyncTo(to3) {
  return is.fun(to3) || is.arr(to3) && is.obj(to3[0]);
}
function detachRefs(ctrl, ref) {
  var _ctrl$ref;
  (_ctrl$ref = ctrl.ref) == null ? void 0 : _ctrl$ref.delete(ctrl);
  ref == null ? void 0 : ref.delete(ctrl);
}
function replaceRef(ctrl, ref) {
  if (ref && ctrl.ref !== ref) {
    var _ctrl$ref2;
    (_ctrl$ref2 = ctrl.ref) == null ? void 0 : _ctrl$ref2.delete(ctrl);
    ref.add(ctrl);
    ctrl.ref = ref;
  }
}
var config = {
  default: {
    tension: 170,
    friction: 26
  },
  gentle: {
    tension: 120,
    friction: 14
  },
  wobbly: {
    tension: 180,
    friction: 12
  },
  stiff: {
    tension: 210,
    friction: 20
  },
  slow: {
    tension: 280,
    friction: 60
  },
  molasses: {
    tension: 280,
    friction: 120
  }
};
var c1 = 1.70158;
var c2 = c1 * 1.525;
var c3 = c1 + 1;
var c4 = 2 * Math.PI / 3;
var c5 = 2 * Math.PI / 4.5;
var bounceOut = (x) => {
  const n1 = 7.5625;
  const d1 = 2.75;
  if (x < 1 / d1) {
    return n1 * x * x;
  } else if (x < 2 / d1) {
    return n1 * (x -= 1.5 / d1) * x + 0.75;
  } else if (x < 2.5 / d1) {
    return n1 * (x -= 2.25 / d1) * x + 0.9375;
  } else {
    return n1 * (x -= 2.625 / d1) * x + 0.984375;
  }
};
var easings = {
  linear: (x) => x,
  easeInQuad: (x) => x * x,
  easeOutQuad: (x) => 1 - (1 - x) * (1 - x),
  easeInOutQuad: (x) => x < 0.5 ? 2 * x * x : 1 - Math.pow(-2 * x + 2, 2) / 2,
  easeInCubic: (x) => x * x * x,
  easeOutCubic: (x) => 1 - Math.pow(1 - x, 3),
  easeInOutCubic: (x) => x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2,
  easeInQuart: (x) => x * x * x * x,
  easeOutQuart: (x) => 1 - Math.pow(1 - x, 4),
  easeInOutQuart: (x) => x < 0.5 ? 8 * x * x * x * x : 1 - Math.pow(-2 * x + 2, 4) / 2,
  easeInQuint: (x) => x * x * x * x * x,
  easeOutQuint: (x) => 1 - Math.pow(1 - x, 5),
  easeInOutQuint: (x) => x < 0.5 ? 16 * x * x * x * x * x : 1 - Math.pow(-2 * x + 2, 5) / 2,
  easeInSine: (x) => 1 - Math.cos(x * Math.PI / 2),
  easeOutSine: (x) => Math.sin(x * Math.PI / 2),
  easeInOutSine: (x) => -(Math.cos(Math.PI * x) - 1) / 2,
  easeInExpo: (x) => x === 0 ? 0 : Math.pow(2, 10 * x - 10),
  easeOutExpo: (x) => x === 1 ? 1 : 1 - Math.pow(2, -10 * x),
  easeInOutExpo: (x) => x === 0 ? 0 : x === 1 ? 1 : x < 0.5 ? Math.pow(2, 20 * x - 10) / 2 : (2 - Math.pow(2, -20 * x + 10)) / 2,
  easeInCirc: (x) => 1 - Math.sqrt(1 - Math.pow(x, 2)),
  easeOutCirc: (x) => Math.sqrt(1 - Math.pow(x - 1, 2)),
  easeInOutCirc: (x) => x < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * x, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * x + 2, 2)) + 1) / 2,
  easeInBack: (x) => c3 * x * x * x - c1 * x * x,
  easeOutBack: (x) => 1 + c3 * Math.pow(x - 1, 3) + c1 * Math.pow(x - 1, 2),
  easeInOutBack: (x) => x < 0.5 ? Math.pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2) / 2 : (Math.pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2,
  easeInElastic: (x) => x === 0 ? 0 : x === 1 ? 1 : -Math.pow(2, 10 * x - 10) * Math.sin((x * 10 - 10.75) * c4),
  easeOutElastic: (x) => x === 0 ? 0 : x === 1 ? 1 : Math.pow(2, -10 * x) * Math.sin((x * 10 - 0.75) * c4) + 1,
  easeInOutElastic: (x) => x === 0 ? 0 : x === 1 ? 1 : x < 0.5 ? -(Math.pow(2, 20 * x - 10) * Math.sin((20 * x - 11.125) * c5)) / 2 : Math.pow(2, -20 * x + 10) * Math.sin((20 * x - 11.125) * c5) / 2 + 1,
  easeInBounce: (x) => 1 - bounceOut(1 - x),
  easeOutBounce: bounceOut,
  easeInOutBounce: (x) => x < 0.5 ? (1 - bounceOut(1 - 2 * x)) / 2 : (1 + bounceOut(2 * x - 1)) / 2
};
var defaults = _extends3({}, config.default, {
  mass: 1,
  damping: 1,
  easing: easings.linear,
  clamp: false
});
var AnimationConfig = class {
  constructor() {
    this.tension = void 0;
    this.friction = void 0;
    this.frequency = void 0;
    this.damping = void 0;
    this.mass = void 0;
    this.velocity = 0;
    this.restVelocity = void 0;
    this.precision = void 0;
    this.progress = void 0;
    this.duration = void 0;
    this.easing = void 0;
    this.clamp = void 0;
    this.bounce = void 0;
    this.decay = void 0;
    this.round = void 0;
    Object.assign(this, defaults);
  }
};
function mergeConfig(config3, newConfig, defaultConfig) {
  if (defaultConfig) {
    defaultConfig = _extends3({}, defaultConfig);
    sanitizeConfig(defaultConfig, newConfig);
    newConfig = _extends3({}, defaultConfig, newConfig);
  }
  sanitizeConfig(config3, newConfig);
  Object.assign(config3, newConfig);
  for (const key in defaults) {
    if (config3[key] == null) {
      config3[key] = defaults[key];
    }
  }
  let {
    mass,
    frequency,
    damping
  } = config3;
  if (!is.und(frequency)) {
    if (frequency < 0.01)
      frequency = 0.01;
    if (damping < 0)
      damping = 0;
    config3.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;
    config3.friction = 4 * Math.PI * damping * mass / frequency;
  }
  return config3;
}
function sanitizeConfig(config3, props) {
  if (!is.und(props.decay)) {
    config3.duration = void 0;
  } else {
    const isTensionConfig = !is.und(props.tension) || !is.und(props.friction);
    if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {
      config3.duration = void 0;
      config3.decay = void 0;
    }
    if (isTensionConfig) {
      config3.frequency = void 0;
    }
  }
}
var emptyArray = [];
var Animation = class {
  constructor() {
    this.changed = false;
    this.values = emptyArray;
    this.toValues = null;
    this.fromValues = emptyArray;
    this.to = void 0;
    this.from = void 0;
    this.config = new AnimationConfig();
    this.immediate = false;
  }
};
function scheduleProps(callId, {
  key,
  props,
  defaultProps: defaultProps68,
  state,
  actions
}) {
  return new Promise((resolve, reject) => {
    var _props$cancel;
    let delay;
    let timeout;
    let cancel = matchProp((_props$cancel = props.cancel) != null ? _props$cancel : defaultProps68 == null ? void 0 : defaultProps68.cancel, key);
    if (cancel) {
      onStart();
    } else {
      if (!is.und(props.pause)) {
        state.paused = matchProp(props.pause, key);
      }
      let pause = defaultProps68 == null ? void 0 : defaultProps68.pause;
      if (pause !== true) {
        pause = state.paused || matchProp(pause, key);
      }
      delay = callProp(props.delay || 0, key);
      if (pause) {
        state.resumeQueue.add(onResume);
        actions.pause();
      } else {
        actions.resume();
        onResume();
      }
    }
    function onPause() {
      state.resumeQueue.add(onResume);
      state.timeouts.delete(timeout);
      timeout.cancel();
      delay = timeout.time - raf.now();
    }
    function onResume() {
      if (delay > 0 && !globals.skipAnimation) {
        state.delayed = true;
        timeout = raf.setTimeout(onStart, delay);
        state.pauseQueue.add(onPause);
        state.timeouts.add(timeout);
      } else {
        onStart();
      }
    }
    function onStart() {
      if (state.delayed) {
        state.delayed = false;
      }
      state.pauseQueue.delete(onPause);
      state.timeouts.delete(timeout);
      if (callId <= (state.cancelId || 0)) {
        cancel = true;
      }
      try {
        actions.start(_extends3({}, props, {
          callId,
          cancel
        }), resolve);
      } catch (err) {
        reject(err);
      }
    }
  });
}
var getCombinedResult = (target, results) => results.length == 1 ? results[0] : results.some((result) => result.cancelled) ? getCancelledResult(target.get()) : results.every((result) => result.noop) ? getNoopResult(target.get()) : getFinishedResult(target.get(), results.every((result) => result.finished));
var getNoopResult = (value) => ({
  value,
  noop: true,
  finished: true,
  cancelled: false
});
var getFinishedResult = (value, finished, cancelled = false) => ({
  value,
  finished,
  cancelled
});
var getCancelledResult = (value) => ({
  value,
  cancelled: true,
  finished: false
});
function runAsync(to3, props, state, target) {
  const {
    callId,
    parentId,
    onRest
  } = props;
  const {
    asyncTo: prevTo,
    promise: prevPromise
  } = state;
  if (!parentId && to3 === prevTo && !props.reset) {
    return prevPromise;
  }
  return state.promise = (async () => {
    state.asyncId = callId;
    state.asyncTo = to3;
    const defaultProps68 = getDefaultProps(props, (value, key) => key === "onRest" ? void 0 : value);
    let preventBail;
    let bail;
    const bailPromise = new Promise((resolve, reject) => (preventBail = resolve, bail = reject));
    const bailIfEnded = (bailSignal) => {
      const bailResult = callId <= (state.cancelId || 0) && getCancelledResult(target) || callId !== state.asyncId && getFinishedResult(target, false);
      if (bailResult) {
        bailSignal.result = bailResult;
        bail(bailSignal);
        throw bailSignal;
      }
    };
    const animate = (arg1, arg2) => {
      const bailSignal = new BailSignal();
      const skipAnimationSignal = new SkipAniamtionSignal();
      return (async () => {
        if (globals.skipAnimation) {
          stopAsync(state);
          skipAnimationSignal.result = getFinishedResult(target, false);
          bail(skipAnimationSignal);
          throw skipAnimationSignal;
        }
        bailIfEnded(bailSignal);
        const props2 = is.obj(arg1) ? _extends3({}, arg1) : _extends3({}, arg2, {
          to: arg1
        });
        props2.parentId = callId;
        eachProp(defaultProps68, (value, key) => {
          if (is.und(props2[key])) {
            props2[key] = value;
          }
        });
        const result2 = await target.start(props2);
        bailIfEnded(bailSignal);
        if (state.paused) {
          await new Promise((resume) => {
            state.resumeQueue.add(resume);
          });
        }
        return result2;
      })();
    };
    let result;
    if (globals.skipAnimation) {
      stopAsync(state);
      return getFinishedResult(target, false);
    }
    try {
      let animating;
      if (is.arr(to3)) {
        animating = (async (queue) => {
          for (const props2 of queue) {
            await animate(props2);
          }
        })(to3);
      } else {
        animating = Promise.resolve(to3(animate, target.stop.bind(target)));
      }
      await Promise.all([animating.then(preventBail), bailPromise]);
      result = getFinishedResult(target.get(), true, false);
    } catch (err) {
      if (err instanceof BailSignal) {
        result = err.result;
      } else if (err instanceof SkipAniamtionSignal) {
        result = err.result;
      } else {
        throw err;
      }
    } finally {
      if (callId == state.asyncId) {
        state.asyncId = parentId;
        state.asyncTo = parentId ? prevTo : void 0;
        state.promise = parentId ? prevPromise : void 0;
      }
    }
    if (is.fun(onRest)) {
      raf.batchedUpdates(() => {
        onRest(result, target, target.item);
      });
    }
    return result;
  })();
}
function stopAsync(state, cancelId) {
  flush(state.timeouts, (t) => t.cancel());
  state.pauseQueue.clear();
  state.resumeQueue.clear();
  state.asyncId = state.asyncTo = state.promise = void 0;
  if (cancelId)
    state.cancelId = cancelId;
}
var BailSignal = class extends Error {
  constructor() {
    super("An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.");
    this.result = void 0;
  }
};
var SkipAniamtionSignal = class extends Error {
  constructor() {
    super("SkipAnimationSignal");
    this.result = void 0;
  }
};
var isFrameValue = (value) => value instanceof FrameValue;
var nextId$1 = 1;
var FrameValue = class extends FluidValue {
  constructor(...args) {
    super(...args);
    this.id = nextId$1++;
    this.key = void 0;
    this._priority = 0;
  }
  get priority() {
    return this._priority;
  }
  set priority(priority2) {
    if (this._priority != priority2) {
      this._priority = priority2;
      this._onPriorityChange(priority2);
    }
  }
  get() {
    const node = getAnimated(this);
    return node && node.getValue();
  }
  to(...args) {
    return globals.to(this, args);
  }
  interpolate(...args) {
    deprecateInterpolate();
    return globals.to(this, args);
  }
  toJSON() {
    return this.get();
  }
  observerAdded(count) {
    if (count == 1)
      this._attach();
  }
  observerRemoved(count) {
    if (count == 0)
      this._detach();
  }
  _attach() {
  }
  _detach() {
  }
  _onChange(value, idle = false) {
    callFluidObservers(this, {
      type: "change",
      parent: this,
      value,
      idle
    });
  }
  _onPriorityChange(priority2) {
    if (!this.idle) {
      frameLoop.sort(this);
    }
    callFluidObservers(this, {
      type: "priority",
      parent: this,
      priority: priority2
    });
  }
};
var $P = Symbol.for("SpringPhase");
var HAS_ANIMATED = 1;
var IS_ANIMATING = 2;
var IS_PAUSED = 4;
var hasAnimated = (target) => (target[$P] & HAS_ANIMATED) > 0;
var isAnimating = (target) => (target[$P] & IS_ANIMATING) > 0;
var isPaused = (target) => (target[$P] & IS_PAUSED) > 0;
var setActiveBit = (target, active) => active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;
var setPausedBit = (target, paused) => paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;
var SpringValue = class extends FrameValue {
  constructor(arg1, arg2) {
    super();
    this.key = void 0;
    this.animation = new Animation();
    this.queue = void 0;
    this.defaultProps = {};
    this._state = {
      paused: false,
      delayed: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._pendingCalls = /* @__PURE__ */ new Set();
    this._lastCallId = 0;
    this._lastToId = 0;
    this._memoizedDuration = 0;
    if (!is.und(arg1) || !is.und(arg2)) {
      const props = is.obj(arg1) ? _extends3({}, arg1) : _extends3({}, arg2, {
        from: arg1
      });
      if (is.und(props.default)) {
        props.default = true;
      }
      this.start(props);
    }
  }
  get idle() {
    return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);
  }
  get goal() {
    return getFluidValue(this.animation.to);
  }
  get velocity() {
    const node = getAnimated(this);
    return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map((node2) => node2.lastVelocity || 0);
  }
  get hasAnimated() {
    return hasAnimated(this);
  }
  get isAnimating() {
    return isAnimating(this);
  }
  get isPaused() {
    return isPaused(this);
  }
  get isDelayed() {
    return this._state.delayed;
  }
  advance(dt) {
    let idle = true;
    let changed = false;
    const anim = this.animation;
    let {
      config: config3,
      toValues
    } = anim;
    const payload = getPayload(anim.to);
    if (!payload && hasFluidValue(anim.to)) {
      toValues = toArray(getFluidValue(anim.to));
    }
    anim.values.forEach((node2, i) => {
      if (node2.done)
        return;
      const to3 = node2.constructor == AnimatedString ? 1 : payload ? payload[i].lastPosition : toValues[i];
      let finished = anim.immediate;
      let position = to3;
      if (!finished) {
        position = node2.lastPosition;
        if (config3.tension <= 0) {
          node2.done = true;
          return;
        }
        let elapsed = node2.elapsedTime += dt;
        const from = anim.fromValues[i];
        const v0 = node2.v0 != null ? node2.v0 : node2.v0 = is.arr(config3.velocity) ? config3.velocity[i] : config3.velocity;
        let velocity;
        const precision = config3.precision || (from == to3 ? 5e-3 : Math.min(1, Math.abs(to3 - from) * 1e-3));
        if (!is.und(config3.duration)) {
          let p = 1;
          if (config3.duration > 0) {
            if (this._memoizedDuration !== config3.duration) {
              this._memoizedDuration = config3.duration;
              if (node2.durationProgress > 0) {
                node2.elapsedTime = config3.duration * node2.durationProgress;
                elapsed = node2.elapsedTime += dt;
              }
            }
            p = (config3.progress || 0) + elapsed / this._memoizedDuration;
            p = p > 1 ? 1 : p < 0 ? 0 : p;
            node2.durationProgress = p;
          }
          position = from + config3.easing(p) * (to3 - from);
          velocity = (position - node2.lastPosition) / dt;
          finished = p == 1;
        } else if (config3.decay) {
          const decay = config3.decay === true ? 0.998 : config3.decay;
          const e = Math.exp(-(1 - decay) * elapsed);
          position = from + v0 / (1 - decay) * (1 - e);
          finished = Math.abs(node2.lastPosition - position) <= precision;
          velocity = v0 * e;
        } else {
          velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;
          const restVelocity = config3.restVelocity || precision / 10;
          const bounceFactor = config3.clamp ? 0 : config3.bounce;
          const canBounce = !is.und(bounceFactor);
          const isGrowing = from == to3 ? node2.v0 > 0 : from < to3;
          let isMoving;
          let isBouncing = false;
          const step = 1;
          const numSteps = Math.ceil(dt / step);
          for (let n = 0; n < numSteps; ++n) {
            isMoving = Math.abs(velocity) > restVelocity;
            if (!isMoving) {
              finished = Math.abs(to3 - position) <= precision;
              if (finished) {
                break;
              }
            }
            if (canBounce) {
              isBouncing = position == to3 || position > to3 == isGrowing;
              if (isBouncing) {
                velocity = -velocity * bounceFactor;
                position = to3;
              }
            }
            const springForce = -config3.tension * 1e-6 * (position - to3);
            const dampingForce = -config3.friction * 1e-3 * velocity;
            const acceleration = (springForce + dampingForce) / config3.mass;
            velocity = velocity + acceleration * step;
            position = position + velocity * step;
          }
        }
        node2.lastVelocity = velocity;
        if (Number.isNaN(position)) {
          console.warn(`Got NaN while animating:`, this);
          finished = true;
        }
      }
      if (payload && !payload[i].done) {
        finished = false;
      }
      if (finished) {
        node2.done = true;
      } else {
        idle = false;
      }
      if (node2.setValue(position, config3.round)) {
        changed = true;
      }
    });
    const node = getAnimated(this);
    const currVal = node.getValue();
    if (idle) {
      const finalVal = getFluidValue(anim.to);
      if ((currVal !== finalVal || changed) && !config3.decay) {
        node.setValue(finalVal);
        this._onChange(finalVal);
      } else if (changed && config3.decay) {
        this._onChange(currVal);
      }
      this._stop();
    } else if (changed) {
      this._onChange(currVal);
    }
  }
  set(value) {
    raf.batchedUpdates(() => {
      this._stop();
      this._focus(value);
      this._set(value);
    });
    return this;
  }
  pause() {
    this._update({
      pause: true
    });
  }
  resume() {
    this._update({
      pause: false
    });
  }
  finish() {
    if (isAnimating(this)) {
      const {
        to: to3,
        config: config3
      } = this.animation;
      raf.batchedUpdates(() => {
        this._onStart();
        if (!config3.decay) {
          this._set(to3, false);
        }
        this._stop();
      });
    }
    return this;
  }
  update(props) {
    const queue = this.queue || (this.queue = []);
    queue.push(props);
    return this;
  }
  start(to3, arg2) {
    let queue;
    if (!is.und(to3)) {
      queue = [is.obj(to3) ? to3 : _extends3({}, arg2, {
        to: to3
      })];
    } else {
      queue = this.queue || [];
      this.queue = [];
    }
    return Promise.all(queue.map((props) => {
      const up = this._update(props);
      return up;
    })).then((results) => getCombinedResult(this, results));
  }
  stop(cancel) {
    const {
      to: to3
    } = this.animation;
    this._focus(this.get());
    stopAsync(this._state, cancel && this._lastCallId);
    raf.batchedUpdates(() => this._stop(to3, cancel));
    return this;
  }
  reset() {
    this._update({
      reset: true
    });
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._start();
    } else if (event.type == "priority") {
      this.priority = event.priority + 1;
    }
  }
  _prepareNode(props) {
    const key = this.key || "";
    let {
      to: to3,
      from
    } = props;
    to3 = is.obj(to3) ? to3[key] : to3;
    if (to3 == null || isAsyncTo(to3)) {
      to3 = void 0;
    }
    from = is.obj(from) ? from[key] : from;
    if (from == null) {
      from = void 0;
    }
    const range = {
      to: to3,
      from
    };
    if (!hasAnimated(this)) {
      if (props.reverse)
        [to3, from] = [from, to3];
      from = getFluidValue(from);
      if (!is.und(from)) {
        this._set(from);
      } else if (!getAnimated(this)) {
        this._set(to3);
      }
    }
    return range;
  }
  _update(_ref, isLoop) {
    let props = _extends3({}, _ref);
    const {
      key,
      defaultProps: defaultProps68
    } = this;
    if (props.default)
      Object.assign(defaultProps68, getDefaultProps(props, (value, prop) => /^on/.test(prop) ? resolveProp(value, key) : value));
    mergeActiveFn(this, props, "onProps");
    sendEvent(this, "onProps", props, this);
    const range = this._prepareNode(props);
    if (Object.isFrozen(this)) {
      throw Error("Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?");
    }
    const state = this._state;
    return scheduleProps(++this._lastCallId, {
      key,
      props,
      defaultProps: defaultProps68,
      state,
      actions: {
        pause: () => {
          if (!isPaused(this)) {
            setPausedBit(this, true);
            flushCalls(state.pauseQueue);
            sendEvent(this, "onPause", getFinishedResult(this, checkFinished(this, this.animation.to)), this);
          }
        },
        resume: () => {
          if (isPaused(this)) {
            setPausedBit(this, false);
            if (isAnimating(this)) {
              this._resume();
            }
            flushCalls(state.resumeQueue);
            sendEvent(this, "onResume", getFinishedResult(this, checkFinished(this, this.animation.to)), this);
          }
        },
        start: this._merge.bind(this, range)
      }
    }).then((result) => {
      if (props.loop && result.finished && !(isLoop && result.noop)) {
        const nextProps = createLoopUpdate(props);
        if (nextProps) {
          return this._update(nextProps, true);
        }
      }
      return result;
    });
  }
  _merge(range, props, resolve) {
    if (props.cancel) {
      this.stop(true);
      return resolve(getCancelledResult(this));
    }
    const hasToProp = !is.und(range.to);
    const hasFromProp = !is.und(range.from);
    if (hasToProp || hasFromProp) {
      if (props.callId > this._lastToId) {
        this._lastToId = props.callId;
      } else {
        return resolve(getCancelledResult(this));
      }
    }
    const {
      key,
      defaultProps: defaultProps68,
      animation: anim
    } = this;
    const {
      to: prevTo,
      from: prevFrom
    } = anim;
    let {
      to: to3 = prevTo,
      from = prevFrom
    } = range;
    if (hasFromProp && !hasToProp && (!props.default || is.und(to3))) {
      to3 = from;
    }
    if (props.reverse)
      [to3, from] = [from, to3];
    const hasFromChanged = !isEqual3(from, prevFrom);
    if (hasFromChanged) {
      anim.from = from;
    }
    from = getFluidValue(from);
    const hasToChanged = !isEqual3(to3, prevTo);
    if (hasToChanged) {
      this._focus(to3);
    }
    const hasAsyncTo = isAsyncTo(props.to);
    const {
      config: config3
    } = anim;
    const {
      decay,
      velocity
    } = config3;
    if (hasToProp || hasFromProp) {
      config3.velocity = 0;
    }
    if (props.config && !hasAsyncTo) {
      mergeConfig(config3, callProp(props.config, key), props.config !== defaultProps68.config ? callProp(defaultProps68.config, key) : void 0);
    }
    let node = getAnimated(this);
    if (!node || is.und(to3)) {
      return resolve(getFinishedResult(this, true));
    }
    const reset = is.und(props.reset) ? hasFromProp && !props.default : !is.und(from) && matchProp(props.reset, key);
    const value = reset ? from : this.get();
    const goal = computeGoal(to3);
    const isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal);
    const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps68.immediate || props.immediate, key));
    if (hasToChanged) {
      const nodeType = getAnimatedType(to3);
      if (nodeType !== node.constructor) {
        if (immediate) {
          node = this._set(goal);
        } else
          throw Error(`Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the "to" prop suggests`);
      }
    }
    const goalType = node.constructor;
    let started = hasFluidValue(to3);
    let finished = false;
    if (!started) {
      const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;
      if (hasToChanged || hasValueChanged) {
        finished = isEqual3(computeGoal(value), goal);
        started = !finished;
      }
      if (!isEqual3(anim.immediate, immediate) && !immediate || !isEqual3(config3.decay, decay) || !isEqual3(config3.velocity, velocity)) {
        started = true;
      }
    }
    if (finished && isAnimating(this)) {
      if (anim.changed && !reset) {
        started = true;
      } else if (!started) {
        this._stop(prevTo);
      }
    }
    if (!hasAsyncTo) {
      if (started || hasFluidValue(prevTo)) {
        anim.values = node.getPayload();
        anim.toValues = hasFluidValue(to3) ? null : goalType == AnimatedString ? [1] : toArray(goal);
      }
      if (anim.immediate != immediate) {
        anim.immediate = immediate;
        if (!immediate && !reset) {
          this._set(prevTo);
        }
      }
      if (started) {
        const {
          onRest
        } = anim;
        each(ACTIVE_EVENTS, (type) => mergeActiveFn(this, props, type));
        const result = getFinishedResult(this, checkFinished(this, prevTo));
        flushCalls(this._pendingCalls, result);
        this._pendingCalls.add(resolve);
        if (anim.changed)
          raf.batchedUpdates(() => {
            anim.changed = !reset;
            onRest == null ? void 0 : onRest(result, this);
            if (reset) {
              callProp(defaultProps68.onRest, result);
            } else {
              anim.onStart == null ? void 0 : anim.onStart(result, this);
            }
          });
      }
    }
    if (reset) {
      this._set(value);
    }
    if (hasAsyncTo) {
      resolve(runAsync(props.to, props, this._state, this));
    } else if (started) {
      this._start();
    } else if (isAnimating(this) && !hasToChanged) {
      this._pendingCalls.add(resolve);
    } else {
      resolve(getNoopResult(value));
    }
  }
  _focus(value) {
    const anim = this.animation;
    if (value !== anim.to) {
      if (getFluidObservers(this)) {
        this._detach();
      }
      anim.to = value;
      if (getFluidObservers(this)) {
        this._attach();
      }
    }
  }
  _attach() {
    let priority2 = 0;
    const {
      to: to3
    } = this.animation;
    if (hasFluidValue(to3)) {
      addFluidObserver(to3, this);
      if (isFrameValue(to3)) {
        priority2 = to3.priority + 1;
      }
    }
    this.priority = priority2;
  }
  _detach() {
    const {
      to: to3
    } = this.animation;
    if (hasFluidValue(to3)) {
      removeFluidObserver(to3, this);
    }
  }
  _set(arg, idle = true) {
    const value = getFluidValue(arg);
    if (!is.und(value)) {
      const oldNode = getAnimated(this);
      if (!oldNode || !isEqual3(value, oldNode.getValue())) {
        const nodeType = getAnimatedType(value);
        if (!oldNode || oldNode.constructor != nodeType) {
          setAnimated(this, nodeType.create(value));
        } else {
          oldNode.setValue(value);
        }
        if (oldNode) {
          raf.batchedUpdates(() => {
            this._onChange(value, idle);
          });
        }
      }
    }
    return getAnimated(this);
  }
  _onStart() {
    const anim = this.animation;
    if (!anim.changed) {
      anim.changed = true;
      sendEvent(this, "onStart", getFinishedResult(this, checkFinished(this, anim.to)), this);
    }
  }
  _onChange(value, idle) {
    if (!idle) {
      this._onStart();
      callProp(this.animation.onChange, value, this);
    }
    callProp(this.defaultProps.onChange, value, this);
    super._onChange(value, idle);
  }
  _start() {
    const anim = this.animation;
    getAnimated(this).reset(getFluidValue(anim.to));
    if (!anim.immediate) {
      anim.fromValues = anim.values.map((node) => node.lastPosition);
    }
    if (!isAnimating(this)) {
      setActiveBit(this, true);
      if (!isPaused(this)) {
        this._resume();
      }
    }
  }
  _resume() {
    if (globals.skipAnimation) {
      this.finish();
    } else {
      frameLoop.start(this);
    }
  }
  _stop(goal, cancel) {
    if (isAnimating(this)) {
      setActiveBit(this, false);
      const anim = this.animation;
      each(anim.values, (node) => {
        node.done = true;
      });
      if (anim.toValues) {
        anim.onChange = anim.onPause = anim.onResume = void 0;
      }
      callFluidObservers(this, {
        type: "idle",
        parent: this
      });
      const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal != null ? goal : anim.to));
      flushCalls(this._pendingCalls, result);
      if (anim.changed) {
        anim.changed = false;
        sendEvent(this, "onRest", result, this);
      }
    }
  }
};
function checkFinished(target, to3) {
  const goal = computeGoal(to3);
  const value = computeGoal(target.get());
  return isEqual3(value, goal);
}
function createLoopUpdate(props, loop2 = props.loop, to3 = props.to) {
  let loopRet = callProp(loop2);
  if (loopRet) {
    const overrides = loopRet !== true && inferTo(loopRet);
    const reverse = (overrides || props).reverse;
    const reset = !overrides || overrides.reset;
    return createUpdate(_extends3({}, props, {
      loop: loop2,
      default: false,
      pause: void 0,
      to: !reverse || isAsyncTo(to3) ? to3 : void 0,
      from: reset ? props.from : void 0,
      reset
    }, overrides));
  }
}
function createUpdate(props) {
  const {
    to: to3,
    from
  } = props = inferTo(props);
  const keys = /* @__PURE__ */ new Set();
  if (is.obj(to3))
    findDefined(to3, keys);
  if (is.obj(from))
    findDefined(from, keys);
  props.keys = keys.size ? Array.from(keys) : null;
  return props;
}
function declareUpdate(props) {
  const update3 = createUpdate(props);
  if (is.und(update3.default)) {
    update3.default = getDefaultProps(update3);
  }
  return update3;
}
function findDefined(values, keys) {
  eachProp(values, (value, key) => value != null && keys.add(key));
}
var ACTIVE_EVENTS = ["onStart", "onRest", "onChange", "onPause", "onResume"];
function mergeActiveFn(target, props, type) {
  target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;
}
function sendEvent(target, type, ...args) {
  var _target$animation$typ, _target$animation, _target$defaultProps$, _target$defaultProps;
  (_target$animation$typ = (_target$animation = target.animation)[type]) == null ? void 0 : _target$animation$typ.call(_target$animation, ...args);
  (_target$defaultProps$ = (_target$defaultProps = target.defaultProps)[type]) == null ? void 0 : _target$defaultProps$.call(_target$defaultProps, ...args);
}
var BATCHED_EVENTS = ["onStart", "onChange", "onRest"];
var nextId = 1;
var Controller = class {
  constructor(props, flush2) {
    this.id = nextId++;
    this.springs = {};
    this.queue = [];
    this.ref = void 0;
    this._flush = void 0;
    this._initialProps = void 0;
    this._lastAsyncId = 0;
    this._active = /* @__PURE__ */ new Set();
    this._changed = /* @__PURE__ */ new Set();
    this._started = false;
    this._item = void 0;
    this._state = {
      paused: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._events = {
      onStart: /* @__PURE__ */ new Map(),
      onChange: /* @__PURE__ */ new Map(),
      onRest: /* @__PURE__ */ new Map()
    };
    this._onFrame = this._onFrame.bind(this);
    if (flush2) {
      this._flush = flush2;
    }
    if (props) {
      this.start(_extends3({
        default: true
      }, props));
    }
  }
  get idle() {
    return !this._state.asyncTo && Object.values(this.springs).every((spring) => {
      return spring.idle && !spring.isDelayed && !spring.isPaused;
    });
  }
  get item() {
    return this._item;
  }
  set item(item) {
    this._item = item;
  }
  get() {
    const values = {};
    this.each((spring, key) => values[key] = spring.get());
    return values;
  }
  set(values) {
    for (const key in values) {
      const value = values[key];
      if (!is.und(value)) {
        this.springs[key].set(value);
      }
    }
  }
  update(props) {
    if (props) {
      this.queue.push(createUpdate(props));
    }
    return this;
  }
  start(props) {
    let {
      queue
    } = this;
    if (props) {
      queue = toArray(props).map(createUpdate);
    } else {
      this.queue = [];
    }
    if (this._flush) {
      return this._flush(this, queue);
    }
    prepareKeys(this, queue);
    return flushUpdateQueue(this, queue);
  }
  stop(arg, keys) {
    if (arg !== !!arg) {
      keys = arg;
    }
    if (keys) {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].stop(!!arg));
    } else {
      stopAsync(this._state, this._lastAsyncId);
      this.each((spring) => spring.stop(!!arg));
    }
    return this;
  }
  pause(keys) {
    if (is.und(keys)) {
      this.start({
        pause: true
      });
    } else {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].pause());
    }
    return this;
  }
  resume(keys) {
    if (is.und(keys)) {
      this.start({
        pause: false
      });
    } else {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].resume());
    }
    return this;
  }
  each(iterator) {
    eachProp(this.springs, iterator);
  }
  _onFrame() {
    const {
      onStart,
      onChange,
      onRest
    } = this._events;
    const active = this._active.size > 0;
    const changed = this._changed.size > 0;
    if (active && !this._started || changed && !this._started) {
      this._started = true;
      flush(onStart, ([onStart2, result]) => {
        result.value = this.get();
        onStart2(result, this, this._item);
      });
    }
    const idle = !active && this._started;
    const values = changed || idle && onRest.size ? this.get() : null;
    if (changed && onChange.size) {
      flush(onChange, ([onChange2, result]) => {
        result.value = values;
        onChange2(result, this, this._item);
      });
    }
    if (idle) {
      this._started = false;
      flush(onRest, ([onRest2, result]) => {
        result.value = values;
        onRest2(result, this, this._item);
      });
    }
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._changed.add(event.parent);
      if (!event.idle) {
        this._active.add(event.parent);
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else
      return;
    raf.onFrame(this._onFrame);
  }
};
function flushUpdateQueue(ctrl, queue) {
  return Promise.all(queue.map((props) => flushUpdate(ctrl, props))).then((results) => getCombinedResult(ctrl, results));
}
async function flushUpdate(ctrl, props, isLoop) {
  const {
    keys,
    to: to3,
    from,
    loop: loop2,
    onRest,
    onResolve
  } = props;
  const defaults2 = is.obj(props.default) && props.default;
  if (loop2) {
    props.loop = false;
  }
  if (to3 === false)
    props.to = null;
  if (from === false)
    props.from = null;
  const asyncTo = is.arr(to3) || is.fun(to3) ? to3 : void 0;
  if (asyncTo) {
    props.to = void 0;
    props.onRest = void 0;
    if (defaults2) {
      defaults2.onRest = void 0;
    }
  } else {
    each(BATCHED_EVENTS, (key) => {
      const handler = props[key];
      if (is.fun(handler)) {
        const queue = ctrl["_events"][key];
        props[key] = ({
          finished,
          cancelled
        }) => {
          const result2 = queue.get(handler);
          if (result2) {
            if (!finished)
              result2.finished = false;
            if (cancelled)
              result2.cancelled = true;
          } else {
            queue.set(handler, {
              value: null,
              finished: finished || false,
              cancelled: cancelled || false
            });
          }
        };
        if (defaults2) {
          defaults2[key] = props[key];
        }
      }
    });
  }
  const state = ctrl["_state"];
  if (props.pause === !state.paused) {
    state.paused = props.pause;
    flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);
  } else if (state.paused) {
    props.pause = true;
  }
  const promises = (keys || Object.keys(ctrl.springs)).map((key) => ctrl.springs[key].start(props));
  const cancel = props.cancel === true || getDefaultProp(props, "cancel") === true;
  if (asyncTo || cancel && state.asyncId) {
    promises.push(scheduleProps(++ctrl["_lastAsyncId"], {
      props,
      state,
      actions: {
        pause: noop,
        resume: noop,
        start(props2, resolve) {
          if (cancel) {
            stopAsync(state, ctrl["_lastAsyncId"]);
            resolve(getCancelledResult(ctrl));
          } else {
            props2.onRest = onRest;
            resolve(runAsync(asyncTo, props2, state, ctrl));
          }
        }
      }
    }));
  }
  if (state.paused) {
    await new Promise((resume) => {
      state.resumeQueue.add(resume);
    });
  }
  const result = getCombinedResult(ctrl, await Promise.all(promises));
  if (loop2 && result.finished && !(isLoop && result.noop)) {
    const nextProps = createLoopUpdate(props, loop2, to3);
    if (nextProps) {
      prepareKeys(ctrl, [nextProps]);
      return flushUpdate(ctrl, nextProps, true);
    }
  }
  if (onResolve) {
    raf.batchedUpdates(() => onResolve(result, ctrl, ctrl.item));
  }
  return result;
}
function getSprings(ctrl, props) {
  const springs = _extends3({}, ctrl.springs);
  if (props) {
    each(toArray(props), (props2) => {
      if (is.und(props2.keys)) {
        props2 = createUpdate(props2);
      }
      if (!is.obj(props2.to)) {
        props2 = _extends3({}, props2, {
          to: void 0
        });
      }
      prepareSprings(springs, props2, (key) => {
        return createSpring(key);
      });
    });
  }
  setSprings(ctrl, springs);
  return springs;
}
function setSprings(ctrl, springs) {
  eachProp(springs, (spring, key) => {
    if (!ctrl.springs[key]) {
      ctrl.springs[key] = spring;
      addFluidObserver(spring, ctrl);
    }
  });
}
function createSpring(key, observer) {
  const spring = new SpringValue();
  spring.key = key;
  if (observer) {
    addFluidObserver(spring, observer);
  }
  return spring;
}
function prepareSprings(springs, props, create2) {
  if (props.keys) {
    each(props.keys, (key) => {
      const spring = springs[key] || (springs[key] = create2(key));
      spring["_prepareNode"](props);
    });
  }
}
function prepareKeys(ctrl, queue) {
  each(queue, (props) => {
    prepareSprings(ctrl.springs, props, (key) => {
      return createSpring(key, ctrl);
    });
  });
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$3 = ["children"];
var SpringContext = (_ref) => {
  let {
    children
  } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded$3);
  const inherited = (0, import_react85.useContext)(ctx);
  const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;
  props = useMemoOne(() => ({
    pause,
    immediate
  }), [pause, immediate]);
  const {
    Provider
  } = ctx;
  return React4.createElement(Provider, {
    value: props
  }, children);
};
var ctx = makeContext(SpringContext, {});
SpringContext.Provider = ctx.Provider;
SpringContext.Consumer = ctx.Consumer;
function makeContext(target, init) {
  Object.assign(target, React4.createContext(init));
  target.Provider._context = target;
  target.Consumer._context = target;
  return target;
}
var SpringRef = () => {
  const current = [];
  const SpringRef2 = function SpringRef3(props) {
    deprecateDirectCall();
    const results = [];
    each(current, (ctrl, i) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update3 = _getProps(props, ctrl, i);
        if (update3) {
          results.push(ctrl.start(update3));
        }
      }
    });
    return results;
  };
  SpringRef2.current = current;
  SpringRef2.add = function(ctrl) {
    if (!current.includes(ctrl)) {
      current.push(ctrl);
    }
  };
  SpringRef2.delete = function(ctrl) {
    const i = current.indexOf(ctrl);
    if (~i)
      current.splice(i, 1);
  };
  SpringRef2.pause = function() {
    each(current, (ctrl) => ctrl.pause(...arguments));
    return this;
  };
  SpringRef2.resume = function() {
    each(current, (ctrl) => ctrl.resume(...arguments));
    return this;
  };
  SpringRef2.set = function(values) {
    each(current, (ctrl) => ctrl.set(values));
  };
  SpringRef2.start = function(props) {
    const results = [];
    each(current, (ctrl, i) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update3 = this._getProps(props, ctrl, i);
        if (update3) {
          results.push(ctrl.start(update3));
        }
      }
    });
    return results;
  };
  SpringRef2.stop = function() {
    each(current, (ctrl) => ctrl.stop(...arguments));
    return this;
  };
  SpringRef2.update = function(props) {
    each(current, (ctrl, i) => ctrl.update(this._getProps(props, ctrl, i)));
    return this;
  };
  const _getProps = function _getProps2(arg, ctrl, index) {
    return is.fun(arg) ? arg(index, ctrl) : arg;
  };
  SpringRef2._getProps = _getProps;
  return SpringRef2;
};
function useSprings(length, props, deps) {
  const propsFn = is.fun(props) && props;
  if (propsFn && !deps)
    deps = [];
  const ref = (0, import_react85.useMemo)(() => propsFn || arguments.length == 3 ? SpringRef() : void 0, []);
  const layoutId = (0, import_react85.useRef)(0);
  const forceUpdate = useForceUpdate();
  const state = (0, import_react85.useMemo)(() => ({
    ctrls: [],
    queue: [],
    flush(ctrl, updates2) {
      const springs2 = getSprings(ctrl, updates2);
      const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key) => !ctrl.springs[key]);
      return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise((resolve) => {
        setSprings(ctrl, springs2);
        state.queue.push(() => {
          resolve(flushUpdateQueue(ctrl, updates2));
        });
        forceUpdate();
      });
    }
  }), []);
  const ctrls = (0, import_react85.useRef)([...state.ctrls]);
  const updates = [];
  const prevLength = usePrev(length) || 0;
  (0, import_react85.useMemo)(() => {
    each(ctrls.current.slice(length, prevLength), (ctrl) => {
      detachRefs(ctrl, ref);
      ctrl.stop(true);
    });
    ctrls.current.length = length;
    declareUpdates(prevLength, length);
  }, [length]);
  (0, import_react85.useMemo)(() => {
    declareUpdates(0, Math.min(prevLength, length));
  }, deps);
  function declareUpdates(startIndex, endIndex) {
    for (let i = startIndex; i < endIndex; i++) {
      const ctrl = ctrls.current[i] || (ctrls.current[i] = new Controller(null, state.flush));
      const update3 = propsFn ? propsFn(i, ctrl) : props[i];
      if (update3) {
        updates[i] = declareUpdate(update3);
      }
    }
  }
  const springs = ctrls.current.map((ctrl, i) => getSprings(ctrl, updates[i]));
  const context = (0, import_react85.useContext)(SpringContext);
  const prevContext = usePrev(context);
  const hasContext = context !== prevContext && hasProps(context);
  useIsomorphicLayoutEffect2(() => {
    layoutId.current++;
    state.ctrls = ctrls.current;
    const {
      queue
    } = state;
    if (queue.length) {
      state.queue = [];
      each(queue, (cb) => cb());
    }
    each(ctrls.current, (ctrl, i) => {
      ref == null ? void 0 : ref.add(ctrl);
      if (hasContext) {
        ctrl.start({
          default: context
        });
      }
      const update3 = updates[i];
      if (update3) {
        replaceRef(ctrl, update3.ref);
        if (ctrl.ref) {
          ctrl.queue.push(update3);
        } else {
          ctrl.start(update3);
        }
      }
    });
  });
  useOnce(() => () => {
    each(state.ctrls, (ctrl) => ctrl.stop(true));
  });
  const values = springs.map((x) => _extends3({}, x));
  return ref ? [values, ref] : values;
}
function useSpring(props, deps) {
  const isFn = is.fun(props);
  const [[values], ref] = useSprings(1, isFn ? props : [props], isFn ? deps || [] : deps);
  return isFn || arguments.length == 2 ? [values, ref] : values;
}
var TransitionPhase;
(function(TransitionPhase2) {
  TransitionPhase2["MOUNT"] = "mount";
  TransitionPhase2["ENTER"] = "enter";
  TransitionPhase2["UPDATE"] = "update";
  TransitionPhase2["LEAVE"] = "leave";
})(TransitionPhase || (TransitionPhase = {}));
var Interpolation = class extends FrameValue {
  constructor(source, args) {
    super();
    this.key = void 0;
    this.idle = true;
    this.calc = void 0;
    this._active = /* @__PURE__ */ new Set();
    this.source = source;
    this.calc = createInterpolator(...args);
    const value = this._get();
    const nodeType = getAnimatedType(value);
    setAnimated(this, nodeType.create(value));
  }
  advance(_dt) {
    const value = this._get();
    const oldValue = this.get();
    if (!isEqual3(value, oldValue)) {
      getAnimated(this).setValue(value);
      this._onChange(value, this.idle);
    }
    if (!this.idle && checkIdle(this._active)) {
      becomeIdle(this);
    }
  }
  _get() {
    const inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray(getFluidValue(this.source));
    return this.calc(...inputs);
  }
  _start() {
    if (this.idle && !checkIdle(this._active)) {
      this.idle = false;
      each(getPayload(this), (node) => {
        node.done = false;
      });
      if (globals.skipAnimation) {
        raf.batchedUpdates(() => this.advance());
        becomeIdle(this);
      } else {
        frameLoop.start(this);
      }
    }
  }
  _attach() {
    let priority2 = 1;
    each(toArray(this.source), (source) => {
      if (hasFluidValue(source)) {
        addFluidObserver(source, this);
      }
      if (isFrameValue(source)) {
        if (!source.idle) {
          this._active.add(source);
        }
        priority2 = Math.max(priority2, source.priority + 1);
      }
    });
    this.priority = priority2;
    this._start();
  }
  _detach() {
    each(toArray(this.source), (source) => {
      if (hasFluidValue(source)) {
        removeFluidObserver(source, this);
      }
    });
    this._active.clear();
    becomeIdle(this);
  }
  eventObserved(event) {
    if (event.type == "change") {
      if (event.idle) {
        this.advance();
      } else {
        this._active.add(event.parent);
        this._start();
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else if (event.type == "priority") {
      this.priority = toArray(this.source).reduce((highest, parent) => Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1), 0);
    }
  }
};
function isIdle(source) {
  return source.idle !== false;
}
function checkIdle(active) {
  return !active.size || Array.from(active).every(isIdle);
}
function becomeIdle(self2) {
  if (!self2.idle) {
    self2.idle = true;
    each(getPayload(self2), (node) => {
      node.done = true;
    });
    callFluidObservers(self2, {
      type: "idle",
      parent: self2
    });
  }
}
var to2 = (source, ...args) => new Interpolation(source, args);
globals.assign({
  createStringInterpolator,
  to: (source, args) => new Interpolation(source, args)
});
var update2 = frameLoop.advance;

// node_modules/@react-spring/web/dist/react-spring-web.esm.js
var import_react_dom = __toESM(require_react_dom());
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$2 = ["style", "children", "scrollTop", "scrollLeft"];
var isCustomPropRE = /^--/;
function dangerousStyleValue(name, value) {
  if (value == null || typeof value === "boolean" || value === "")
    return "";
  if (typeof value === "number" && value !== 0 && !isCustomPropRE.test(name) && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]))
    return value + "px";
  return ("" + value).trim();
}
var attributeCache = {};
function applyAnimatedValues(instance, props) {
  if (!instance.nodeType || !instance.setAttribute) {
    return false;
  }
  const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
  const _ref = props, {
    style,
    children,
    scrollTop,
    scrollLeft
  } = _ref, attributes = _objectWithoutPropertiesLoose2(_ref, _excluded$2);
  const values = Object.values(attributes);
  const names = Object.keys(attributes).map((name) => isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(/([A-Z])/g, (n) => "-" + n.toLowerCase())));
  if (children !== void 0) {
    instance.textContent = children;
  }
  for (let name in style) {
    if (style.hasOwnProperty(name)) {
      const value = dangerousStyleValue(name, style[name]);
      if (isCustomPropRE.test(name)) {
        instance.style.setProperty(name, value);
      } else {
        instance.style[name] = value;
      }
    }
  }
  names.forEach((name, i) => {
    instance.setAttribute(name, values[i]);
  });
  if (scrollTop !== void 0) {
    instance.scrollTop = scrollTop;
  }
  if (scrollLeft !== void 0) {
    instance.scrollLeft = scrollLeft;
  }
}
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
var prefixKey = (prefix2, key) => prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
var prefixes = ["Webkit", "Ms", "Moz", "O"];
isUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {
  prefixes.forEach((prefix2) => acc[prefixKey(prefix2, prop)] = acc[prop]);
  return acc;
}, isUnitlessNumber);
var _excluded$1 = ["x", "y", "z"];
var domTransforms = /^(matrix|translate|scale|rotate|skew)/;
var pxTransforms = /^(translate)/;
var degTransforms = /^(rotate|skew)/;
var addUnit = (value, unit) => is.num(value) && value !== 0 ? value + unit : value;
var isValueIdentity = (value, id) => is.arr(value) ? value.every((v) => isValueIdentity(v, id)) : is.num(value) ? value === id : parseFloat(value) === id;
var AnimatedStyle = class extends AnimatedObject {
  constructor(_ref) {
    let {
      x,
      y,
      z
    } = _ref, style = _objectWithoutPropertiesLoose2(_ref, _excluded$1);
    const inputs = [];
    const transforms = [];
    if (x || y || z) {
      inputs.push([x || 0, y || 0, z || 0]);
      transforms.push((xyz) => [`translate3d(${xyz.map((v) => addUnit(v, "px")).join(",")})`, isValueIdentity(xyz, 0)]);
    }
    eachProp(style, (value, key) => {
      if (key === "transform") {
        inputs.push([value || ""]);
        transforms.push((transform) => [transform, transform === ""]);
      } else if (domTransforms.test(key)) {
        delete style[key];
        if (is.und(value))
          return;
        const unit = pxTransforms.test(key) ? "px" : degTransforms.test(key) ? "deg" : "";
        inputs.push(toArray(value));
        transforms.push(key === "rotate3d" ? ([x2, y2, z2, deg]) => [`rotate3d(${x2},${y2},${z2},${addUnit(deg, unit)})`, isValueIdentity(deg, 0)] : (input) => [`${key}(${input.map((v) => addUnit(v, unit)).join(",")})`, isValueIdentity(input, key.startsWith("scale") ? 1 : 0)]);
      }
    });
    if (inputs.length) {
      style.transform = new FluidTransform(inputs, transforms);
    }
    super(style);
  }
};
var FluidTransform = class extends FluidValue {
  constructor(inputs, transforms) {
    super();
    this._value = null;
    this.inputs = inputs;
    this.transforms = transforms;
  }
  get() {
    return this._value || (this._value = this._get());
  }
  _get() {
    let transform = "";
    let identity2 = true;
    each(this.inputs, (input, i) => {
      const arg1 = getFluidValue(input[0]);
      const [t, id] = this.transforms[i](is.arr(arg1) ? arg1 : input.map(getFluidValue));
      transform += " " + t;
      identity2 = identity2 && id;
    });
    return identity2 ? "none" : transform;
  }
  observerAdded(count) {
    if (count == 1)
      each(this.inputs, (input) => each(input, (value) => hasFluidValue(value) && addFluidObserver(value, this)));
  }
  observerRemoved(count) {
    if (count == 0)
      each(this.inputs, (input) => each(input, (value) => hasFluidValue(value) && removeFluidObserver(value, this)));
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._value = null;
    }
    callFluidObservers(this, event);
  }
};
var primitives = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"];
var _excluded = ["scrollTop", "scrollLeft"];
globals.assign({
  batchedUpdates: import_react_dom.unstable_batchedUpdates,
  createStringInterpolator,
  colors
});
var host = createHost(primitives, {
  applyAnimatedValues,
  createAnimatedStyle: (style) => new AnimatedStyle(style),
  getComponentProps: (_ref) => {
    let props = _objectWithoutPropertiesLoose2(_ref, _excluded);
    return props;
  }
});
var animated = host.animated;

// node_modules/antd-mobile/es/utils/render-to-container.js
var import_react_dom2 = __toESM(require_react_dom());

// node_modules/antd-mobile/es/utils/get-container.js
function resolveContainer(getContainer) {
  const container = typeof getContainer === "function" ? getContainer() : getContainer;
  return container || document.body;
}

// node_modules/antd-mobile/es/utils/render-to-container.js
function renderToContainer(getContainer, node) {
  if (canUseDom && getContainer) {
    const container = resolveContainer(getContainer);
    return (0, import_react_dom2.createPortal)(node, container);
  }
  return node;
}

// node_modules/antd-mobile/es/utils/use-initialized.js
var import_react86 = __toESM(require_react());
function useInitialized(check) {
  const initializedRef = (0, import_react86.useRef)(check);
  if (check) {
    initializedRef.current = true;
  }
  return !!initializedRef.current;
}

// node_modules/antd-mobile/es/utils/should-render.js
var ShouldRender = (props) => {
  const shouldRender = useShouldRender(props.active, props.forceRender, props.destroyOnClose);
  return shouldRender ? props.children : null;
};
function useShouldRender(active, forceRender, destroyOnClose) {
  const initialized = useInitialized(active);
  if (forceRender)
    return true;
  if (active)
    return true;
  if (!initialized)
    return false;
  return !destroyOnClose;
}

// node_modules/antd-mobile/es/utils/with-stop-propagation.js
var import_react87 = __toESM(require_react());
var eventToPropRecord = {
  "click": "onClick"
};
function withStopPropagation(events, element) {
  const props = Object.assign({}, element.props);
  for (const key of events) {
    const prop = eventToPropRecord[key];
    props[prop] = function(e) {
      var _a, _b;
      e.stopPropagation();
      (_b = (_a = element.props)[prop]) === null || _b === void 0 ? void 0 : _b.call(_a, e);
    };
  }
  return import_react87.default.cloneElement(element, props);
}

// node_modules/antd-mobile/es/components/mask/mask.js
var classPrefix = `adm-mask`;
var opacityRecord = {
  default: 0.55,
  thin: 0.35,
  thick: 0.75
};
var defaultProps = {
  visible: true,
  destroyOnClose: false,
  forceRender: false,
  color: "black",
  opacity: "default",
  disableBodyScroll: true,
  getContainer: null,
  stopPropagation: ["click"]
};
var Mask = (p) => {
  const props = mergeProps(defaultProps, p);
  const {
    locale
  } = useConfig();
  const ref = (0, import_react88.useRef)(null);
  useLockScroll(ref, props.visible && props.disableBodyScroll);
  const background = (0, import_react88.useMemo)(() => {
    var _a;
    const opacity2 = (_a = opacityRecord[props.opacity]) !== null && _a !== void 0 ? _a : props.opacity;
    const rgb2 = props.color === "white" ? "255, 255, 255" : "0, 0, 0";
    return `rgba(${rgb2}, ${opacity2})`;
  }, [props.color, props.opacity]);
  const [active, setActive] = (0, import_react88.useState)(props.visible);
  const unmountedRef = useUnmountedRef_default();
  const {
    opacity
  } = useSpring({
    opacity: props.visible ? 1 : 0,
    config: {
      precision: 0.01,
      mass: 1,
      tension: 250,
      friction: 30,
      clamp: true
    },
    onStart: () => {
      setActive(true);
    },
    onRest: () => {
      var _a, _b;
      if (unmountedRef.current)
        return;
      setActive(props.visible);
      if (props.visible) {
        (_a = props.afterShow) === null || _a === void 0 ? void 0 : _a.call(props);
      } else {
        (_b = props.afterClose) === null || _b === void 0 ? void 0 : _b.call(props);
      }
    }
  });
  const node = withStopPropagation(props.stopPropagation, withNativeProps(props, import_react88.default.createElement(animated.div, {
    className: classPrefix,
    ref,
    style: Object.assign(Object.assign({}, props.style), {
      background,
      opacity,
      display: active ? void 0 : "none"
    }),
    onClick: (e) => {
      var _a;
      if (e.target === e.currentTarget) {
        (_a = props.onMaskClick) === null || _a === void 0 ? void 0 : _a.call(props, e);
      }
    }
  }, props.onMaskClick && import_react88.default.createElement("div", {
    className: `${classPrefix}-aria-button`,
    role: "button",
    "aria-label": locale.Mask.name,
    onClick: props.onMaskClick
  }), import_react88.default.createElement("div", {
    className: `${classPrefix}-content`
  }, props.children))));
  return import_react88.default.createElement(ShouldRender, {
    active,
    forceRender: props.forceRender,
    destroyOnClose: props.destroyOnClose
  }, renderToContainer(props.getContainer, node));
};

// node_modules/antd-mobile/es/components/mask/index.js
var mask_default = Mask;

// node_modules/antd-mobile/es/components/popup/popup-base-props.js
var defaultPopupBaseProps = {
  closeOnMaskClick: false,
  destroyOnClose: false,
  disableBodyScroll: true,
  forceRender: false,
  getContainer: () => document.body,
  mask: true,
  showCloseButton: false,
  stopPropagation: ["click"],
  visible: false
};

// node_modules/antd-mobile/es/utils/use-inner-visible.js
var import_react89 = __toESM(require_react());
function useInnerVisible(outerVisible) {
  const [innerVisible, setInnerVisible] = (0, import_react89.useState)(outerVisible);
  useIsomorphicLayoutEffect_default(() => {
    setInnerVisible(outerVisible);
  }, [outerVisible]);
  return innerVisible;
}

// node_modules/antd-mobile/es/components/popup/popup.js
var classPrefix2 = `adm-popup`;
var defaultProps2 = Object.assign(Object.assign({}, defaultPopupBaseProps), {
  position: "bottom"
});
var Popup = (p) => {
  const props = mergeProps(defaultProps2, p);
  const bodyCls = (0, import_classnames2.default)(`${classPrefix2}-body`, props.bodyClassName, `${classPrefix2}-body-position-${props.position}`);
  const [active, setActive] = (0, import_react90.useState)(props.visible);
  useIsomorphicLayoutEffect_default(() => {
    if (props.visible) {
      setActive(true);
    }
  }, [props.visible]);
  const ref = (0, import_react90.useRef)(null);
  useLockScroll(ref, props.disableBodyScroll && active);
  const unmountedRef = useUnmountedRef_default();
  const {
    percent
  } = useSpring({
    percent: props.visible ? 0 : 100,
    config: {
      precision: 0.1,
      mass: 0.4,
      tension: 300,
      friction: 30
    },
    onRest: () => {
      var _a, _b;
      if (unmountedRef.current)
        return;
      setActive(props.visible);
      if (props.visible) {
        (_a = props.afterShow) === null || _a === void 0 ? void 0 : _a.call(props);
      } else {
        (_b = props.afterClose) === null || _b === void 0 ? void 0 : _b.call(props);
      }
    }
  });
  const maskVisible = useInnerVisible(active && props.visible);
  const node = withStopPropagation(props.stopPropagation, withNativeProps(props, import_react90.default.createElement("div", {
    className: classPrefix2,
    onClick: props.onClick,
    style: {
      display: active ? void 0 : "none"
    }
  }, props.mask && import_react90.default.createElement(mask_default, {
    visible: maskVisible,
    forceRender: props.forceRender,
    destroyOnClose: props.destroyOnClose,
    onMaskClick: (e) => {
      var _a, _b;
      (_a = props.onMaskClick) === null || _a === void 0 ? void 0 : _a.call(props, e);
      if (props.closeOnMaskClick) {
        (_b = props.onClose) === null || _b === void 0 ? void 0 : _b.call(props);
      }
    },
    className: props.maskClassName,
    style: props.maskStyle,
    disableBodyScroll: false,
    stopPropagation: props.stopPropagation
  }), import_react90.default.createElement(animated.div, {
    className: bodyCls,
    style: Object.assign(Object.assign({}, props.bodyStyle), {
      transform: percent.to((v) => {
        if (props.position === "bottom") {
          return `translate(0, ${v}%)`;
        }
        if (props.position === "top") {
          return `translate(0, -${v}%)`;
        }
        if (props.position === "left") {
          return `translate(-${v}%, 0)`;
        }
        if (props.position === "right") {
          return `translate(${v}%, 0)`;
        }
        return "none";
      })
    }),
    ref
  }, props.showCloseButton && import_react90.default.createElement("a", {
    className: (0, import_classnames2.default)(`${classPrefix2}-close-icon`, "adm-plain-anchor"),
    onClick: () => {
      var _a;
      (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
    }
  }, import_react90.default.createElement(CloseOutline_default, null)), props.children))));
  return import_react90.default.createElement(ShouldRender, {
    active,
    forceRender: props.forceRender,
    destroyOnClose: props.destroyOnClose
  }, renderToContainer(props.getContainer, node));
};

// node_modules/antd-mobile/es/components/popup/index.js
var popup_default = Popup;

// node_modules/antd-mobile/es/components/safe-area/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/safe-area/safe-area.css";

// node_modules/antd-mobile/es/components/safe-area/safe-area.js
var import_react91 = __toESM(require_react());
var import_classnames3 = __toESM(require_classnames());
var classPrefix3 = "adm-safe-area";
var SafeArea = (props) => {
  return withNativeProps(props, import_react91.default.createElement("div", {
    className: (0, import_classnames3.default)(classPrefix3, `${classPrefix3}-position-${props.position}`)
  }));
};

// node_modules/antd-mobile/es/components/safe-area/index.js
var safe_area_default = SafeArea;

// node_modules/antd-mobile/es/utils/render-imperatively.js
var import_react92 = __toESM(require_react());

// node_modules/antd-mobile/es/utils/render.js
var ReactDOM = __toESM(require_react_dom());
var fullClone = Object.assign({}, ReactDOM);
var {
  version,
  render: reactRender,
  unmountComponentAtNode
} = fullClone;
var createRoot;
try {
  const mainVersion = Number((version || "").split(".")[0]);
  if (mainVersion >= 18 && fullClone.createRoot) {
    createRoot = fullClone.createRoot;
  }
} catch (e) {
}
function toggleWarning(skip) {
  const {
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED
  } = fullClone;
  if (__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED && typeof __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED === "object") {
    __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.usingClientEntryPoint = skip;
  }
}
var MARK = "__antd_mobile_root__";
function legacyRender(node, container) {
  reactRender(node, container);
}
function concurrentRender(node, container) {
  toggleWarning(true);
  const root = container[MARK] || createRoot(container);
  toggleWarning(false);
  root.render(node);
  container[MARK] = root;
}
function render(node, container) {
  if (createRoot) {
    concurrentRender(node, container);
    return;
  }
  legacyRender(node, container);
}
function legacyUnmount(container) {
  return unmountComponentAtNode(container);
}
function concurrentUnmount(container) {
  return __awaiter(this, void 0, void 0, function* () {
    return Promise.resolve().then(() => {
      var _a;
      (_a = container[MARK]) === null || _a === void 0 ? void 0 : _a.unmount();
      delete container[MARK];
    });
  });
}
function unmount(container) {
  if (createRoot) {
    return concurrentUnmount(container);
  }
  return legacyUnmount(container);
}

// node_modules/antd-mobile/es/utils/render-to-body.js
function renderToBody(element) {
  const container = document.createElement("div");
  document.body.appendChild(container);
  function unmount2() {
    const unmountResult = unmount(container);
    if (unmountResult && container.parentNode) {
      container.parentNode.removeChild(container);
    }
  }
  render(element, container);
  return unmount2;
}

// node_modules/antd-mobile/es/utils/render-imperatively.js
function renderImperatively(element) {
  const Wrapper2 = import_react92.default.forwardRef((_, ref) => {
    const [visible, setVisible] = (0, import_react92.useState)(false);
    const closedRef = (0, import_react92.useRef)(false);
    const [elementToRender, setElementToRender] = (0, import_react92.useState)(element);
    const keyRef = (0, import_react92.useRef)(0);
    (0, import_react92.useEffect)(() => {
      if (!closedRef.current) {
        setVisible(true);
      } else {
        afterClose();
      }
    }, []);
    function onClose() {
      var _a, _b;
      closedRef.current = true;
      setVisible(false);
      (_b = (_a = elementToRender.props).onClose) === null || _b === void 0 ? void 0 : _b.call(_a);
    }
    function afterClose() {
      var _a, _b;
      unmount2();
      (_b = (_a = elementToRender.props).afterClose) === null || _b === void 0 ? void 0 : _b.call(_a);
    }
    (0, import_react92.useImperativeHandle)(ref, () => ({
      close: onClose,
      replace: (element2) => {
        var _a, _b;
        keyRef.current++;
        (_b = (_a = elementToRender.props).afterClose) === null || _b === void 0 ? void 0 : _b.call(_a);
        setElementToRender(element2);
      }
    }));
    return import_react92.default.cloneElement(elementToRender, Object.assign(Object.assign({}, elementToRender.props), {
      key: keyRef.current,
      visible,
      onClose,
      afterClose
    }));
  });
  const wrapperRef = import_react92.default.createRef();
  const unmount2 = renderToBody(import_react92.default.createElement(Wrapper2, {
    ref: wrapperRef
  }));
  return {
    close: () => {
      var _a;
      (_a = wrapperRef.current) === null || _a === void 0 ? void 0 : _a.close();
    },
    replace: (element2) => {
      var _a;
      (_a = wrapperRef.current) === null || _a === void 0 ? void 0 : _a.replace(element2);
    }
  };
}

// node_modules/antd-mobile/es/components/action-sheet/action-sheet.js
var classPrefix4 = `adm-action-sheet`;
var defaultProps3 = {
  visible: false,
  actions: [],
  cancelText: "",
  closeOnAction: false,
  closeOnMaskClick: true,
  safeArea: true,
  destroyOnClose: false,
  forceRender: false
};
var ActionSheet = (p) => {
  const props = mergeProps(defaultProps3, p);
  return import_react93.default.createElement(popup_default, {
    visible: props.visible,
    onMaskClick: () => {
      var _a, _b;
      (_a = props.onMaskClick) === null || _a === void 0 ? void 0 : _a.call(props);
      if (props.closeOnMaskClick) {
        (_b = props.onClose) === null || _b === void 0 ? void 0 : _b.call(props);
      }
    },
    afterClose: props.afterClose,
    className: (0, import_classnames4.default)(`${classPrefix4}-popup`, props.popupClassName),
    style: props.popupStyle,
    getContainer: props.getContainer,
    destroyOnClose: props.destroyOnClose,
    forceRender: props.forceRender
  }, withNativeProps(props, import_react93.default.createElement("div", {
    className: classPrefix4
  }, props.extra && import_react93.default.createElement("div", {
    className: `${classPrefix4}-extra`
  }, props.extra), import_react93.default.createElement("div", {
    className: `${classPrefix4}-button-list`
  }, props.actions.map((action, index) => import_react93.default.createElement("div", {
    key: action.key,
    className: `${classPrefix4}-button-item-wrapper`
  }, import_react93.default.createElement("a", {
    className: (0, import_classnames4.default)("adm-plain-anchor", `${classPrefix4}-button-item`, {
      [`${classPrefix4}-button-item-danger`]: action.danger,
      [`${classPrefix4}-button-item-disabled`]: action.disabled,
      [`${classPrefix4}-button-item-bold`]: action.bold
    }),
    onClick: () => {
      var _a, _b, _c;
      (_a = action.onClick) === null || _a === void 0 ? void 0 : _a.call(action);
      (_b = props.onAction) === null || _b === void 0 ? void 0 : _b.call(props, action, index);
      if (props.closeOnAction) {
        (_c = props.onClose) === null || _c === void 0 ? void 0 : _c.call(props);
      }
    }
  }, import_react93.default.createElement("div", {
    className: `${classPrefix4}-button-item-name`
  }, action.text), action.description && import_react93.default.createElement("div", {
    className: `${classPrefix4}-button-item-description`
  }, action.description))))), props.cancelText && import_react93.default.createElement("div", {
    className: `${classPrefix4}-cancel`
  }, import_react93.default.createElement("div", {
    className: `${classPrefix4}-button-item-wrapper`
  }, import_react93.default.createElement("a", {
    className: (0, import_classnames4.default)("adm-plain-anchor", `${classPrefix4}-button-item`),
    onClick: () => {
      var _a;
      (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
    }
  }, import_react93.default.createElement("div", {
    className: `${classPrefix4}-button-item-name`
  }, props.cancelText)))), props.safeArea && import_react93.default.createElement(safe_area_default, {
    position: "bottom"
  }))));
};
function showActionSheet(props) {
  return renderImperatively(import_react93.default.createElement(ActionSheet, Object.assign({}, props)));
}

// node_modules/antd-mobile/es/components/action-sheet/index.js
var action_sheet_default = attachPropertiesToComponent(ActionSheet, {
  show: showActionSheet
});

// node_modules/antd-mobile/es/components/auto-center/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/auto-center/auto-center.css";

// node_modules/antd-mobile/es/components/auto-center/auto-center.js
var import_react94 = __toESM(require_react());
var classPrefix5 = "adm-auto-center";
var AutoCenter = (props) => {
  return withNativeProps(props, import_react94.default.createElement("div", {
    className: classPrefix5
  }, import_react94.default.createElement("div", {
    className: `${classPrefix5}-content`
  }, props.children)));
};

// node_modules/antd-mobile/es/components/auto-center/index.js
var auto_center_default = AutoCenter;

// node_modules/antd-mobile/es/components/avatar/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/avatar/avatar.css";

// node_modules/antd-mobile/es/components/avatar/avatar.js
var import_react96 = __toESM(require_react());

// node_modules/antd-mobile/es/components/avatar/fallback.js
var import_react95 = __toESM(require_react());
var Fallback = (0, import_react95.memo)(() => import_react95.default.createElement("svg", {
  className: "adm-avatar-fallback",
  width: "88px",
  height: "88px",
  viewBox: "0 0 88 88",
  version: "1.1"
}, import_react95.default.createElement("title", null, "\u7F16\u7EC4 3"), import_react95.default.createElement("defs", null, import_react95.default.createElement("polygon", {
  id: "path-1",
  points: "0 0 88 0 88 88 0 88"
})), import_react95.default.createElement("g", {
  id: "\u9875\u9762-1",
  stroke: "none",
  strokeWidth: "1",
  fill: "none",
  fillRule: "evenodd"
}, import_react95.default.createElement("g", {
  id: "\u8BED\u96C0",
  transform: "translate(-495.000000, -71.000000)"
}, import_react95.default.createElement("g", {
  id: "\u7F16\u7EC4-3",
  transform: "translate(495.000000, 71.000000)"
}, import_react95.default.createElement("mask", {
  id: "mask-2",
  fill: "white"
}, import_react95.default.createElement("use", {
  xlinkHref: "#path-1"
})), import_react95.default.createElement("use", {
  id: "Mask",
  fill: "#EEEEEE",
  fillRule: "nonzero",
  xlinkHref: "#path-1"
}), import_react95.default.createElement("path", {
  d: "M44.5707528,16 L43.4292117,16 L42.9575197,16.0086403 L42.9575195,16.0086403 C36.5215787,16.2615464 31.4341803,21.5678078 31.4344832,28.0273864 L31.4344832,34.7776551 L31.4495601,35.3716788 L31.4495593,35.3716628 C31.599687,38.5368723 32.9422041,41.5269327 35.2058513,43.7376716 L38.2147759,46.6775505 L38.4086219,46.8913989 C38.7747759,47.3385365 38.9750835,47.9001589 38.9750835,48.4833848 L38.9750835,48.8938006 L38.9556989,49.1897326 L38.9556989,49.1897325 C38.8577746,49.9812662 38.3754713,50.67284 37.667703,51.036605 L18.7375269,60.7440265 L18.4101421,60.9276334 L18.4101423,60.9276333 C16.9141658,61.8418636 16.0009389,63.4714674 16,65.2283758 L16,66.070809 L16.0129231,66.3948217 C16.1766149,68.4123376 17.860922,70 19.91569,70 L68.0843101,70 L68.08431,70 C70.2460467,70 71.9988087,68.243122 72,66.0751224 L72,65.2326893 C72,63.3382982 70.9446194,61.6037466 69.2624598,60.7440295 L50.3322837,51.036608 L50.3322835,51.0366079 C49.5291218,50.6249082 49.0240448,49.7962466 49.024903,48.8916436 L49.024903,48.4812278 C49.024903,47.8029608 49.3005955,47.1527756 49.7852106,46.6775603 L52.7941352,43.7376813 L52.7941354,43.7376811 C55.204308,41.3832325 56.5636029,38.151975 56.5633606,34.7776456 L56.5633606,28.0273769 L56.5633606,28.0273774 C56.5633606,21.3848531 51.1940878,16 44.5707524,16 L44.5707528,16 Z",
  id: "\u5F62\u72B6",
  fill: "#CCCCCC",
  fillRule: "nonzero",
  mask: "url(#mask-2)"
}))))));

// node_modules/antd-mobile/es/components/avatar/avatar.js
var classPrefix6 = "adm-avatar";
var defaultProps4 = {
  fallback: import_react96.default.createElement(Fallback, null),
  fit: "cover"
};
var Avatar = (p) => {
  const props = mergeProps(defaultProps4, p);
  return withNativeProps(props, import_react96.default.createElement(image_default, {
    className: classPrefix6,
    src: props.src,
    fallback: props.fallback,
    placeholder: props.fallback,
    alt: props.alt,
    lazy: props.lazy,
    fit: props.fit,
    onClick: props.onClick,
    onError: props.onError
  }));
};

// node_modules/antd-mobile/es/components/avatar/index.js
var avatar_default = Avatar;

// node_modules/antd-mobile/es/components/badge/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/badge/badge.css";

// node_modules/antd-mobile/es/components/badge/badge.js
var import_classnames5 = __toESM(require_classnames());
var import_react97 = __toESM(require_react());
var classPrefix7 = `adm-badge`;
var dot = import_react97.default.createElement(import_react97.default.Fragment, null);
var Badge = (props) => {
  const {
    content,
    color,
    children
  } = props;
  const isDot = content === dot;
  const badgeCls = (0, import_classnames5.default)(classPrefix7, !!children && `${classPrefix7}-fixed`, isDot && `${classPrefix7}-dot`, props.bordered && `${classPrefix7}-bordered`);
  const element = content || content === 0 ? withNativeProps(props, import_react97.default.createElement("div", {
    className: badgeCls,
    style: {
      "--color": color
    }
  }, !isDot && import_react97.default.createElement("div", {
    className: `${classPrefix7}-content`
  }, content))) : null;
  return children ? import_react97.default.createElement("div", {
    className: (0, import_classnames5.default)(`${classPrefix7}-wrapper`, props.wrapperClassName),
    style: props.wrapperStyle
  }, children, element) : element;
};

// node_modules/antd-mobile/es/components/badge/index.js
var badge_default = attachPropertiesToComponent(Badge, {
  dot
});

// node_modules/antd-mobile/es/components/button/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/button/button.css";

// node_modules/antd-mobile/es/components/button/button.js
var import_react99 = __toESM(require_react());
var import_classnames7 = __toESM(require_classnames());

// node_modules/antd-mobile/es/components/dot-loading/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/dot-loading/dot-loading.css";

// node_modules/antd-mobile/es/components/dot-loading/dot-loading.js
var import_react98 = __toESM(require_react());
var import_classnames6 = __toESM(require_classnames());
var classPrefix8 = `adm-dot-loading`;
var colorRecord = {
  default: "var(--adm-color-weak)",
  primary: "var(--adm-color-primary)",
  white: "var(--adm-color-white)"
};
var defaultProps5 = {
  color: "default"
};
var DotLoading = (0, import_react98.memo)((p) => {
  var _a;
  const props = mergeProps(defaultProps5, p);
  return withNativeProps(props, import_react98.default.createElement("div", {
    style: {
      color: (_a = colorRecord[props.color]) !== null && _a !== void 0 ? _a : props.color
    },
    className: (0, import_classnames6.default)("adm-loading", classPrefix8)
  }, import_react98.default.createElement("svg", {
    height: "1em",
    viewBox: "0 0 100 40",
    style: {
      verticalAlign: "-0.125em"
    }
  }, import_react98.default.createElement("g", {
    stroke: "none",
    strokeWidth: "1",
    fill: "none",
    fillRule: "evenodd"
  }, import_react98.default.createElement("g", {
    transform: "translate(-100.000000, -71.000000)"
  }, import_react98.default.createElement("g", {
    transform: "translate(95.000000, 71.000000)"
  }, import_react98.default.createElement("g", {
    transform: "translate(5.000000, 0.000000)"
  }, [0, 1, 2].map((i) => import_react98.default.createElement("rect", {
    key: i,
    fill: "currentColor",
    x: 20 + i * 26,
    y: "16",
    width: "8",
    height: "8",
    rx: "2"
  }, import_react98.default.createElement("animate", {
    attributeName: "y",
    from: "16",
    to: "16",
    dur: "2s",
    begin: `${i * 0.2}s`,
    repeatCount: "indefinite",
    values: "16; 6; 26; 16; 16",
    keyTimes: "0; 0.1; 0.3; 0.4; 1"
  }))))))))));
});

// node_modules/antd-mobile/es/components/dot-loading/index.js
var dot_loading_default = DotLoading;

// node_modules/antd-mobile/es/utils/validate.js
function isPromise(obj) {
  return !!obj && typeof obj === "object" && typeof obj.then === "function";
}
function isIOS() {
  return canUseDom ? /ios|iphone|ipad|ipod/.test(navigator.userAgent.toLowerCase()) : false;
}

// node_modules/antd-mobile/es/components/button/button.js
var classPrefix9 = `adm-button`;
var defaultProps6 = {
  color: "default",
  fill: "solid",
  block: false,
  loading: false,
  loadingIcon: import_react99.default.createElement(dot_loading_default, {
    color: "currentColor"
  }),
  type: "button",
  shape: "default",
  size: "middle"
};
var Button = (0, import_react99.forwardRef)((p, ref) => {
  const props = mergeProps(defaultProps6, p);
  const [innerLoading, setInnerLoading] = (0, import_react99.useState)(false);
  const nativeButtonRef = (0, import_react99.useRef)(null);
  const loading = props.loading === "auto" ? innerLoading : props.loading;
  const disabled = props.disabled || loading;
  (0, import_react99.useImperativeHandle)(ref, () => ({
    get nativeElement() {
      return nativeButtonRef.current;
    }
  }));
  const handleClick = (e) => __awaiter(void 0, void 0, void 0, function* () {
    if (!props.onClick)
      return;
    const promise = props.onClick(e);
    if (isPromise(promise)) {
      try {
        setInnerLoading(true);
        yield promise;
        setInnerLoading(false);
      } catch (e2) {
        setInnerLoading(false);
        throw e2;
      }
    }
  });
  return withNativeProps(props, import_react99.default.createElement("button", {
    ref: nativeButtonRef,
    type: props.type,
    onClick: handleClick,
    className: (0, import_classnames7.default)(classPrefix9, props.color ? `${classPrefix9}-${props.color}` : null, {
      [`${classPrefix9}-block`]: props.block,
      [`${classPrefix9}-disabled`]: disabled,
      [`${classPrefix9}-fill-outline`]: props.fill === "outline",
      [`${classPrefix9}-fill-none`]: props.fill === "none",
      [`${classPrefix9}-mini`]: props.size === "mini",
      [`${classPrefix9}-small`]: props.size === "small",
      [`${classPrefix9}-large`]: props.size === "large",
      [`${classPrefix9}-loading`]: loading
    }, `${classPrefix9}-shape-${props.shape}`),
    disabled,
    onMouseDown: props.onMouseDown,
    onMouseUp: props.onMouseUp,
    onTouchStart: props.onTouchStart,
    onTouchEnd: props.onTouchEnd
  }, loading ? import_react99.default.createElement("div", {
    className: `${classPrefix9}-loading-wrapper`
  }, props.loadingIcon, props.loadingText) : import_react99.default.createElement("span", null, props.children)));
});

// node_modules/antd-mobile/es/components/button/index.js
var button_default = Button;

// node_modules/antd-mobile/es/components/calendar/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/calendar/calendar.css";

// node_modules/antd-mobile/es/components/calendar/calendar.js
var import_react103 = __toESM(require_react());
var import_dayjs2 = __toESM(require_dayjs_min());
var import_classnames8 = __toESM(require_classnames());

// node_modules/antd-mobile/es/components/calendar/arrow-left.js
var import_react100 = __toESM(require_react());
var ArrowLeft = () => {
  return import_react100.default.createElement("svg", {
    height: "1em",
    viewBox: "0 0 44 44"
  }, import_react100.default.createElement("g", {
    stroke: "none",
    strokeWidth: "1",
    fill: "none",
    fillRule: "evenodd"
  }, import_react100.default.createElement("g", {
    transform: "translate(-100.000000, -22.000000)"
  }, import_react100.default.createElement("g", {
    transform: "translate(100.000000, 22.000000)"
  }, import_react100.default.createElement("rect", {
    x: "0",
    y: "0",
    width: "44",
    height: "44"
  }), import_react100.default.createElement("g", {
    transform: "translate(12.000000, 4.000000)",
    fill: "currentColor",
    fillRule: "nonzero"
  }, import_react100.default.createElement("path", {
    d: "M19.4833058,2.71985611 L3.53051139,17.0699744 C3.0173831,17.5315665 2.97522952,18.3220903 3.43630803,18.8357433 L3.43630796,18.8357432 C3.46601289,18.8688164 3.49745845,18.9002801 3.53051133,18.9300007 L19.4833057,33.2801611 C20.1234001,33.8559077 20.1759552,34.8420707 19.6007967,35.4827774 C19.0256382,36.1235263 18.0404824,36.1761351 17.400388,35.6003885 L1.44759367,21.2502703 L1.4475933,21.25027 C1.33208743,21.1463692 1.22220259,21.036372 1.11840792,20.920748 C-0.49302969,19.1256817 -0.345639536,16.3628317 1.4475933,14.7497465 L17.4003877,0.399628282 C18.0404821,-0.176160428 19.0256378,-0.123509422 19.6007963,0.517239417 C20.1759548,1.1579461 20.1233997,2.14410915 19.4833053,2.7198557 L19.4833058,2.71985611 Z"
  }))))));
};

// node_modules/antd-mobile/es/components/calendar/arrow-left-double.js
var import_react101 = __toESM(require_react());
var ArrowLeftDouble = () => {
  return import_react101.default.createElement("svg", {
    height: "1em",
    viewBox: "0 0 44 44"
  }, import_react101.default.createElement("g", {
    stroke: "none",
    strokeWidth: "1",
    fill: "none",
    fillRule: "evenodd"
  }, import_react101.default.createElement("g", {
    transform: "translate(-24.000000, -22.000000)"
  }, import_react101.default.createElement("g", {
    transform: "translate(24.000000, 22.000000)"
  }, import_react101.default.createElement("rect", {
    x: "0",
    y: "0",
    width: "44",
    height: "44"
  }), import_react101.default.createElement("g", {
    transform: "translate(7.000000, 4.000000)",
    fill: "currentColor",
    fillRule: "nonzero"
  }, import_react101.default.createElement("path", {
    d: "M19.4833058,2.71985611 L3.53051139,17.0699744 C3.0173831,17.5315665 2.97522952,18.3220903 3.43630803,18.8357433 L3.43630796,18.8357432 C3.46601289,18.8688164 3.49745845,18.9002801 3.53051133,18.9300007 L19.4833057,33.2801611 C20.1234001,33.8559077 20.1759552,34.8420707 19.6007967,35.4827774 C19.0256382,36.1235263 18.0404824,36.1761351 17.400388,35.6003885 L1.44759367,21.2502703 L1.4475933,21.25027 C1.33208743,21.1463692 1.22220259,21.036372 1.11840792,20.920748 C-0.49302969,19.1256817 -0.345639536,16.3628317 1.4475933,14.7497465 L17.4003877,0.399628282 C18.0404821,-0.176160428 19.0256378,-0.123509422 19.6007963,0.517239417 C20.1759548,1.1579461 20.1233997,2.14410915 19.4833053,2.7198557 L19.4833058,2.71985611 Z"
  }), import_react101.default.createElement("path", {
    d: "M19.5305114,17.0699744 C19.0173831,17.5315665 18.9752295,18.3220903 19.436308,18.8357433 C19.4660129,18.8688164 19.4974585,18.9002801 19.5305113,18.9300007 L29.4833057,27.2801611 C30.1234001,27.8559077 30.1759552,28.8420707 29.6007967,29.4827774 C29.0256382,30.1235263 28.0404824,30.1761351 27.400388,29.6003885 L17.4475937,21.2502703 C17.3320874,21.1463692 17.2222026,21.036372 17.1184079,20.920748 C15.5069703,19.1256817 15.6543605,16.3628317 17.4475933,14.7497465 L27.4003877,6.39962828 C28.0404821,5.82383957 29.0256378,5.87649058 29.6007963,6.51723942 C30.1759548,7.1579461 30.1233997,8.14410915 29.4833053,8.7198557 L19.5305114,17.0699744 Z"
  }))))));
};

// node_modules/antd-mobile/es/components/calendar/calendar.js
var import_isoWeek = __toESM(require_isoWeek());

// node_modules/antd-mobile/es/utils/use-props-value.js
var import_react102 = __toESM(require_react());
function usePropsValue(options) {
  const {
    value,
    defaultValue,
    onChange
  } = options;
  const update3 = useUpdate_default();
  const stateRef = (0, import_react102.useRef)(value !== void 0 ? value : defaultValue);
  if (value !== void 0) {
    stateRef.current = value;
  }
  const setState = useMemoizedFn_default((v, forceTrigger = false) => {
    const nextValue = typeof v === "function" ? v(stateRef.current) : v;
    if (!forceTrigger && nextValue === stateRef.current)
      return;
    stateRef.current = nextValue;
    update3();
    return onChange === null || onChange === void 0 ? void 0 : onChange(nextValue);
  });
  return [stateRef.current, setState];
}

// node_modules/antd-mobile/es/components/calendar/convert.js
function convertValueToRange(selectionMode, value) {
  if (selectionMode === void 0) {
    return null;
  }
  if (value === null) {
    return null;
  }
  if (Array.isArray(value)) {
    return value;
  }
  return [value, value];
}

// node_modules/antd-mobile/es/components/calendar/calendar.js
import_dayjs2.default.extend(import_isoWeek.default);
var classPrefix10 = "adm-calendar";
var defaultProps7 = {
  weekStartsOn: "Sunday",
  defaultValue: null,
  allowClear: true,
  prevMonthButton: import_react103.default.createElement(ArrowLeft, null),
  prevYearButton: import_react103.default.createElement(ArrowLeftDouble, null),
  nextMonthButton: import_react103.default.createElement(ArrowLeft, null),
  nextYearButton: import_react103.default.createElement(ArrowLeftDouble, null)
};
var Calendar = (0, import_react103.forwardRef)((p, ref) => {
  const today = (0, import_dayjs2.default)();
  const props = mergeProps(defaultProps7, p);
  const {
    locale
  } = useConfig();
  const markItems = [...locale.Calendar.markItems];
  if (props.weekStartsOn === "Sunday") {
    const item = markItems.pop();
    if (item)
      markItems.unshift(item);
  }
  const [dateRange, setDateRange] = usePropsValue({
    value: props.value === void 0 ? void 0 : convertValueToRange(props.selectionMode, props.value),
    defaultValue: convertValueToRange(props.selectionMode, props.defaultValue),
    onChange: (v) => {
      var _a, _b;
      if (props.selectionMode === "single") {
        (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, v ? v[0] : null);
      } else if (props.selectionMode === "range") {
        (_b = props.onChange) === null || _b === void 0 ? void 0 : _b.call(props, v);
      }
    }
  });
  const [intermediate, setIntermediate] = (0, import_react103.useState)(false);
  const [current, setCurrent] = (0, import_react103.useState)(() => (0, import_dayjs2.default)(dateRange ? dateRange[0] : today).date(1));
  useUpdateEffect_default(() => {
    var _a;
    (_a = props.onPageChange) === null || _a === void 0 ? void 0 : _a.call(props, current.year(), current.month() + 1);
  }, [current]);
  (0, import_react103.useImperativeHandle)(ref, () => ({
    jumpTo: (pageOrPageGenerator) => {
      let page;
      if (typeof pageOrPageGenerator === "function") {
        page = pageOrPageGenerator({
          year: current.year(),
          month: current.month() + 1
        });
      } else {
        page = pageOrPageGenerator;
      }
      setCurrent((0, import_dayjs2.default)().year(page.year).month(page.month - 1).date(1));
    },
    jumpToToday: () => {
      setCurrent((0, import_dayjs2.default)().date(1));
    }
  }));
  const header = import_react103.default.createElement("div", {
    className: `${classPrefix10}-header`
  }, import_react103.default.createElement("a", {
    className: `${classPrefix10}-arrow-button ${classPrefix10}-arrow-button-year`,
    onClick: () => {
      setCurrent(current.subtract(1, "year"));
    }
  }, props.prevYearButton), import_react103.default.createElement("a", {
    className: `${classPrefix10}-arrow-button ${classPrefix10}-arrow-button-month`,
    onClick: () => {
      setCurrent(current.subtract(1, "month"));
    }
  }, props.prevMonthButton), import_react103.default.createElement("div", {
    className: `${classPrefix10}-title`
  }, locale.Calendar.renderYearAndMonth(current.year(), current.month() + 1)), import_react103.default.createElement("a", {
    className: (0, import_classnames8.default)(`${classPrefix10}-arrow-button`, `${classPrefix10}-arrow-button-right`, `${classPrefix10}-arrow-button-right-month`),
    onClick: () => {
      setCurrent(current.add(1, "month"));
    }
  }, props.nextMonthButton), import_react103.default.createElement("a", {
    className: (0, import_classnames8.default)(`${classPrefix10}-arrow-button`, `${classPrefix10}-arrow-button-right`, `${classPrefix10}-arrow-button-right-year`),
    onClick: () => {
      setCurrent(current.add(1, "year"));
    }
  }, props.nextYearButton));
  const maxDay = (0, import_react103.useMemo)(() => props.max && (0, import_dayjs2.default)(props.max), [props.max]);
  const minDay = (0, import_react103.useMemo)(() => props.min && (0, import_dayjs2.default)(props.min), [props.min]);
  function renderCells() {
    var _a;
    const cells = [];
    let iterator = current.subtract(current.isoWeekday(), "day");
    if (props.weekStartsOn === "Monday") {
      iterator = iterator.add(1, "day");
    }
    while (cells.length < 6 * 7) {
      const d = iterator;
      let isSelect = false;
      let isBegin = false;
      let isEnd = false;
      if (dateRange) {
        const [begin, end] = dateRange;
        isBegin = d.isSame(begin, "day");
        isEnd = d.isSame(end, "day");
        isSelect = isBegin || isEnd || d.isAfter(begin, "day") && d.isBefore(end, "day");
      }
      const inThisMonth = d.month() === current.month();
      const disabled = props.shouldDisableDate ? props.shouldDisableDate(d.toDate()) : maxDay && d.isAfter(maxDay, "day") || minDay && d.isBefore(minDay, "day");
      cells.push(import_react103.default.createElement("div", {
        key: d.valueOf(),
        className: (0, import_classnames8.default)(`${classPrefix10}-cell`, (disabled || !inThisMonth) && `${classPrefix10}-cell-disabled`, inThisMonth && {
          [`${classPrefix10}-cell-today`]: d.isSame(today, "day"),
          [`${classPrefix10}-cell-selected`]: isSelect,
          [`${classPrefix10}-cell-selected-begin`]: isBegin,
          [`${classPrefix10}-cell-selected-end`]: isEnd
        }),
        onClick: () => {
          if (!props.selectionMode)
            return;
          if (disabled)
            return;
          const date = d.toDate();
          if (!inThisMonth) {
            setCurrent(d.clone().date(1));
          }
          function shouldClear() {
            if (!props.allowClear)
              return false;
            if (!dateRange)
              return false;
            const [begin, end] = dateRange;
            return d.isSame(begin, "date") && d.isSame(end, "day");
          }
          if (props.selectionMode === "single") {
            if (props.allowClear && shouldClear()) {
              setDateRange(null);
              return;
            }
            setDateRange([date, date]);
          } else if (props.selectionMode === "range") {
            if (!dateRange) {
              setDateRange([date, date]);
              setIntermediate(true);
              return;
            }
            if (shouldClear()) {
              setDateRange(null);
              setIntermediate(false);
              return;
            }
            if (intermediate) {
              const another = dateRange[0];
              setDateRange(another > date ? [date, another] : [another, date]);
              setIntermediate(false);
            } else {
              setDateRange([date, date]);
              setIntermediate(true);
            }
          }
        }
      }, import_react103.default.createElement("div", {
        className: `${classPrefix10}-cell-top`
      }, d.date()), import_react103.default.createElement("div", {
        className: `${classPrefix10}-cell-bottom`
      }, (_a = props.renderLabel) === null || _a === void 0 ? void 0 : _a.call(props, d.toDate()))));
      iterator = iterator.add(1, "day");
    }
    return cells;
  }
  const body = import_react103.default.createElement("div", {
    className: `${classPrefix10}-cells`
  }, renderCells());
  const mark = import_react103.default.createElement("div", {
    className: `${classPrefix10}-mark`
  }, markItems.map((item, index) => import_react103.default.createElement("div", {
    key: index,
    className: `${classPrefix10}-mark-cell`
  }, item)));
  return withNativeProps(props, import_react103.default.createElement("div", {
    className: classPrefix10
  }, header, mark, body));
});

// node_modules/antd-mobile/es/components/calendar/index.js
var calendar_default = Calendar;

// node_modules/antd-mobile/es/components/capsule-tabs/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/capsule-tabs/capsule-tabs.css";

// node_modules/antd-mobile/es/components/capsule-tabs/capsule-tabs.js
var import_react107 = __toESM(require_react());
var import_classnames10 = __toESM(require_classnames());

// node_modules/antd-mobile/es/utils/use-resize-effect.js
function useResizeEffect(effect, targetRef) {
  const fn = useMemoizedFn_default(effect);
  useIsomorphicLayoutEffect_default(() => {
    const target = targetRef.current;
    if (!target)
      return;
    if (window.ResizeObserver) {
      let animationFrame;
      const observer = new ResizeObserver(() => {
        animationFrame = window.requestAnimationFrame(() => fn(target));
      });
      observer.observe(target);
      return () => {
        window.cancelAnimationFrame(animationFrame);
        observer.disconnect();
      };
    } else {
      fn(target);
    }
  }, [targetRef]);
}

// node_modules/antd-mobile/es/utils/use-mutation-effect.js
var import_react104 = __toESM(require_react());
function useMutationEffect(effect, targetRef, options) {
  const fn = useMemoizedFn_default(effect);
  (0, import_react104.useEffect)(() => {
    const observer = new MutationObserver(() => {
      fn();
    });
    if (!targetRef.current)
      return;
    observer.observe(targetRef.current, options);
    return () => {
      observer.disconnect();
    };
  }, [targetRef]);
}

// node_modules/antd-mobile/es/utils/bound.js
function bound(position, min3, max3) {
  let ret = position;
  if (min3 !== void 0) {
    ret = Math.max(position, min3);
  }
  if (max3 !== void 0) {
    ret = Math.min(ret, max3);
  }
  return ret;
}

// node_modules/antd-mobile/es/utils/use-isomorphic-update-layout-effect.js
var useIsomorphicUpdateLayoutEffect = createUpdateEffect(useIsomorphicLayoutEffect_default);

// node_modules/antd-mobile/es/utils/use-tab-list-scroll.js
var useTabListScroll = (targetRef, activeIndex) => {
  const [{
    scrollLeft
  }, api] = useSpring(() => ({
    scrollLeft: 0,
    config: {
      tension: 300,
      clamp: true
    }
  }));
  function animate(immediate = false) {
    const container = targetRef.current;
    if (!container)
      return;
    if (activeIndex === void 0)
      return;
    const activeTabWrapper = container.children.item(activeIndex);
    const activeTab = activeTabWrapper.children.item(0);
    const activeTabLeft = activeTab.offsetLeft;
    const activeTabWidth = activeTab.offsetWidth;
    const containerWidth = container.offsetWidth;
    const containerScrollWidth = container.scrollWidth;
    const containerScrollLeft = container.scrollLeft;
    const maxScrollDistance = containerScrollWidth - containerWidth;
    if (maxScrollDistance <= 0)
      return;
    const nextScrollLeft = bound(activeTabLeft - (containerWidth - activeTabWidth) / 2, 0, containerScrollWidth - containerWidth);
    api.start({
      scrollLeft: nextScrollLeft,
      from: {
        scrollLeft: containerScrollLeft
      },
      immediate: immediate && !scrollLeft.isAnimating
    });
  }
  useIsomorphicLayoutEffect_default(() => {
    animate(true);
  }, []);
  useIsomorphicUpdateLayoutEffect(() => {
    animate();
  }, [activeIndex]);
  useMutationEffect(() => {
    animate(true);
  }, targetRef, {
    subtree: true,
    childList: true,
    characterData: true
  });
  return {
    scrollLeft,
    animate
  };
};

// node_modules/antd-mobile/es/components/scroll-mask/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/scroll-mask/scroll-mask.css";

// node_modules/antd-mobile/es/components/scroll-mask/scroll-mask.js
var import_react105 = __toESM(require_react());
var import_classnames9 = __toESM(require_classnames());
var classPrefix11 = `adm-scroll-mask`;
var ScrollMask = (props) => {
  const maskRef = (0, import_react105.useRef)(null);
  const [{
    leftMaskOpacity,
    rightMaskOpacity
  }, api] = useSpring(() => ({
    leftMaskOpacity: 0,
    rightMaskOpacity: 0,
    config: {
      clamp: true
    }
  }));
  const {
    run: updateMask
  } = useThrottleFn_default((immediate = false) => {
    const mask = maskRef.current;
    if (!mask)
      return;
    const scrollEl = props.scrollTrackRef.current;
    if (!scrollEl)
      return;
    const scrollLeft = scrollEl.scrollLeft;
    const showLeftMask = scrollLeft > 0;
    const showRightMask = scrollLeft + scrollEl.offsetWidth < scrollEl.scrollWidth;
    api.start({
      leftMaskOpacity: showLeftMask ? 1 : 0,
      rightMaskOpacity: showRightMask ? 1 : 0,
      immediate
    });
  }, {
    wait: 100,
    trailing: true,
    leading: true
  });
  (0, import_react105.useEffect)(() => {
    updateMask(true);
  }, []);
  (0, import_react105.useEffect)(() => {
    const scrollEl = props.scrollTrackRef.current;
    if (!scrollEl)
      return;
    scrollEl.addEventListener("scroll", updateMask);
    return () => scrollEl.removeEventListener("scroll", updateMask);
  }, []);
  return import_react105.default.createElement(import_react105.default.Fragment, null, import_react105.default.createElement(animated.div, {
    ref: maskRef,
    className: (0, import_classnames9.default)(classPrefix11, `${classPrefix11}-left`),
    style: {
      opacity: leftMaskOpacity
    }
  }), import_react105.default.createElement(animated.div, {
    className: (0, import_classnames9.default)(classPrefix11, `${classPrefix11}-right`),
    style: {
      opacity: rightMaskOpacity
    }
  }));
};

// node_modules/antd-mobile/es/components/scroll-mask/index.js
var scroll_mask_default = ScrollMask;

// node_modules/antd-mobile/es/utils/traverse-react-node.js
var import_react106 = __toESM(require_react());
var import_react_is = __toESM(require_react_is());
function traverseReactNode(children, fn) {
  let i = 0;
  function handle(target) {
    import_react106.default.Children.forEach(target, (child) => {
      if (!(0, import_react_is.isFragment)(child)) {
        fn(child, i);
        i += 1;
      } else {
        handle(child.props.children);
      }
    });
  }
  handle(children);
}

// node_modules/antd-mobile/es/components/capsule-tabs/capsule-tabs.js
var classPrefix12 = `adm-capsule-tabs`;
var CapsuleTab = () => {
  return null;
};
var CapsuleTabs = (props) => {
  var _a;
  const tabListContainerRef = (0, import_react107.useRef)(null);
  const rootRef = (0, import_react107.useRef)(null);
  const keyToIndexRecord = {};
  let firstActiveKey = null;
  const panes = [];
  traverseReactNode(props.children, (child, index) => {
    if (!import_react107.default.isValidElement(child))
      return;
    const key = child.key;
    if (typeof key !== "string")
      return;
    if (index === 0) {
      firstActiveKey = key;
    }
    const length = panes.push(child);
    keyToIndexRecord[key] = length - 1;
  });
  const [activeKey, setActiveKey] = usePropsValue({
    value: props.activeKey,
    defaultValue: (_a = props.defaultActiveKey) !== null && _a !== void 0 ? _a : firstActiveKey,
    onChange: (v) => {
      var _a2;
      if (v === null)
        return;
      (_a2 = props.onChange) === null || _a2 === void 0 ? void 0 : _a2.call(props, v);
    }
  });
  const {
    scrollLeft,
    animate
  } = useTabListScroll(tabListContainerRef, keyToIndexRecord[activeKey]);
  useResizeEffect(() => {
    animate(true);
  }, rootRef);
  return withNativeProps(props, import_react107.default.createElement("div", {
    className: classPrefix12,
    ref: rootRef
  }, import_react107.default.createElement("div", {
    className: `${classPrefix12}-header`
  }, import_react107.default.createElement(scroll_mask_default, {
    scrollTrackRef: tabListContainerRef
  }), import_react107.default.createElement(animated.div, {
    className: `${classPrefix12}-tab-list`,
    ref: tabListContainerRef,
    scrollLeft
  }, panes.map((pane) => withNativeProps(pane.props, import_react107.default.createElement("div", {
    key: pane.key,
    className: `${classPrefix12}-tab-wrapper`
  }, import_react107.default.createElement("div", {
    onClick: () => {
      const {
        key
      } = pane;
      if (pane.props.disabled)
        return;
      if (key === void 0 || key === null) {
        return;
      }
      setActiveKey(key.toString());
    },
    className: (0, import_classnames10.default)(`${classPrefix12}-tab`, {
      [`${classPrefix12}-tab-active`]: pane.key === activeKey,
      [`${classPrefix12}-tab-disabled`]: pane.props.disabled
    })
  }, pane.props.title)))))), panes.map((pane) => {
    if (pane.props.children === void 0) {
      return null;
    }
    const active = pane.key === activeKey;
    return import_react107.default.createElement(ShouldRender, {
      key: pane.key,
      active,
      forceRender: pane.props.forceRender,
      destroyOnClose: pane.props.destroyOnClose
    }, import_react107.default.createElement("div", {
      className: `${classPrefix12}-content`,
      style: {
        display: active ? "block" : "none"
      }
    }, pane.props.children));
  })));
};

// node_modules/antd-mobile/es/components/capsule-tabs/index.js
var capsule_tabs_default = attachPropertiesToComponent(CapsuleTabs, {
  Tab: CapsuleTab
});

// node_modules/antd-mobile/es/components/card/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/card/card.css";

// node_modules/antd-mobile/es/components/card/card.js
var import_react108 = __toESM(require_react());
var import_classnames11 = __toESM(require_classnames());
var classPrefix13 = `adm-card`;
var Card = (props) => {
  const renderHeader = () => {
    if (!(props.title || props.extra)) {
      return null;
    }
    return import_react108.default.createElement("div", {
      className: (0, import_classnames11.default)(`${classPrefix13}-header`, props.headerClassName),
      style: props.headerStyle,
      onClick: props.onHeaderClick
    }, import_react108.default.createElement("div", {
      className: `${classPrefix13}-header-title`
    }, props.title), props.extra);
  };
  const renderBody = () => {
    if (!props.children) {
      return null;
    }
    return import_react108.default.createElement("div", {
      className: (0, import_classnames11.default)(`${classPrefix13}-body`, props.bodyClassName),
      style: props.bodyStyle,
      onClick: props.onBodyClick
    }, props.children);
  };
  return withNativeProps(props, import_react108.default.createElement("div", {
    className: classPrefix13,
    onClick: props.onClick
  }, renderHeader(), renderBody()));
};

// node_modules/antd-mobile/es/components/card/index.js
var card_default = Card;

// node_modules/antd-mobile/es/components/cascade-picker/cascade-picker.js
var import_react118 = __toESM(require_react());

// node_modules/antd-mobile/es/components/picker/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/picker/picker.css";

// node_modules/antd-mobile/es/components/picker/picker.js
var import_react115 = __toESM(require_react());
var import_classnames12 = __toESM(require_classnames());

// node_modules/antd-mobile/es/components/picker-view/picker-view.js
var import_react114 = __toESM(require_react());

// node_modules/antd-mobile/es/components/picker-view/wheel.js
var import_react110 = __toESM(require_react());

// node_modules/@use-gesture/core/dist/maths-b2a210f4.esm.js
function clamp(v, min3, max3) {
  return Math.max(min3, Math.min(v, max3));
}
var V = {
  toVector(v, fallback) {
    if (v === void 0)
      v = fallback;
    return Array.isArray(v) ? v : [v, v];
  },
  add(v1, v2) {
    return [v1[0] + v2[0], v1[1] + v2[1]];
  },
  sub(v1, v2) {
    return [v1[0] - v2[0], v1[1] - v2[1]];
  },
  addTo(v1, v2) {
    v1[0] += v2[0];
    v1[1] += v2[1];
  },
  subTo(v1, v2) {
    v1[0] -= v2[0];
    v1[1] -= v2[1];
  }
};
function rubberband(distance, dimension, constant) {
  if (dimension === 0 || Math.abs(dimension) === Infinity)
    return Math.pow(distance, constant * 5);
  return distance * dimension * constant / (dimension + constant * distance);
}
function rubberbandIfOutOfBounds(position, min3, max3, constant = 0.15) {
  if (constant === 0)
    return clamp(position, min3, max3);
  if (position < min3)
    return -rubberband(min3 - position, max3 - min3, constant) + min3;
  if (position > max3)
    return +rubberband(position - max3, max3 - min3, constant) + max3;
  return position;
}
function computeRubberband(bounds, [Vx, Vy], [Rx, Ry]) {
  const [[X0, X1], [Y0, Y1]] = bounds;
  return [rubberbandIfOutOfBounds(Vx, X0, X1, Rx), rubberbandIfOutOfBounds(Vy, Y0, Y1, Ry)];
}

// node_modules/@use-gesture/core/dist/actions-65020aef.esm.js
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), true).forEach(function(key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
var EVENT_TYPE_MAP = {
  pointer: {
    start: "down",
    change: "move",
    end: "up"
  },
  mouse: {
    start: "down",
    change: "move",
    end: "up"
  },
  touch: {
    start: "start",
    change: "move",
    end: "end"
  },
  gesture: {
    start: "start",
    change: "change",
    end: "end"
  }
};
function capitalize(string) {
  if (!string)
    return "";
  return string[0].toUpperCase() + string.slice(1);
}
var actionsWithoutCaptureSupported = ["enter", "leave"];
function hasCapture(capture = false, actionKey) {
  return capture && !actionsWithoutCaptureSupported.includes(actionKey);
}
function toHandlerProp(device, action = "", capture = false) {
  const deviceProps = EVENT_TYPE_MAP[device];
  const actionKey = deviceProps ? deviceProps[action] || action : action;
  return "on" + capitalize(device) + capitalize(actionKey) + (hasCapture(capture, actionKey) ? "Capture" : "");
}
var pointerCaptureEvents = ["gotpointercapture", "lostpointercapture"];
function parseProp(prop) {
  let eventKey = prop.substring(2).toLowerCase();
  const passive = !!~eventKey.indexOf("passive");
  if (passive)
    eventKey = eventKey.replace("passive", "");
  const captureKey = pointerCaptureEvents.includes(eventKey) ? "capturecapture" : "capture";
  const capture = !!~eventKey.indexOf(captureKey);
  if (capture)
    eventKey = eventKey.replace("capture", "");
  return {
    device: eventKey,
    capture,
    passive
  };
}
function toDomEventType(device, action = "") {
  const deviceProps = EVENT_TYPE_MAP[device];
  const actionKey = deviceProps ? deviceProps[action] || action : action;
  return device + actionKey;
}
function isTouch(event) {
  return "touches" in event;
}
function getPointerType(event) {
  if (isTouch(event))
    return "touch";
  if ("pointerType" in event)
    return event.pointerType;
  return "mouse";
}
function getCurrentTargetTouchList(event) {
  return Array.from(event.touches).filter((e) => {
    var _event$currentTarget, _event$currentTarget$;
    return e.target === event.currentTarget || ((_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 ? void 0 : (_event$currentTarget$ = _event$currentTarget.contains) === null || _event$currentTarget$ === void 0 ? void 0 : _event$currentTarget$.call(_event$currentTarget, e.target));
  });
}
function getTouchList(event) {
  return event.type === "touchend" || event.type === "touchcancel" ? event.changedTouches : event.targetTouches;
}
function getValueEvent(event) {
  return isTouch(event) ? getTouchList(event)[0] : event;
}
function distanceAngle(P1, P2) {
  const dx = P2.clientX - P1.clientX;
  const dy = P2.clientY - P1.clientY;
  const cx = (P2.clientX + P1.clientX) / 2;
  const cy = (P2.clientY + P1.clientY) / 2;
  const distance = Math.hypot(dx, dy);
  const angle = -(Math.atan2(dx, dy) * 180) / Math.PI;
  const origin = [cx, cy];
  return {
    angle,
    distance,
    origin
  };
}
function touchIds(event) {
  return getCurrentTargetTouchList(event).map((touch) => touch.identifier);
}
function touchDistanceAngle(event, ids) {
  const [P1, P2] = Array.from(event.touches).filter((touch) => ids.includes(touch.identifier));
  return distanceAngle(P1, P2);
}
function pointerId(event) {
  const valueEvent = getValueEvent(event);
  return isTouch(event) ? valueEvent.identifier : valueEvent.pointerId;
}
function pointerValues(event) {
  const valueEvent = getValueEvent(event);
  return [valueEvent.clientX, valueEvent.clientY];
}
var LINE_HEIGHT = 40;
var PAGE_HEIGHT = 800;
function wheelValues(event) {
  let {
    deltaX,
    deltaY,
    deltaMode
  } = event;
  if (deltaMode === 1) {
    deltaX *= LINE_HEIGHT;
    deltaY *= LINE_HEIGHT;
  } else if (deltaMode === 2) {
    deltaX *= PAGE_HEIGHT;
    deltaY *= PAGE_HEIGHT;
  }
  return [deltaX, deltaY];
}
function getEventDetails(event) {
  const payload = {};
  if ("buttons" in event)
    payload.buttons = event.buttons;
  if ("shiftKey" in event) {
    const {
      shiftKey,
      altKey,
      metaKey,
      ctrlKey
    } = event;
    Object.assign(payload, {
      shiftKey,
      altKey,
      metaKey,
      ctrlKey
    });
  }
  return payload;
}
function call2(v, ...args) {
  if (typeof v === "function") {
    return v(...args);
  } else {
    return v;
  }
}
function noop2() {
}
function chain(...fns) {
  if (fns.length === 0)
    return noop2;
  if (fns.length === 1)
    return fns[0];
  return function() {
    let result;
    for (const fn of fns) {
      result = fn.apply(this, arguments) || result;
    }
    return result;
  };
}
function assignDefault(value, fallback) {
  return Object.assign({}, fallback, value || {});
}
var BEFORE_LAST_KINEMATICS_DELAY = 32;
var Engine = class {
  constructor(ctrl, args, key) {
    this.ctrl = ctrl;
    this.args = args;
    this.key = key;
    if (!this.state) {
      this.state = {};
      this.computeValues([0, 0]);
      this.computeInitial();
      if (this.init)
        this.init();
      this.reset();
    }
  }
  get state() {
    return this.ctrl.state[this.key];
  }
  set state(state) {
    this.ctrl.state[this.key] = state;
  }
  get shared() {
    return this.ctrl.state.shared;
  }
  get eventStore() {
    return this.ctrl.gestureEventStores[this.key];
  }
  get timeoutStore() {
    return this.ctrl.gestureTimeoutStores[this.key];
  }
  get config() {
    return this.ctrl.config[this.key];
  }
  get sharedConfig() {
    return this.ctrl.config.shared;
  }
  get handler() {
    return this.ctrl.handlers[this.key];
  }
  reset() {
    const {
      state,
      shared,
      ingKey,
      args
    } = this;
    shared[ingKey] = state._active = state.active = state._blocked = state._force = false;
    state._step = [false, false];
    state.intentional = false;
    state._movement = [0, 0];
    state._distance = [0, 0];
    state._direction = [0, 0];
    state._delta = [0, 0];
    state._bounds = [[-Infinity, Infinity], [-Infinity, Infinity]];
    state.args = args;
    state.axis = void 0;
    state.memo = void 0;
    state.elapsedTime = 0;
    state.direction = [0, 0];
    state.distance = [0, 0];
    state.overflow = [0, 0];
    state._movementBound = [false, false];
    state.velocity = [0, 0];
    state.movement = [0, 0];
    state.delta = [0, 0];
    state.timeStamp = 0;
  }
  start(event) {
    const state = this.state;
    const config3 = this.config;
    if (!state._active) {
      this.reset();
      this.computeInitial();
      state._active = true;
      state.target = event.target;
      state.currentTarget = event.currentTarget;
      state.lastOffset = config3.from ? call2(config3.from, state) : state.offset;
      state.offset = state.lastOffset;
    }
    state.startTime = state.timeStamp = event.timeStamp;
  }
  computeValues(values) {
    const state = this.state;
    state._values = values;
    state.values = this.config.transform(values);
  }
  computeInitial() {
    const state = this.state;
    state._initial = state._values;
    state.initial = state.values;
  }
  compute(event) {
    const {
      state,
      config: config3,
      shared
    } = this;
    state.args = this.args;
    let dt = 0;
    if (event) {
      state.event = event;
      if (config3.preventDefault && event.cancelable)
        state.event.preventDefault();
      state.type = event.type;
      shared.touches = this.ctrl.pointerIds.size || this.ctrl.touchIds.size;
      shared.locked = !!document.pointerLockElement;
      Object.assign(shared, getEventDetails(event));
      shared.down = shared.pressed = shared.buttons % 2 === 1 || shared.touches > 0;
      dt = event.timeStamp - state.timeStamp;
      state.timeStamp = event.timeStamp;
      state.elapsedTime = state.timeStamp - state.startTime;
    }
    if (state._active) {
      const _absoluteDelta = state._delta.map(Math.abs);
      V.addTo(state._distance, _absoluteDelta);
    }
    if (this.axisIntent)
      this.axisIntent(event);
    const [_m0, _m1] = state._movement;
    const [t0, t1] = config3.threshold;
    const {
      _step,
      values
    } = state;
    if (config3.hasCustomTransform) {
      if (_step[0] === false)
        _step[0] = Math.abs(_m0) >= t0 && values[0];
      if (_step[1] === false)
        _step[1] = Math.abs(_m1) >= t1 && values[1];
    } else {
      if (_step[0] === false)
        _step[0] = Math.abs(_m0) >= t0 && Math.sign(_m0) * t0;
      if (_step[1] === false)
        _step[1] = Math.abs(_m1) >= t1 && Math.sign(_m1) * t1;
    }
    state.intentional = _step[0] !== false || _step[1] !== false;
    if (!state.intentional)
      return;
    const movement = [0, 0];
    if (config3.hasCustomTransform) {
      const [v0, v1] = values;
      movement[0] = _step[0] !== false ? v0 - _step[0] : 0;
      movement[1] = _step[1] !== false ? v1 - _step[1] : 0;
    } else {
      movement[0] = _step[0] !== false ? _m0 - _step[0] : 0;
      movement[1] = _step[1] !== false ? _m1 - _step[1] : 0;
    }
    if (this.restrictToAxis && !state._blocked)
      this.restrictToAxis(movement);
    const previousOffset = state.offset;
    const gestureIsActive = state._active && !state._blocked || state.active;
    if (gestureIsActive) {
      state.first = state._active && !state.active;
      state.last = !state._active && state.active;
      state.active = shared[this.ingKey] = state._active;
      if (event) {
        if (state.first) {
          if ("bounds" in config3)
            state._bounds = call2(config3.bounds, state);
          if (this.setup)
            this.setup();
        }
        state.movement = movement;
        this.computeOffset();
      }
    }
    const [ox, oy] = state.offset;
    const [[x0, x1], [y0, y1]] = state._bounds;
    state.overflow = [ox < x0 ? -1 : ox > x1 ? 1 : 0, oy < y0 ? -1 : oy > y1 ? 1 : 0];
    state._movementBound[0] = state.overflow[0] ? state._movementBound[0] === false ? state._movement[0] : state._movementBound[0] : false;
    state._movementBound[1] = state.overflow[1] ? state._movementBound[1] === false ? state._movement[1] : state._movementBound[1] : false;
    const rubberband3 = state._active ? config3.rubberband || [0, 0] : [0, 0];
    state.offset = computeRubberband(state._bounds, state.offset, rubberband3);
    state.delta = V.sub(state.offset, previousOffset);
    this.computeMovement();
    if (gestureIsActive && (!state.last || dt > BEFORE_LAST_KINEMATICS_DELAY)) {
      state.delta = V.sub(state.offset, previousOffset);
      const absoluteDelta = state.delta.map(Math.abs);
      V.addTo(state.distance, absoluteDelta);
      state.direction = state.delta.map(Math.sign);
      state._direction = state._delta.map(Math.sign);
      if (!state.first && dt > 0) {
        state.velocity = [absoluteDelta[0] / dt, absoluteDelta[1] / dt];
      }
    }
  }
  emit() {
    const state = this.state;
    const shared = this.shared;
    const config3 = this.config;
    if (!state._active)
      this.clean();
    if ((state._blocked || !state.intentional) && !state._force && !config3.triggerAllEvents)
      return;
    const memo16 = this.handler(_objectSpread2(_objectSpread2(_objectSpread2({}, shared), state), {}, {
      [this.aliasKey]: state.values
    }));
    if (memo16 !== void 0)
      state.memo = memo16;
  }
  clean() {
    this.eventStore.clean();
    this.timeoutStore.clean();
  }
};
function selectAxis([dx, dy], threshold) {
  const absDx = Math.abs(dx);
  const absDy = Math.abs(dy);
  if (absDx > absDy && absDx > threshold) {
    return "x";
  }
  if (absDy > absDx && absDy > threshold) {
    return "y";
  }
  return void 0;
}
var CoordinatesEngine = class extends Engine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "aliasKey", "xy");
  }
  reset() {
    super.reset();
    this.state.axis = void 0;
  }
  init() {
    this.state.offset = [0, 0];
    this.state.lastOffset = [0, 0];
  }
  computeOffset() {
    this.state.offset = V.add(this.state.lastOffset, this.state.movement);
  }
  computeMovement() {
    this.state.movement = V.sub(this.state.offset, this.state.lastOffset);
  }
  axisIntent(event) {
    const state = this.state;
    const config3 = this.config;
    if (!state.axis && event) {
      const threshold = typeof config3.axisThreshold === "object" ? config3.axisThreshold[getPointerType(event)] : config3.axisThreshold;
      state.axis = selectAxis(state._movement, threshold);
    }
    state._blocked = (config3.lockDirection || !!config3.axis) && !state.axis || !!config3.axis && config3.axis !== state.axis;
  }
  restrictToAxis(v) {
    if (this.config.axis || this.config.lockDirection) {
      switch (this.state.axis) {
        case "x":
          v[1] = 0;
          break;
        case "y":
          v[0] = 0;
          break;
      }
    }
  }
};
var identity = (v) => v;
var DEFAULT_RUBBERBAND = 0.15;
var commonConfigResolver = {
  enabled(value = true) {
    return value;
  },
  eventOptions(value, _k, config3) {
    return _objectSpread2(_objectSpread2({}, config3.shared.eventOptions), value);
  },
  preventDefault(value = false) {
    return value;
  },
  triggerAllEvents(value = false) {
    return value;
  },
  rubberband(value = 0) {
    switch (value) {
      case true:
        return [DEFAULT_RUBBERBAND, DEFAULT_RUBBERBAND];
      case false:
        return [0, 0];
      default:
        return V.toVector(value);
    }
  },
  from(value) {
    if (typeof value === "function")
      return value;
    if (value != null)
      return V.toVector(value);
  },
  transform(value, _k, config3) {
    const transform = value || config3.shared.transform;
    this.hasCustomTransform = !!transform;
    if (true) {
      const originalTransform = transform || identity;
      return (v) => {
        const r = originalTransform(v);
        if (!isFinite(r[0]) || !isFinite(r[1])) {
          console.warn(`[@use-gesture]: config.transform() must produce a valid result, but it was: [${r[0]},${[1]}]`);
        }
        return r;
      };
    }
    return transform || identity;
  },
  threshold(value) {
    return V.toVector(value, 0);
  }
};
if (true) {
  Object.assign(commonConfigResolver, {
    domTarget(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`domTarget\` option has been renamed to \`target\`.`);
      }
      return NaN;
    },
    lockDirection(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`lockDirection\` option has been merged with \`axis\`. Use it as in \`{ axis: 'lock' }\``);
      }
      return NaN;
    },
    initial(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`initial\` option has been renamed to \`from\`.`);
      }
      return NaN;
    }
  });
}
var DEFAULT_AXIS_THRESHOLD = 0;
var coordinatesConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {
  axis(_v, _k, {
    axis
  }) {
    this.lockDirection = axis === "lock";
    if (!this.lockDirection)
      return axis;
  },
  axisThreshold(value = DEFAULT_AXIS_THRESHOLD) {
    return value;
  },
  bounds(value = {}) {
    if (typeof value === "function") {
      return (state) => coordinatesConfigResolver.bounds(value(state));
    }
    if ("current" in value) {
      return () => value.current;
    }
    if (typeof HTMLElement === "function" && value instanceof HTMLElement) {
      return value;
    }
    const {
      left = -Infinity,
      right = Infinity,
      top = -Infinity,
      bottom = Infinity
    } = value;
    return [[left, right], [top, bottom]];
  }
});
var DISPLACEMENT = 10;
var KEYS_DELTA_MAP = {
  ArrowRight: (factor = 1) => [DISPLACEMENT * factor, 0],
  ArrowLeft: (factor = 1) => [-DISPLACEMENT * factor, 0],
  ArrowUp: (factor = 1) => [0, -DISPLACEMENT * factor],
  ArrowDown: (factor = 1) => [0, DISPLACEMENT * factor]
};
var DragEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "dragging");
  }
  reset() {
    super.reset();
    const state = this.state;
    state._pointerId = void 0;
    state._pointerActive = false;
    state._keyboardActive = false;
    state._preventScroll = false;
    state._delayed = false;
    state.swipe = [0, 0];
    state.tap = false;
    state.canceled = false;
    state.cancel = this.cancel.bind(this);
  }
  setup() {
    const state = this.state;
    if (state._bounds instanceof HTMLElement) {
      const boundRect = state._bounds.getBoundingClientRect();
      const targetRect = state.currentTarget.getBoundingClientRect();
      const _bounds = {
        left: boundRect.left - targetRect.left + state.offset[0],
        right: boundRect.right - targetRect.right + state.offset[0],
        top: boundRect.top - targetRect.top + state.offset[1],
        bottom: boundRect.bottom - targetRect.bottom + state.offset[1]
      };
      state._bounds = coordinatesConfigResolver.bounds(_bounds);
    }
  }
  cancel() {
    const state = this.state;
    if (state.canceled)
      return;
    state.canceled = true;
    state._active = false;
    setTimeout(() => {
      this.compute();
      this.emit();
    }, 0);
  }
  setActive() {
    this.state._active = this.state._pointerActive || this.state._keyboardActive;
  }
  clean() {
    this.pointerClean();
    this.state._pointerActive = false;
    this.state._keyboardActive = false;
    super.clean();
  }
  pointerDown(event) {
    const config3 = this.config;
    const state = this.state;
    if (event.buttons != null && (Array.isArray(config3.pointerButtons) ? !config3.pointerButtons.includes(event.buttons) : config3.pointerButtons !== -1 && config3.pointerButtons !== event.buttons))
      return;
    const ctrlIds = this.ctrl.setEventIds(event);
    if (config3.pointerCapture) {
      event.target.setPointerCapture(event.pointerId);
    }
    if (ctrlIds && ctrlIds.size > 1 && state._pointerActive)
      return;
    this.start(event);
    this.setupPointer(event);
    state._pointerId = pointerId(event);
    state._pointerActive = true;
    this.computeValues(pointerValues(event));
    this.computeInitial();
    if (config3.preventScrollAxis && getPointerType(event) !== "mouse") {
      state._active = false;
      this.setupScrollPrevention(event);
    } else if (config3.delay > 0) {
      this.setupDelayTrigger(event);
      if (config3.triggerAllEvents) {
        this.compute(event);
        this.emit();
      }
    } else {
      this.startPointerDrag(event);
    }
  }
  startPointerDrag(event) {
    const state = this.state;
    state._active = true;
    state._preventScroll = true;
    state._delayed = false;
    this.compute(event);
    this.emit();
  }
  pointerMove(event) {
    const state = this.state;
    const config3 = this.config;
    if (!state._pointerActive)
      return;
    if (state.type === event.type && event.timeStamp === state.timeStamp)
      return;
    const id = pointerId(event);
    if (state._pointerId !== void 0 && id !== state._pointerId)
      return;
    const _values = pointerValues(event);
    if (document.pointerLockElement === event.target) {
      state._delta = [event.movementX, event.movementY];
    } else {
      state._delta = V.sub(_values, state._values);
      this.computeValues(_values);
    }
    V.addTo(state._movement, state._delta);
    this.compute(event);
    if (state._delayed && state.intentional) {
      this.timeoutStore.remove("dragDelay");
      state.active = false;
      this.startPointerDrag(event);
      return;
    }
    if (config3.preventScrollAxis && !state._preventScroll) {
      if (state.axis) {
        if (state.axis === config3.preventScrollAxis || config3.preventScrollAxis === "xy") {
          state._active = false;
          this.clean();
          return;
        } else {
          this.timeoutStore.remove("startPointerDrag");
          this.startPointerDrag(event);
          return;
        }
      } else {
        return;
      }
    }
    this.emit();
  }
  pointerUp(event) {
    this.ctrl.setEventIds(event);
    try {
      if (this.config.pointerCapture && event.target.hasPointerCapture(event.pointerId)) {
        ;
        event.target.releasePointerCapture(event.pointerId);
      }
    } catch (_unused) {
      if (true) {
        console.warn(`[@use-gesture]: If you see this message, it's likely that you're using an outdated version of \`@react-three/fiber\`. 

Please upgrade to the latest version.`);
      }
    }
    const state = this.state;
    const config3 = this.config;
    if (!state._active || !state._pointerActive)
      return;
    const id = pointerId(event);
    if (state._pointerId !== void 0 && id !== state._pointerId)
      return;
    this.state._pointerActive = false;
    this.setActive();
    this.compute(event);
    const [dx, dy] = state._distance;
    state.tap = dx <= config3.tapsThreshold && dy <= config3.tapsThreshold;
    if (state.tap && config3.filterTaps) {
      state._force = true;
    } else {
      const [dirx, diry] = state.direction;
      const [vx, vy] = state.velocity;
      const [mx, my] = state.movement;
      const [svx, svy] = config3.swipe.velocity;
      const [sx, sy] = config3.swipe.distance;
      const sdt = config3.swipe.duration;
      if (state.elapsedTime < sdt) {
        if (Math.abs(vx) > svx && Math.abs(mx) > sx)
          state.swipe[0] = dirx;
        if (Math.abs(vy) > svy && Math.abs(my) > sy)
          state.swipe[1] = diry;
      }
    }
    this.emit();
  }
  pointerClick(event) {
    if (!this.state.tap) {
      event.preventDefault();
      event.stopPropagation();
    }
  }
  setupPointer(event) {
    const config3 = this.config;
    const device = config3.device;
    if (true) {
      try {
        if (device === "pointer" && config3.preventScrollDelay === void 0) {
          const currentTarget = "uv" in event ? event.sourceEvent.currentTarget : event.currentTarget;
          const style = window.getComputedStyle(currentTarget);
          if (style.touchAction === "auto") {
            console.warn(`[@use-gesture]: The drag target has its \`touch-action\` style property set to \`auto\`. It is recommended to add \`touch-action: 'none'\` so that the drag gesture behaves correctly on touch-enabled devices. For more information read this: https://use-gesture.netlify.app/docs/extras/#touch-action.

This message will only show in development mode. It won't appear in production. If this is intended, you can ignore it.`, currentTarget);
          }
        }
      } catch (_unused2) {
      }
    }
    if (config3.pointerLock) {
      event.currentTarget.requestPointerLock();
    }
    if (!config3.pointerCapture) {
      this.eventStore.add(this.sharedConfig.window, device, "change", this.pointerMove.bind(this));
      this.eventStore.add(this.sharedConfig.window, device, "end", this.pointerUp.bind(this));
      this.eventStore.add(this.sharedConfig.window, device, "cancel", this.pointerUp.bind(this));
    }
  }
  pointerClean() {
    if (this.config.pointerLock && document.pointerLockElement === this.state.currentTarget) {
      document.exitPointerLock();
    }
  }
  preventScroll(event) {
    if (this.state._preventScroll && event.cancelable) {
      event.preventDefault();
    }
  }
  setupScrollPrevention(event) {
    this.state._preventScroll = false;
    persistEvent(event);
    const remove = this.eventStore.add(this.sharedConfig.window, "touch", "change", this.preventScroll.bind(this), {
      passive: false
    });
    this.eventStore.add(this.sharedConfig.window, "touch", "end", remove);
    this.eventStore.add(this.sharedConfig.window, "touch", "cancel", remove);
    this.timeoutStore.add("startPointerDrag", this.startPointerDrag.bind(this), this.config.preventScrollDelay, event);
  }
  setupDelayTrigger(event) {
    this.state._delayed = true;
    this.timeoutStore.add("dragDelay", () => {
      this.state._step = [0, 0];
      this.startPointerDrag(event);
    }, this.config.delay);
  }
  keyDown(event) {
    const deltaFn = KEYS_DELTA_MAP[event.key];
    if (deltaFn) {
      const state = this.state;
      const factor = event.shiftKey ? 10 : event.altKey ? 0.1 : 1;
      this.start(event);
      state._delta = deltaFn(factor);
      state._keyboardActive = true;
      V.addTo(state._movement, state._delta);
      this.compute(event);
      this.emit();
    }
  }
  keyUp(event) {
    if (!(event.key in KEYS_DELTA_MAP))
      return;
    this.state._keyboardActive = false;
    this.setActive();
    this.compute(event);
    this.emit();
  }
  bind(bindFunction) {
    const device = this.config.device;
    bindFunction(device, "start", this.pointerDown.bind(this));
    if (this.config.pointerCapture) {
      bindFunction(device, "change", this.pointerMove.bind(this));
      bindFunction(device, "end", this.pointerUp.bind(this));
      bindFunction(device, "cancel", this.pointerUp.bind(this));
      bindFunction("lostPointerCapture", "", this.pointerUp.bind(this));
    }
    if (this.config.keys) {
      bindFunction("key", "down", this.keyDown.bind(this));
      bindFunction("key", "up", this.keyUp.bind(this));
    }
    if (this.config.filterTaps) {
      bindFunction("click", "", this.pointerClick.bind(this), {
        capture: true,
        passive: false
      });
    }
  }
};
function persistEvent(event) {
  "persist" in event && typeof event.persist === "function" && event.persist();
}
var isBrowser2 = typeof window !== "undefined" && window.document && window.document.createElement;
function supportsTouchEvents() {
  return isBrowser2 && "ontouchstart" in window;
}
function isTouchScreen() {
  return supportsTouchEvents() || isBrowser2 && window.navigator.maxTouchPoints > 1;
}
function supportsPointerEvents() {
  return isBrowser2 && "onpointerdown" in window;
}
function supportsPointerLock() {
  return isBrowser2 && "exitPointerLock" in window.document;
}
function supportsGestureEvents() {
  try {
    return "constructor" in GestureEvent;
  } catch (e) {
    return false;
  }
}
var SUPPORT = {
  isBrowser: isBrowser2,
  gesture: supportsGestureEvents(),
  touch: isTouchScreen(),
  touchscreen: isTouchScreen(),
  pointer: supportsPointerEvents(),
  pointerLock: supportsPointerLock()
};
var DEFAULT_PREVENT_SCROLL_DELAY = 250;
var DEFAULT_DRAG_DELAY = 180;
var DEFAULT_SWIPE_VELOCITY = 0.5;
var DEFAULT_SWIPE_DISTANCE = 50;
var DEFAULT_SWIPE_DURATION = 250;
var DEFAULT_DRAG_AXIS_THRESHOLD = {
  mouse: 0,
  touch: 0,
  pen: 8
};
var dragConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
  device(_v, _k, {
    pointer: {
      touch = false,
      lock = false,
      mouse = false
    } = {}
  }) {
    this.pointerLock = lock && SUPPORT.pointerLock;
    if (SUPPORT.touch && touch)
      return "touch";
    if (this.pointerLock)
      return "mouse";
    if (SUPPORT.pointer && !mouse)
      return "pointer";
    if (SUPPORT.touch)
      return "touch";
    return "mouse";
  },
  preventScrollAxis(value, _k, {
    preventScroll
  }) {
    this.preventScrollDelay = typeof preventScroll === "number" ? preventScroll : preventScroll || preventScroll === void 0 && value ? DEFAULT_PREVENT_SCROLL_DELAY : void 0;
    if (!SUPPORT.touchscreen || preventScroll === false)
      return void 0;
    return value ? value : preventScroll !== void 0 ? "y" : void 0;
  },
  pointerCapture(_v, _k, {
    pointer: {
      capture = true,
      buttons = 1
    } = {}
  }) {
    this.pointerButtons = buttons;
    return !this.pointerLock && this.device === "pointer" && capture;
  },
  keys(value = true) {
    return value;
  },
  threshold(value, _k, {
    filterTaps = false,
    tapsThreshold = 3,
    axis = void 0
  }) {
    const threshold = V.toVector(value, filterTaps ? tapsThreshold : axis ? 1 : 0);
    this.filterTaps = filterTaps;
    this.tapsThreshold = tapsThreshold;
    return threshold;
  },
  swipe({
    velocity = DEFAULT_SWIPE_VELOCITY,
    distance = DEFAULT_SWIPE_DISTANCE,
    duration = DEFAULT_SWIPE_DURATION
  } = {}) {
    return {
      velocity: this.transform(V.toVector(velocity)),
      distance: this.transform(V.toVector(distance)),
      duration
    };
  },
  delay(value = 0) {
    switch (value) {
      case true:
        return DEFAULT_DRAG_DELAY;
      case false:
        return 0;
      default:
        return value;
    }
  },
  axisThreshold(value) {
    if (!value)
      return DEFAULT_DRAG_AXIS_THRESHOLD;
    return _objectSpread2(_objectSpread2({}, DEFAULT_DRAG_AXIS_THRESHOLD), value);
  }
});
if (true) {
  Object.assign(dragConfigResolver, {
    useTouch(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`useTouch\` option has been renamed to \`pointer.touch\`. Use it as in \`{ pointer: { touch: true } }\`.`);
      }
      return NaN;
    },
    experimental_preventWindowScrollY(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`experimental_preventWindowScrollY\` option has been renamed to \`preventScroll\`.`);
      }
      return NaN;
    },
    swipeVelocity(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`swipeVelocity\` option has been renamed to \`swipe.velocity\`. Use it as in \`{ swipe: { velocity: 0.5 } }\`.`);
      }
      return NaN;
    },
    swipeDistance(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`swipeDistance\` option has been renamed to \`swipe.distance\`. Use it as in \`{ swipe: { distance: 50 } }\`.`);
      }
      return NaN;
    },
    swipeDuration(value) {
      if (value !== void 0) {
        throw Error(`[@use-gesture]: \`swipeDuration\` option has been renamed to \`swipe.duration\`. Use it as in \`{ swipe: { duration: 250 } }\`.`);
      }
      return NaN;
    }
  });
}
var SCALE_ANGLE_RATIO_INTENT_DEG = 30;
var PINCH_WHEEL_RATIO = 100;
var PinchEngine = class extends Engine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "pinching");
    _defineProperty(this, "aliasKey", "da");
  }
  init() {
    this.state.offset = [1, 0];
    this.state.lastOffset = [1, 0];
    this.state._pointerEvents = /* @__PURE__ */ new Map();
  }
  reset() {
    super.reset();
    const state = this.state;
    state._touchIds = [];
    state.canceled = false;
    state.cancel = this.cancel.bind(this);
    state.turns = 0;
  }
  computeOffset() {
    const {
      type,
      movement,
      lastOffset
    } = this.state;
    if (type === "wheel") {
      this.state.offset = V.add(movement, lastOffset);
    } else {
      this.state.offset = [(1 + movement[0]) * lastOffset[0], movement[1] + lastOffset[1]];
    }
  }
  computeMovement() {
    const {
      offset: offset2,
      lastOffset
    } = this.state;
    this.state.movement = [offset2[0] / lastOffset[0], offset2[1] - lastOffset[1]];
  }
  axisIntent() {
    const state = this.state;
    const [_m0, _m1] = state._movement;
    if (!state.axis) {
      const axisMovementDifference = Math.abs(_m0) * SCALE_ANGLE_RATIO_INTENT_DEG - Math.abs(_m1);
      if (axisMovementDifference < 0)
        state.axis = "angle";
      else if (axisMovementDifference > 0)
        state.axis = "scale";
    }
  }
  restrictToAxis(v) {
    if (this.config.lockDirection) {
      if (this.state.axis === "scale")
        v[1] = 0;
      else if (this.state.axis === "angle")
        v[0] = 0;
    }
  }
  cancel() {
    const state = this.state;
    if (state.canceled)
      return;
    setTimeout(() => {
      state.canceled = true;
      state._active = false;
      this.compute();
      this.emit();
    }, 0);
  }
  touchStart(event) {
    this.ctrl.setEventIds(event);
    const state = this.state;
    const ctrlTouchIds = this.ctrl.touchIds;
    if (state._active) {
      if (state._touchIds.every((id) => ctrlTouchIds.has(id)))
        return;
    }
    if (ctrlTouchIds.size < 2)
      return;
    this.start(event);
    state._touchIds = Array.from(ctrlTouchIds).slice(0, 2);
    const payload = touchDistanceAngle(event, state._touchIds);
    this.pinchStart(event, payload);
  }
  pointerStart(event) {
    if (event.buttons != null && event.buttons % 2 !== 1)
      return;
    this.ctrl.setEventIds(event);
    event.target.setPointerCapture(event.pointerId);
    const state = this.state;
    const _pointerEvents = state._pointerEvents;
    const ctrlPointerIds = this.ctrl.pointerIds;
    if (state._active) {
      if (Array.from(_pointerEvents.keys()).every((id) => ctrlPointerIds.has(id)))
        return;
    }
    if (_pointerEvents.size < 2) {
      _pointerEvents.set(event.pointerId, event);
    }
    if (state._pointerEvents.size < 2)
      return;
    this.start(event);
    const payload = distanceAngle(...Array.from(_pointerEvents.values()));
    this.pinchStart(event, payload);
  }
  pinchStart(event, payload) {
    const state = this.state;
    state.origin = payload.origin;
    this.computeValues([payload.distance, payload.angle]);
    this.computeInitial();
    this.compute(event);
    this.emit();
  }
  touchMove(event) {
    if (!this.state._active)
      return;
    const payload = touchDistanceAngle(event, this.state._touchIds);
    this.pinchMove(event, payload);
  }
  pointerMove(event) {
    const _pointerEvents = this.state._pointerEvents;
    if (_pointerEvents.has(event.pointerId)) {
      _pointerEvents.set(event.pointerId, event);
    }
    if (!this.state._active)
      return;
    const payload = distanceAngle(...Array.from(_pointerEvents.values()));
    this.pinchMove(event, payload);
  }
  pinchMove(event, payload) {
    const state = this.state;
    const prev_a = state._values[1];
    const delta_a = payload.angle - prev_a;
    let delta_turns = 0;
    if (Math.abs(delta_a) > 270)
      delta_turns += Math.sign(delta_a);
    this.computeValues([payload.distance, payload.angle - 360 * delta_turns]);
    state.origin = payload.origin;
    state.turns = delta_turns;
    state._movement = [state._values[0] / state._initial[0] - 1, state._values[1] - state._initial[1]];
    this.compute(event);
    this.emit();
  }
  touchEnd(event) {
    this.ctrl.setEventIds(event);
    if (!this.state._active)
      return;
    if (this.state._touchIds.some((id) => !this.ctrl.touchIds.has(id))) {
      this.state._active = false;
      this.compute(event);
      this.emit();
    }
  }
  pointerEnd(event) {
    const state = this.state;
    this.ctrl.setEventIds(event);
    try {
      event.target.releasePointerCapture(event.pointerId);
    } catch (_unused) {
    }
    if (state._pointerEvents.has(event.pointerId)) {
      state._pointerEvents.delete(event.pointerId);
    }
    if (!state._active)
      return;
    if (state._pointerEvents.size < 2) {
      state._active = false;
      this.compute(event);
      this.emit();
    }
  }
  gestureStart(event) {
    if (event.cancelable)
      event.preventDefault();
    const state = this.state;
    if (state._active)
      return;
    this.start(event);
    this.computeValues([event.scale, event.rotation]);
    state.origin = [event.clientX, event.clientY];
    this.compute(event);
    this.emit();
  }
  gestureMove(event) {
    if (event.cancelable)
      event.preventDefault();
    if (!this.state._active)
      return;
    const state = this.state;
    this.computeValues([event.scale, event.rotation]);
    state.origin = [event.clientX, event.clientY];
    const _previousMovement = state._movement;
    state._movement = [event.scale - 1, event.rotation];
    state._delta = V.sub(state._movement, _previousMovement);
    this.compute(event);
    this.emit();
  }
  gestureEnd(event) {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute(event);
    this.emit();
  }
  wheel(event) {
    const modifierKey = this.config.modifierKey;
    if (modifierKey && !event[modifierKey])
      return;
    if (!this.state._active)
      this.wheelStart(event);
    else
      this.wheelChange(event);
    this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this));
  }
  wheelStart(event) {
    this.start(event);
    this.wheelChange(event);
  }
  wheelChange(event) {
    const isR3f = "uv" in event;
    if (!isR3f) {
      if (event.cancelable) {
        event.preventDefault();
      }
      if (!event.defaultPrevented) {
        console.warn(`[@use-gesture]: To properly support zoom on trackpads, try using the \`target\` option.

This message will only appear in development mode.`);
      }
    }
    const state = this.state;
    state._delta = [-wheelValues(event)[1] / PINCH_WHEEL_RATIO * state.offset[0], 0];
    V.addTo(state._movement, state._delta);
    this.state.origin = [event.clientX, event.clientY];
    this.compute(event);
    this.emit();
  }
  wheelEnd() {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute();
    this.emit();
  }
  bind(bindFunction) {
    const device = this.config.device;
    if (!!device) {
      bindFunction(device, "start", this[device + "Start"].bind(this));
      bindFunction(device, "change", this[device + "Move"].bind(this));
      bindFunction(device, "end", this[device + "End"].bind(this));
      bindFunction(device, "cancel", this[device + "End"].bind(this));
    }
    bindFunction("wheel", "", this.wheel.bind(this), {
      passive: false
    });
  }
};
var pinchConfigResolver = _objectSpread2(_objectSpread2({}, commonConfigResolver), {}, {
  device(_v, _k, {
    shared,
    pointer: {
      touch = false
    } = {}
  }) {
    const sharedConfig = shared;
    if (sharedConfig.target && !SUPPORT.touch && SUPPORT.gesture)
      return "gesture";
    if (SUPPORT.touch && touch)
      return "touch";
    if (SUPPORT.touchscreen) {
      if (SUPPORT.pointer)
        return "pointer";
      if (SUPPORT.touch)
        return "touch";
    }
  },
  bounds(_v, _k, {
    scaleBounds = {},
    angleBounds = {}
  }) {
    const _scaleBounds = (state) => {
      const D = assignDefault(call2(scaleBounds, state), {
        min: -Infinity,
        max: Infinity
      });
      return [D.min, D.max];
    };
    const _angleBounds = (state) => {
      const A = assignDefault(call2(angleBounds, state), {
        min: -Infinity,
        max: Infinity
      });
      return [A.min, A.max];
    };
    if (typeof scaleBounds !== "function" && typeof angleBounds !== "function")
      return [_scaleBounds(), _angleBounds()];
    return (state) => [_scaleBounds(state), _angleBounds(state)];
  },
  threshold(value, _k, config3) {
    this.lockDirection = config3.axis === "lock";
    const threshold = V.toVector(value, this.lockDirection ? [0.1, 3] : 0);
    return threshold;
  },
  modifierKey(value) {
    if (value === void 0)
      return "ctrlKey";
    return value;
  }
});
var moveConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
  mouseOnly: (value = true) => value
});
var WheelEngine = class extends CoordinatesEngine {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "ingKey", "wheeling");
  }
  wheel(event) {
    if (!this.state._active)
      this.start(event);
    this.wheelChange(event);
    this.timeoutStore.add("wheelEnd", this.wheelEnd.bind(this));
  }
  wheelChange(event) {
    const state = this.state;
    state._delta = wheelValues(event);
    V.addTo(state._movement, state._delta);
    const [ox, oy] = state.overflow;
    const [dx, dy] = state._delta;
    const [dirx, diry] = state._direction;
    if (ox < 0 && dx > 0 && dirx < 0 || ox > 0 && dx < 0 && dirx > 0) {
      state._movement[0] = state._movementBound[0];
    }
    if (oy < 0 && dy > 0 && diry < 0 || oy > 0 && dy < 0 && diry > 0) {
      state._movement[1] = state._movementBound[1];
    }
    this.compute(event);
    this.emit();
  }
  wheelEnd() {
    if (!this.state._active)
      return;
    this.state._active = false;
    this.compute();
    this.emit();
  }
  bind(bindFunction) {
    bindFunction("wheel", "", this.wheel.bind(this));
  }
};
var wheelConfigResolver = coordinatesConfigResolver;
var hoverConfigResolver = _objectSpread2(_objectSpread2({}, coordinatesConfigResolver), {}, {
  mouseOnly: (value = true) => value
});
var EngineMap = /* @__PURE__ */ new Map();
var ConfigResolverMap = /* @__PURE__ */ new Map();
function registerAction(action) {
  EngineMap.set(action.key, action.engine);
  ConfigResolverMap.set(action.key, action.resolver);
}
var dragAction = {
  key: "drag",
  engine: DragEngine,
  resolver: dragConfigResolver
};
var pinchAction = {
  key: "pinch",
  engine: PinchEngine,
  resolver: pinchConfigResolver
};
var wheelAction = {
  key: "wheel",
  engine: WheelEngine,
  resolver: wheelConfigResolver
};

// node_modules/@use-gesture/react/dist/use-gesture-react.esm.js
var import_react109 = __toESM(require_react());

// node_modules/@use-gesture/core/dist/use-gesture-core.esm.js
function _objectWithoutPropertiesLoose3(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function _objectWithoutProperties(source, excluded) {
  if (source == null)
    return {};
  var target = _objectWithoutPropertiesLoose3(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key))
        continue;
      target[key] = source[key];
    }
  }
  return target;
}
var sharedConfigResolver = {
  target(value) {
    if (value) {
      return () => "current" in value ? value.current : value;
    }
    return void 0;
  },
  enabled(value = true) {
    return value;
  },
  window(value = SUPPORT.isBrowser ? window : void 0) {
    return value;
  },
  eventOptions({
    passive = true,
    capture = false
  } = {}) {
    return {
      passive,
      capture
    };
  },
  transform(value) {
    return value;
  }
};
var _excluded2 = ["target", "eventOptions", "window", "enabled", "transform"];
function resolveWith(config3 = {}, resolvers) {
  const result = {};
  for (const [key, resolver] of Object.entries(resolvers)) {
    switch (typeof resolver) {
      case "function":
        if (true) {
          const r = resolver.call(result, config3[key], key, config3);
          if (!Number.isNaN(r))
            result[key] = r;
        } else {
          result[key] = resolver.call(result, config3[key], key, config3);
        }
        break;
      case "object":
        result[key] = resolveWith(config3[key], resolver);
        break;
      case "boolean":
        if (resolver)
          result[key] = config3[key];
        break;
    }
  }
  return result;
}
function parse(config3, gestureKey) {
  const _ref = config3, {
    target,
    eventOptions,
    window: window2,
    enabled,
    transform
  } = _ref, rest = _objectWithoutProperties(_ref, _excluded2);
  const _config = {
    shared: resolveWith({
      target,
      eventOptions,
      window: window2,
      enabled,
      transform
    }, sharedConfigResolver)
  };
  if (gestureKey) {
    const resolver = ConfigResolverMap.get(gestureKey);
    _config[gestureKey] = resolveWith(_objectSpread2({
      shared: _config.shared
    }, rest), resolver);
  } else {
    for (const key in rest) {
      const resolver = ConfigResolverMap.get(key);
      if (resolver) {
        _config[key] = resolveWith(_objectSpread2({
          shared: _config.shared
        }, rest[key]), resolver);
      } else if (true) {
        if (!["drag", "pinch", "scroll", "wheel", "move", "hover"].includes(key)) {
          if (key === "domTarget") {
            throw Error(`[@use-gesture]: \`domTarget\` option has been renamed to \`target\`.`);
          }
          console.warn(`[@use-gesture]: Unknown config key \`${key}\` was used. Please read the documentation for further information.`);
        }
      }
    }
  }
  return _config;
}
var EventStore = class {
  constructor(ctrl, gestureKey) {
    _defineProperty(this, "_listeners", /* @__PURE__ */ new Set());
    this._ctrl = ctrl;
    this._gestureKey = gestureKey;
  }
  add(element, device, action, handler, options) {
    const listeners3 = this._listeners;
    const type = toDomEventType(device, action);
    const _options = this._gestureKey ? this._ctrl.config[this._gestureKey].eventOptions : {};
    const eventOptions = _objectSpread2(_objectSpread2({}, _options), options);
    element.addEventListener(type, handler, eventOptions);
    const remove = () => {
      element.removeEventListener(type, handler, eventOptions);
      listeners3.delete(remove);
    };
    listeners3.add(remove);
    return remove;
  }
  clean() {
    this._listeners.forEach((remove) => remove());
    this._listeners.clear();
  }
};
var TimeoutStore = class {
  constructor() {
    _defineProperty(this, "_timeouts", /* @__PURE__ */ new Map());
  }
  add(key, callback, ms = 140, ...args) {
    this.remove(key);
    this._timeouts.set(key, window.setTimeout(callback, ms, ...args));
  }
  remove(key) {
    const timeout = this._timeouts.get(key);
    if (timeout)
      window.clearTimeout(timeout);
  }
  clean() {
    this._timeouts.forEach((timeout) => void window.clearTimeout(timeout));
    this._timeouts.clear();
  }
};
var Controller2 = class {
  constructor(handlers) {
    _defineProperty(this, "gestures", /* @__PURE__ */ new Set());
    _defineProperty(this, "_targetEventStore", new EventStore(this));
    _defineProperty(this, "gestureEventStores", {});
    _defineProperty(this, "gestureTimeoutStores", {});
    _defineProperty(this, "handlers", {});
    _defineProperty(this, "config", {});
    _defineProperty(this, "pointerIds", /* @__PURE__ */ new Set());
    _defineProperty(this, "touchIds", /* @__PURE__ */ new Set());
    _defineProperty(this, "state", {
      shared: {
        shiftKey: false,
        metaKey: false,
        ctrlKey: false,
        altKey: false
      }
    });
    resolveGestures(this, handlers);
  }
  setEventIds(event) {
    if (isTouch(event)) {
      this.touchIds = new Set(touchIds(event));
      return this.touchIds;
    } else if ("pointerId" in event) {
      if (event.type === "pointerup" || event.type === "pointercancel")
        this.pointerIds.delete(event.pointerId);
      else if (event.type === "pointerdown")
        this.pointerIds.add(event.pointerId);
      return this.pointerIds;
    }
  }
  applyHandlers(handlers, nativeHandlers) {
    this.handlers = handlers;
    this.nativeHandlers = nativeHandlers;
  }
  applyConfig(config3, gestureKey) {
    this.config = parse(config3, gestureKey);
  }
  clean() {
    this._targetEventStore.clean();
    for (const key of this.gestures) {
      this.gestureEventStores[key].clean();
      this.gestureTimeoutStores[key].clean();
    }
  }
  effect() {
    if (this.config.shared.target)
      this.bind();
    return () => this._targetEventStore.clean();
  }
  bind(...args) {
    const sharedConfig = this.config.shared;
    const props = {};
    let target;
    if (sharedConfig.target) {
      target = sharedConfig.target();
      if (!target)
        return;
    }
    if (sharedConfig.enabled) {
      for (const gestureKey of this.gestures) {
        const gestureConfig = this.config[gestureKey];
        const bindFunction = bindToProps(props, gestureConfig.eventOptions, !!target);
        if (gestureConfig.enabled) {
          const Engine2 = EngineMap.get(gestureKey);
          new Engine2(this, args, gestureKey).bind(bindFunction);
        }
      }
      const nativeBindFunction = bindToProps(props, sharedConfig.eventOptions, !!target);
      for (const eventKey in this.nativeHandlers) {
        nativeBindFunction(eventKey, "", (event) => this.nativeHandlers[eventKey](_objectSpread2(_objectSpread2({}, this.state.shared), {}, {
          event,
          args
        })), void 0, true);
      }
    }
    for (const handlerProp in props) {
      props[handlerProp] = chain(...props[handlerProp]);
    }
    if (!target)
      return props;
    for (const handlerProp in props) {
      const {
        device,
        capture,
        passive
      } = parseProp(handlerProp);
      this._targetEventStore.add(target, device, "", props[handlerProp], {
        capture,
        passive
      });
    }
  }
};
function setupGesture(ctrl, gestureKey) {
  ctrl.gestures.add(gestureKey);
  ctrl.gestureEventStores[gestureKey] = new EventStore(ctrl, gestureKey);
  ctrl.gestureTimeoutStores[gestureKey] = new TimeoutStore();
}
function resolveGestures(ctrl, internalHandlers) {
  if (internalHandlers.drag)
    setupGesture(ctrl, "drag");
  if (internalHandlers.wheel)
    setupGesture(ctrl, "wheel");
  if (internalHandlers.scroll)
    setupGesture(ctrl, "scroll");
  if (internalHandlers.move)
    setupGesture(ctrl, "move");
  if (internalHandlers.pinch)
    setupGesture(ctrl, "pinch");
  if (internalHandlers.hover)
    setupGesture(ctrl, "hover");
}
var bindToProps = (props, eventOptions, withPassiveOption) => (device, action, handler, options = {}, isNative = false) => {
  var _options$capture, _options$passive;
  const capture = (_options$capture = options.capture) !== null && _options$capture !== void 0 ? _options$capture : eventOptions.capture;
  const passive = (_options$passive = options.passive) !== null && _options$passive !== void 0 ? _options$passive : eventOptions.passive;
  let handlerProp = isNative ? device : toHandlerProp(device, action, capture);
  if (withPassiveOption && passive)
    handlerProp += "Passive";
  props[handlerProp] = props[handlerProp] || [];
  props[handlerProp].push(handler);
};
var RE_NOT_NATIVE = /^on(Drag|Wheel|Scroll|Move|Pinch|Hover)/;
function sortHandlers(_handlers) {
  const native = {};
  const handlers = {};
  const actions = /* @__PURE__ */ new Set();
  for (let key in _handlers) {
    if (RE_NOT_NATIVE.test(key)) {
      actions.add(RegExp.lastMatch);
      handlers[key] = _handlers[key];
    } else {
      native[key] = _handlers[key];
    }
  }
  return [handlers, native, actions];
}
function registerGesture(actions, handlers, handlerKey, key, internalHandlers, config3) {
  if (!actions.has(handlerKey))
    return;
  if (!EngineMap.has(key)) {
    if (true) {
      console.warn(`[@use-gesture]: You've created a custom handler that that uses the \`${key}\` gesture but isn't properly configured.

Please add \`${key}Action\` when creating your handler.`);
    }
    return;
  }
  const startKey = handlerKey + "Start";
  const endKey = handlerKey + "End";
  const fn = (state) => {
    let memo16 = void 0;
    if (state.first && startKey in handlers)
      handlers[startKey](state);
    if (handlerKey in handlers)
      memo16 = handlers[handlerKey](state);
    if (state.last && endKey in handlers)
      handlers[endKey](state);
    return memo16;
  };
  internalHandlers[key] = fn;
  config3[key] = config3[key] || {};
}
function parseMergedHandlers(mergedHandlers, mergedConfig) {
  const [handlers, nativeHandlers, actions] = sortHandlers(mergedHandlers);
  const internalHandlers = {};
  registerGesture(actions, handlers, "onDrag", "drag", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onWheel", "wheel", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onScroll", "scroll", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onPinch", "pinch", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onMove", "move", internalHandlers, mergedConfig);
  registerGesture(actions, handlers, "onHover", "hover", internalHandlers, mergedConfig);
  return {
    handlers: internalHandlers,
    config: mergedConfig,
    nativeHandlers
  };
}

// node_modules/@use-gesture/react/dist/use-gesture-react.esm.js
function useRecognizers(handlers, config3 = {}, gestureKey, nativeHandlers) {
  const ctrl = import_react109.default.useMemo(() => new Controller2(handlers), []);
  ctrl.applyHandlers(handlers, nativeHandlers);
  ctrl.applyConfig(config3, gestureKey);
  import_react109.default.useEffect(ctrl.effect.bind(ctrl));
  import_react109.default.useEffect(() => {
    return ctrl.clean.bind(ctrl);
  }, []);
  if (config3.target === void 0) {
    return ctrl.bind.bind(ctrl);
  }
  return void 0;
}
function useDrag(handler, config3) {
  registerAction(dragAction);
  return useRecognizers({
    drag: handler
  }, config3 || {}, "drag");
}
function useWheel(handler, config3) {
  registerAction(wheelAction);
  return useRecognizers({
    wheel: handler
  }, config3 || {}, "wheel");
}
function createUseGesture(actions) {
  actions.forEach(registerAction);
  return function useGesture(_handlers, _config) {
    const {
      handlers,
      nativeHandlers,
      config: config3
    } = parseMergedHandlers(_handlers, _config || {});
    return useRecognizers(handlers, config3, void 0, nativeHandlers);
  };
}

// node_modules/antd-mobile/es/utils/rubberband.js
function rubberband2(distance, dimension, constant) {
  return distance * dimension * constant / (dimension + constant * distance);
}
function rubberbandIfOutOfBounds2(position, min3, max3, dimension, constant = 0.15) {
  if (constant === 0)
    return bound(position, min3, max3);
  if (position < min3)
    return -rubberband2(min3 - position, dimension, constant) + min3;
  if (position > max3)
    return +rubberband2(position - max3, dimension, constant) + max3;
  return position;
}

// node_modules/antd-mobile/es/components/picker-view/wheel.js
var import_isEqual3 = __toESM(require_isEqual());

// node_modules/antd-mobile/es/utils/is-dev.js
var isDev2 = true;

// node_modules/antd-mobile/es/utils/dev-log.js
function devWarning(component, message) {
  if (isDev2) {
    console.warn(`[antd-mobile: ${component}] ${message}`);
  }
}
function devError(component, message) {
  if (isDev2) {
    console.error(`[antd-mobile: ${component}] ${message}`);
  }
}

// node_modules/antd-mobile/es/utils/measure-css-length.js
function measureCSSLength(raw) {
  if (raw === null || raw === void 0 || raw === "") {
    if (isDev2) {
      devError("Global", "Seems like the you will encounter a style messed problem. Please check the browser environment to make sure it supports CSS variables.");
    }
    return 0;
  }
  const withUnit = raw.trim();
  if (withUnit.endsWith("px")) {
    return parseFloat(withUnit);
  } else if (withUnit.endsWith("rem")) {
    return parseFloat(withUnit) * parseFloat(window.getComputedStyle(document.documentElement).fontSize);
  } else if (withUnit.endsWith("vw")) {
    return parseFloat(withUnit) * window.innerWidth / 100;
  } else {
    if (isDev2) {
      devError("Global", `You are using a not supported CSS unit in \`${raw}\`. Only \`px\` \`rem\` and \`vw\` are supported.`);
    }
    return 0;
  }
}

// node_modules/antd-mobile/es/components/picker-view/wheel.js
var classPrefix14 = `adm-picker-view`;
var Wheel = (0, import_react110.memo)((props) => {
  const {
    value,
    column,
    renderLabel
  } = props;
  function onSelect(val) {
    props.onSelect(val, props.index);
  }
  const [{
    y
  }, api] = useSpring(() => ({
    from: {
      y: 0
    },
    config: {
      tension: 400,
      mass: 0.8
    }
  }));
  const draggingRef = (0, import_react110.useRef)(false);
  const rootRef = (0, import_react110.useRef)(null);
  const itemHeight = (0, import_react110.useRef)(34);
  useIsomorphicLayoutEffect_default(() => {
    const root = rootRef.current;
    if (!root)
      return;
    itemHeight.current = measureCSSLength(window.getComputedStyle(root).getPropertyValue("--item-height"));
  });
  useIsomorphicLayoutEffect_default(() => {
    if (draggingRef.current)
      return;
    if (value === null)
      return;
    const targetIndex = column.findIndex((item) => item.value === value);
    if (targetIndex < 0)
      return;
    const finalPosition = targetIndex * -itemHeight.current;
    api.start({
      y: finalPosition,
      immediate: y.goal !== finalPosition
    });
  }, [value, column]);
  useIsomorphicLayoutEffect_default(() => {
    if (column.length === 0) {
      if (value !== null) {
        onSelect(null);
      }
    } else {
      if (!column.some((item) => item.value === value)) {
        const firstItem = column[0];
        onSelect(firstItem.value);
      }
    }
  }, [column, value]);
  function scrollSelect(index) {
    const finalPosition = index * -itemHeight.current;
    api.start({
      y: finalPosition
    });
    const item = column[index];
    if (!item)
      return;
    onSelect(item.value);
  }
  const handleDrag = (state) => {
    draggingRef.current = true;
    const min3 = -((column.length - 1) * itemHeight.current);
    const max3 = 0;
    if (state.last) {
      draggingRef.current = false;
      const position = state.offset[1] + state.velocity[1] * state.direction[1] * 50;
      const targetIndex = min3 < max3 ? -Math.round(bound(position, min3, max3) / itemHeight.current) : 0;
      scrollSelect(targetIndex);
    } else {
      const position = state.offset[1];
      api.start({
        y: rubberbandIfOutOfBounds2(position, min3, max3, itemHeight.current * 50, 0.2)
      });
    }
  };
  useDrag((state) => {
    state.event.stopPropagation();
    handleDrag(state);
  }, {
    axis: "y",
    from: () => [0, y.get()],
    filterTaps: true,
    pointer: {
      touch: true
    },
    target: rootRef
  });
  useWheel((state) => {
    state.event.stopPropagation();
    handleDrag(state);
  }, {
    axis: "y",
    from: () => [0, y.get()],
    preventDefault: true,
    target: props.mouseWheel ? rootRef : void 0,
    eventOptions: supportsPassive ? {
      passive: false
    } : false
  });
  let selectedIndex = null;
  function renderAccessible() {
    if (selectedIndex === null) {
      return null;
    }
    const current = column[selectedIndex];
    const previousIndex = selectedIndex - 1;
    const nextIndex = selectedIndex + 1;
    const previous = column[previousIndex];
    const next = column[nextIndex];
    return import_react110.default.createElement("div", {
      className: "adm-picker-view-column-accessible"
    }, import_react110.default.createElement("div", {
      className: "adm-picker-view-column-accessible-current",
      role: "button",
      "aria-label": current ? `\u5F53\u524D\u9009\u62E9\u7684\u662F\uFF1A${current.label}` : "\u5F53\u524D\u672A\u9009\u62E9"
    }, "-"), import_react110.default.createElement("div", {
      className: "adm-picker-view-column-accessible-button",
      onClick: () => {
        if (!previous)
          return;
        scrollSelect(previousIndex);
      },
      role: previous ? "button" : "text",
      "aria-label": !previous ? "\u6CA1\u6709\u4E0A\u4E00\u9879" : `\u9009\u62E9\u4E0A\u4E00\u9879\uFF1A${previous.label}`
    }, "-"), import_react110.default.createElement("div", {
      className: "adm-picker-view-column-accessible-button",
      onClick: () => {
        if (!next)
          return;
        scrollSelect(nextIndex);
      },
      role: next ? "button" : "text",
      "aria-label": !next ? "\u6CA1\u6709\u4E0B\u4E00\u9879" : `\u9009\u62E9\u4E0B\u4E00\u9879\uFF1A${next.label}`
    }, "-"));
  }
  return import_react110.default.createElement("div", {
    className: `${classPrefix14}-column`
  }, import_react110.default.createElement(animated.div, {
    ref: rootRef,
    style: {
      translateY: y
    },
    className: `${classPrefix14}-column-wheel`,
    "aria-hidden": true
  }, column.map((item, index) => {
    var _a;
    const selected = props.value === item.value;
    if (selected)
      selectedIndex = index;
    function handleClick() {
      draggingRef.current = false;
      scrollSelect(index);
    }
    return import_react110.default.createElement("div", {
      key: (_a = item.key) !== null && _a !== void 0 ? _a : item.value,
      "data-selected": item.value === value,
      className: `${classPrefix14}-column-item`,
      onClick: handleClick,
      "aria-hidden": !selected,
      "aria-label": selected ? "active" : ""
    }, import_react110.default.createElement("div", {
      className: `${classPrefix14}-column-item-label`
    }, renderLabel(item)));
  })), renderAccessible());
}, (prev, next) => {
  if (prev.index !== next.index)
    return false;
  if (prev.value !== next.value)
    return false;
  if (prev.onSelect !== next.onSelect)
    return false;
  if (prev.renderLabel !== next.renderLabel)
    return false;
  if (prev.mouseWheel !== next.mouseWheel)
    return false;
  if (!(0, import_isEqual3.default)(prev.column, next.column)) {
    return false;
  }
  return true;
});
Wheel.displayName = "Wheel";

// node_modules/antd-mobile/es/components/picker-view/columns-extend.js
var import_react112 = __toESM(require_react());

// node_modules/antd-mobile/es/utils/with-cache.js
function withCache(generate) {
  let cache = null;
  return () => {
    if (cache === null) {
      cache = generate();
    }
    return cache;
  };
}

// node_modules/antd-mobile/es/components/picker-view/columns-extend.js
function generateColumnsExtend(rawColumns, val) {
  const columns = withCache(() => {
    const c = typeof rawColumns === "function" ? rawColumns(val) : rawColumns;
    return c.map((column) => column.map((item) => typeof item === "string" ? {
      label: item,
      value: item
    } : item));
  });
  const items = withCache(() => {
    return val.map((v, index) => {
      var _a;
      const column = columns()[index];
      if (!column)
        return null;
      return (_a = column.find((item) => item.value === v)) !== null && _a !== void 0 ? _a : null;
    });
  });
  const extend = {
    get columns() {
      return columns();
    },
    get items() {
      return items();
    }
  };
  return extend;
}
function useColumnsExtend(rawColumns, value) {
  return (0, import_react112.useMemo)(() => generateColumnsExtend(rawColumns, value), [rawColumns, value]);
}

// node_modules/antd-mobile/es/components/picker/picker-utils.js
var defaultRenderLabel = (item) => item.label;

// node_modules/antd-mobile/es/components/spin-loading/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/spin-loading/spin-loading.css";

// node_modules/antd-mobile/es/components/spin-loading/spin-loading.js
var import_react113 = __toESM(require_react());

// node_modules/antd-mobile/es/utils/reduce-and-restore-motion.js
var import_shim = __toESM(require_shim());
var reduced = false;
var subscribers = /* @__PURE__ */ new Set();
function notify() {
  subscribers.forEach((subscriber) => {
    subscriber();
  });
}
function reduceMotion() {
  reduced = true;
  notify();
  globals.assign({
    skipAnimation: true
  });
}
function restoreMotion() {
  reduced = false;
  notify();
  globals.assign({
    skipAnimation: false
  });
}
function isMotionReduced() {
  return reduced;
}
function useMotionReduced() {
  return (0, import_shim.useSyncExternalStore)((onStoreChange) => {
    subscribers.add(onStoreChange);
    return () => {
      subscribers.delete(onStoreChange);
    };
  }, isMotionReduced);
}

// node_modules/antd-mobile/es/components/spin-loading/spin-loading.js
var classPrefix15 = "adm-spin-loading";
var colorRecord2 = {
  default: "var(--adm-color-weak)",
  primary: "var(--adm-color-primary)",
  white: "var(--adm-color-white)"
};
var defaultProps8 = {
  color: "default"
};
var circumference = 15 * 3.14159265358979 * 2;
var SpinLoading = (0, import_react113.memo)((p) => {
  var _a;
  const props = mergeProps(defaultProps8, p);
  const motionReduced = useMotionReduced();
  const {
    percent
  } = useSpring({
    cancel: motionReduced,
    loop: {
      reverse: true
    },
    from: {
      percent: 80
    },
    to: {
      percent: 30
    },
    config: {
      duration: 1200
    }
  });
  return withNativeProps(props, import_react113.default.createElement(animated.div, {
    className: classPrefix15,
    style: {
      "--color": (_a = colorRecord2[props.color]) !== null && _a !== void 0 ? _a : props.color,
      "--percent": percent
    }
  }, import_react113.default.createElement("svg", {
    className: `${classPrefix15}-svg`,
    viewBox: "0 0 32 32"
  }, import_react113.default.createElement(animated.circle, {
    className: `${classPrefix15}-fill`,
    fill: "transparent",
    strokeWidth: "2",
    strokeDasharray: circumference,
    strokeDashoffset: percent,
    strokeLinecap: "square",
    r: 15,
    cx: 16,
    cy: 16
  }))));
});

// node_modules/antd-mobile/es/components/spin-loading/index.js
var spin_loading_default = SpinLoading;

// node_modules/antd-mobile/es/components/picker-view/picker-view.js
var classPrefix16 = `adm-picker-view`;
var defaultProps9 = {
  defaultValue: [],
  renderLabel: defaultRenderLabel,
  mouseWheel: false,
  loadingContent: import_react114.default.createElement("div", {
    className: `${classPrefix16}-loading-content`
  }, import_react114.default.createElement(spin_loading_default, null))
};
var PickerView = (0, import_react114.memo)((p) => {
  const props = mergeProps(defaultProps9, p);
  const [innerValue, setInnerValue] = (0, import_react114.useState)(props.value === void 0 ? props.defaultValue : props.value);
  (0, import_react114.useEffect)(() => {
    if (props.value === void 0)
      return;
    if (props.value === innerValue)
      return;
    setInnerValue(props.value);
  }, [props.value]);
  (0, import_react114.useEffect)(() => {
    if (props.value === innerValue)
      return;
    const timeout = window.setTimeout(() => {
      if (props.value !== void 0 && props.value !== innerValue) {
        setInnerValue(props.value);
      }
    }, 1e3);
    return () => {
      window.clearTimeout(timeout);
    };
  }, [props.value, innerValue]);
  const extend = useColumnsExtend(props.columns, innerValue);
  const columns = extend.columns;
  useDebounceEffect_default(() => {
    var _a;
    if (props.value === innerValue)
      return;
    (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, innerValue, extend);
  }, [innerValue], {
    wait: 0,
    leading: false,
    trailing: true
  });
  const handleSelect = (0, import_react114.useCallback)((val, index) => {
    setInnerValue((prev) => {
      const next = [...prev];
      next[index] = val;
      return next;
    });
  }, []);
  return withNativeProps(props, import_react114.default.createElement("div", {
    className: `${classPrefix16}`
  }, props.loading ? props.loadingContent : import_react114.default.createElement(import_react114.default.Fragment, null, columns.map((column, index) => import_react114.default.createElement(Wheel, {
    key: index,
    index,
    column,
    value: innerValue[index],
    onSelect: handleSelect,
    renderLabel: props.renderLabel,
    mouseWheel: props.mouseWheel
  })), import_react114.default.createElement("div", {
    className: `${classPrefix16}-mask`
  }, import_react114.default.createElement("div", {
    className: `${classPrefix16}-mask-top`
  }), import_react114.default.createElement("div", {
    className: `${classPrefix16}-mask-middle`
  }), import_react114.default.createElement("div", {
    className: `${classPrefix16}-mask-bottom`
  })))));
});
PickerView.displayName = "PickerView";

// node_modules/antd-mobile/es/components/picker-view/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/picker-view/picker-view.css";
var picker_view_default = PickerView;

// node_modules/antd-mobile/es/components/picker/picker.js
var classPrefix17 = `adm-picker`;
var defaultProps10 = {
  defaultValue: [],
  closeOnMaskClick: true,
  renderLabel: defaultRenderLabel,
  destroyOnClose: false,
  forceRender: false
};
var Picker = (0, import_react115.memo)((0, import_react115.forwardRef)((p, ref) => {
  var _a;
  const {
    locale
  } = useConfig();
  const props = mergeProps(defaultProps10, {
    confirmText: locale.common.confirm,
    cancelText: locale.common.cancel
  }, p);
  const [visible, setVisible] = usePropsValue({
    value: props.visible,
    defaultValue: false,
    onChange: (v) => {
      var _a2;
      if (v === false) {
        (_a2 = props.onClose) === null || _a2 === void 0 ? void 0 : _a2.call(props);
      }
    }
  });
  const actions = {
    toggle: () => {
      setVisible((v) => !v);
    },
    open: () => {
      setVisible(true);
    },
    close: () => {
      setVisible(false);
    }
  };
  (0, import_react115.useImperativeHandle)(ref, () => actions);
  const [value, setValue] = usePropsValue(Object.assign(Object.assign({}, props), {
    onChange: (val) => {
      var _a2;
      const extend2 = generateColumnsExtend(props.columns, val);
      (_a2 = props.onConfirm) === null || _a2 === void 0 ? void 0 : _a2.call(props, val, extend2);
    }
  }));
  const extend = useColumnsExtend(props.columns, value);
  const [innerValue, setInnerValue] = (0, import_react115.useState)(value);
  (0, import_react115.useEffect)(() => {
    if (innerValue !== value) {
      setInnerValue(value);
    }
  }, [visible]);
  (0, import_react115.useEffect)(() => {
    if (!visible) {
      setInnerValue(value);
    }
  }, [value]);
  const onChange = useMemoizedFn_default((val, ext) => {
    var _a2;
    setInnerValue(val);
    if (visible) {
      (_a2 = props.onSelect) === null || _a2 === void 0 ? void 0 : _a2.call(props, val, ext);
    }
  });
  const pickerElement = withNativeProps(props, import_react115.default.createElement("div", {
    className: classPrefix17
  }, import_react115.default.createElement("div", {
    className: `${classPrefix17}-header`
  }, import_react115.default.createElement("a", {
    role: "button",
    className: `${classPrefix17}-header-button`,
    onClick: () => {
      var _a2;
      (_a2 = props.onCancel) === null || _a2 === void 0 ? void 0 : _a2.call(props);
      setVisible(false);
    }
  }, props.cancelText), import_react115.default.createElement("div", {
    className: `${classPrefix17}-header-title`
  }, props.title), import_react115.default.createElement("a", {
    role: "button",
    className: (0, import_classnames12.default)(`${classPrefix17}-header-button`, props.loading && `${classPrefix17}-header-button-disabled`),
    onClick: () => {
      if (props.loading)
        return;
      setValue(innerValue, true);
      setVisible(false);
    },
    "aria-disabled": props.loading
  }, props.confirmText)), import_react115.default.createElement("div", {
    className: `${classPrefix17}-body`
  }, import_react115.default.createElement(picker_view_default, {
    loading: props.loading,
    loadingContent: props.loadingContent,
    columns: props.columns,
    renderLabel: props.renderLabel,
    value: innerValue,
    mouseWheel: props.mouseWheel,
    onChange
  }))));
  const popupElement = import_react115.default.createElement(popup_default, {
    style: props.popupStyle,
    className: (0, import_classnames12.default)(`${classPrefix17}-popup`, props.popupClassName),
    visible,
    position: "bottom",
    onMaskClick: () => {
      var _a2;
      if (!props.closeOnMaskClick)
        return;
      (_a2 = props.onCancel) === null || _a2 === void 0 ? void 0 : _a2.call(props);
      setVisible(false);
    },
    getContainer: props.getContainer,
    destroyOnClose: props.destroyOnClose,
    afterShow: props.afterShow,
    afterClose: props.afterClose,
    onClick: props.onClick,
    forceRender: props.forceRender,
    stopPropagation: props.stopPropagation
  }, pickerElement, import_react115.default.createElement(safe_area_default, {
    position: "bottom"
  }));
  return import_react115.default.createElement(import_react115.default.Fragment, null, popupElement, (_a = props.children) === null || _a === void 0 ? void 0 : _a.call(props, extend.items, actions));
}));
Picker.displayName = "Picker";

// node_modules/antd-mobile/es/components/picker/prompt.js
var import_react116 = __toESM(require_react());
function prompt(props) {
  return new Promise((resolve) => {
    const Wrapper2 = () => {
      const [visible, setVisible] = (0, import_react116.useState)(false);
      (0, import_react116.useEffect)(() => {
        setVisible(true);
      }, []);
      return import_react116.default.createElement(Picker, Object.assign({}, props, {
        visible,
        onConfirm: (val, extend) => {
          var _a;
          (_a = props.onConfirm) === null || _a === void 0 ? void 0 : _a.call(props, val, extend);
          resolve(val);
        },
        onClose: () => {
          var _a;
          (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
          setVisible(false);
          resolve(null);
        },
        afterClose: () => {
          var _a;
          (_a = props.afterClose) === null || _a === void 0 ? void 0 : _a.call(props);
          unmount2();
        }
      }));
    };
    const unmount2 = renderToBody(import_react116.default.createElement(Wrapper2, null));
  });
}

// node_modules/antd-mobile/es/components/picker/index.js
var picker_default = attachPropertiesToComponent(Picker, {
  prompt
});

// node_modules/antd-mobile/es/components/cascade-picker/cascade-picker-utils.js
var import_react117 = __toESM(require_react());
function useColumnsFn(options) {
  const depth = (0, import_react117.useMemo)(() => {
    let depth2 = 0;
    function traverse(options2, currentDepth) {
      if (currentDepth > depth2)
        depth2 = currentDepth;
      const nextDepth = currentDepth + 1;
      options2.forEach((option) => {
        if (option.children) {
          traverse(option.children, nextDepth);
        }
      });
    }
    traverse(options, 1);
    return depth2;
  }, [options]);
  return (selected) => {
    const columns = [];
    let currentOptions = options;
    let i = 0;
    while (true) {
      columns.push(currentOptions.map((option) => ({
        label: option.label,
        value: option.value
      })));
      const x = selected[i];
      const targetOptions = currentOptions.find((option) => option.value === x);
      if (!targetOptions || !targetOptions.children)
        break;
      currentOptions = targetOptions.children;
      i++;
    }
    while (i < depth - 1) {
      columns.push([]);
      i++;
    }
    return columns;
  };
}

// node_modules/antd-mobile/es/components/cascade-picker/cascade-picker.js
var CascadePicker = (0, import_react118.forwardRef)((props, ref) => {
  const {
    options
  } = props, pickerProps = __rest(props, ["options"]);
  const columnsFn = useColumnsFn(options);
  return import_react118.default.createElement(picker_default, Object.assign({}, pickerProps, {
    ref,
    columns: columnsFn
  }));
});

// node_modules/antd-mobile/es/components/cascade-picker/prompt.js
var import_react119 = __toESM(require_react());
function prompt2(props) {
  return new Promise((resolve) => {
    const Wrapper2 = () => {
      const [visible, setVisible] = (0, import_react119.useState)(false);
      (0, import_react119.useEffect)(() => {
        setVisible(true);
      }, []);
      return import_react119.default.createElement(CascadePicker, Object.assign({}, props, {
        visible,
        onConfirm: (val, extend) => {
          var _a;
          (_a = props.onConfirm) === null || _a === void 0 ? void 0 : _a.call(props, val, extend);
          resolve(val);
        },
        onClose: () => {
          var _a;
          (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
          setVisible(false);
          resolve(null);
        },
        afterClose: () => {
          var _a;
          (_a = props.afterClose) === null || _a === void 0 ? void 0 : _a.call(props);
          unmount2();
        }
      }));
    };
    const unmount2 = renderToBody(import_react119.default.createElement(Wrapper2, null));
  });
}

// node_modules/antd-mobile/es/components/cascade-picker/index.js
var cascade_picker_default = attachPropertiesToComponent(CascadePicker, {
  prompt: prompt2
});

// node_modules/antd-mobile/es/components/cascade-picker-view/cascade-picker-view.js
var import_react120 = __toESM(require_react());
var CascadePickerView = (props) => {
  const {
    options
  } = props, pickerProps = __rest(props, ["options"]);
  const columnsFn = useColumnsFn(options);
  return import_react120.default.createElement(picker_view_default, Object.assign({}, pickerProps, {
    columns: columnsFn
  }));
};

// node_modules/antd-mobile/es/components/cascade-picker-view/index.js
var cascade_picker_view_default = CascadePickerView;

// node_modules/antd-mobile/es/components/cascader/cascader.js
var import_react130 = __toESM(require_react());

// node_modules/antd-mobile/es/components/cascader-view/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/cascader-view/cascader-view.css";

// node_modules/antd-mobile/es/components/cascader-view/cascader-view.js
var import_react129 = __toESM(require_react());
var import_classnames18 = __toESM(require_classnames());

// node_modules/antd-mobile/es/components/tabs/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/tabs/tabs.css";

// node_modules/antd-mobile/es/components/tabs/tabs.js
var import_react121 = __toESM(require_react());
var import_classnames13 = __toESM(require_classnames());
var classPrefix18 = `adm-tabs`;
var Tab = () => {
  return null;
};
var defaultProps11 = {
  activeLineMode: "auto",
  stretch: true
};
var Tabs = (p) => {
  var _a;
  const props = mergeProps(defaultProps11, p);
  const tabListContainerRef = (0, import_react121.useRef)(null);
  const activeLineRef = (0, import_react121.useRef)(null);
  const keyToIndexRecord = {};
  let firstActiveKey = null;
  const panes = [];
  traverseReactNode(props.children, (child, index) => {
    if (!import_react121.default.isValidElement(child))
      return;
    const key = child.key;
    if (typeof key !== "string")
      return;
    if (index === 0) {
      firstActiveKey = key;
    }
    const length = panes.push(child);
    keyToIndexRecord[key] = length - 1;
  });
  const [activeKey, setActiveKey] = usePropsValue({
    value: props.activeKey,
    defaultValue: (_a = props.defaultActiveKey) !== null && _a !== void 0 ? _a : firstActiveKey,
    onChange: (v) => {
      var _a2;
      if (v === null)
        return;
      (_a2 = props.onChange) === null || _a2 === void 0 ? void 0 : _a2.call(props, v);
    }
  });
  const [{
    x,
    width
  }, api] = useSpring(() => ({
    x: 0,
    width: 0,
    config: {
      tension: 300,
      clamp: true
    }
  }));
  const [{
    scrollLeft
  }, scrollApi] = useSpring(() => ({
    scrollLeft: 0,
    config: {
      tension: 300,
      clamp: true
    }
  }));
  const [{
    leftMaskOpacity,
    rightMaskOpacity
  }, maskApi] = useSpring(() => ({
    leftMaskOpacity: 0,
    rightMaskOpacity: 0,
    config: {
      clamp: true
    }
  }));
  function animate(immediate = false) {
    const container = tabListContainerRef.current;
    if (!container)
      return;
    const activeIndex = keyToIndexRecord[activeKey];
    if (activeIndex === void 0) {
      api.start({
        x: 0,
        width: 0,
        immediate: true
      });
      return;
    }
    const activeLine = activeLineRef.current;
    if (!activeLine)
      return;
    const activeTabWrapper = container.children.item(activeIndex + 1);
    const activeTab = activeTabWrapper.children.item(0);
    const activeTabLeft = activeTab.offsetLeft;
    const activeTabWidth = activeTab.offsetWidth;
    const activeTabWrapperLeft = activeTabWrapper.offsetLeft;
    const activeTabWrapperWidth = activeTabWrapper.offsetWidth;
    const containerWidth = container.offsetWidth;
    const containerScrollWidth = container.scrollWidth;
    const containerScrollLeft = container.scrollLeft;
    const activeLineWidth = activeLine.offsetWidth;
    let x2 = 0;
    let width2 = 0;
    if (props.activeLineMode === "auto") {
      x2 = activeTabLeft;
      width2 = activeTabWidth;
    } else if (props.activeLineMode === "full") {
      x2 = activeTabWrapperLeft;
      width2 = activeTabWrapperWidth;
    } else {
      x2 = activeTabLeft + (activeTabWidth - activeLineWidth) / 2;
    }
    api.start({
      x: x2,
      width: width2,
      immediate
    });
    const maxScrollDistance = containerScrollWidth - containerWidth;
    if (maxScrollDistance <= 0)
      return;
    const nextScrollLeft = bound(activeTabLeft - (containerWidth - activeTabWidth) / 2, 0, containerScrollWidth - containerWidth);
    scrollApi.start({
      scrollLeft: nextScrollLeft,
      from: {
        scrollLeft: containerScrollLeft
      },
      immediate
    });
  }
  useIsomorphicLayoutEffect_default(() => {
    animate(!x.isAnimating);
  }, []);
  useIsomorphicUpdateLayoutEffect(() => {
    animate();
  }, [activeKey]);
  useResizeEffect(() => {
    animate(!x.isAnimating);
  }, tabListContainerRef);
  useMutationEffect(() => {
    animate(!x.isAnimating);
  }, tabListContainerRef, {
    subtree: true,
    childList: true,
    characterData: true
  });
  const {
    run: updateMask
  } = useThrottleFn_default((immediate = false) => {
    const container = tabListContainerRef.current;
    if (!container)
      return;
    const scrollLeft2 = container.scrollLeft;
    const showLeftMask = scrollLeft2 > 0;
    const showRightMask = scrollLeft2 + container.offsetWidth < container.scrollWidth;
    maskApi.start({
      leftMaskOpacity: showLeftMask ? 1 : 0,
      rightMaskOpacity: showRightMask ? 1 : 0,
      immediate
    });
  }, {
    wait: 100,
    trailing: true,
    leading: true
  });
  useIsomorphicLayoutEffect_default(() => {
    updateMask(true);
  }, []);
  return withNativeProps(props, import_react121.default.createElement("div", {
    className: classPrefix18
  }, import_react121.default.createElement("div", {
    className: `${classPrefix18}-header`
  }, import_react121.default.createElement(animated.div, {
    className: (0, import_classnames13.default)(`${classPrefix18}-header-mask`, `${classPrefix18}-header-mask-left`),
    style: {
      opacity: leftMaskOpacity
    }
  }), import_react121.default.createElement(animated.div, {
    className: (0, import_classnames13.default)(`${classPrefix18}-header-mask`, `${classPrefix18}-header-mask-right`),
    style: {
      opacity: rightMaskOpacity
    }
  }), import_react121.default.createElement(animated.div, {
    className: `${classPrefix18}-tab-list`,
    ref: tabListContainerRef,
    scrollLeft,
    onScroll: updateMask
  }, import_react121.default.createElement(animated.div, {
    ref: activeLineRef,
    className: `${classPrefix18}-tab-line`,
    style: {
      width: props.activeLineMode === "fixed" ? "var(--fixed-active-line-width, 30px)" : width,
      x
    }
  }), panes.map((pane) => withNativeProps(pane.props, import_react121.default.createElement("div", {
    key: pane.key,
    className: (0, import_classnames13.default)(`${classPrefix18}-tab-wrapper`, {
      [`${classPrefix18}-tab-wrapper-stretch`]: props.stretch
    })
  }, import_react121.default.createElement("div", {
    onClick: () => {
      const {
        key
      } = pane;
      if (pane.props.disabled)
        return;
      if (key === void 0 || key === null) {
        return;
      }
      setActiveKey(key.toString());
    },
    className: (0, import_classnames13.default)(`${classPrefix18}-tab`, {
      [`${classPrefix18}-tab-active`]: pane.key === activeKey,
      [`${classPrefix18}-tab-disabled`]: pane.props.disabled
    })
  }, pane.props.title)))))), panes.map((pane) => {
    if (pane.props.children === void 0) {
      return null;
    }
    const active = pane.key === activeKey;
    return import_react121.default.createElement(ShouldRender, {
      key: pane.key,
      active,
      forceRender: pane.props.forceRender,
      destroyOnClose: pane.props.destroyOnClose
    }, import_react121.default.createElement("div", {
      className: `${classPrefix18}-content`,
      style: {
        display: active ? "block" : "none"
      }
    }, pane.props.children));
  })));
};

// node_modules/antd-mobile/es/components/tabs/index.js
var tabs_default = attachPropertiesToComponent(Tabs, {
  Tab
});

// node_modules/antd-mobile/es/components/check-list/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/check-list/check-list.css";

// node_modules/antd-mobile/es/components/check-list/check-list.js
var import_react125 = __toESM(require_react());

// node_modules/antd-mobile/es/components/list/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/list/list.css";

// node_modules/antd-mobile/es/components/list/list.js
var import_react122 = __toESM(require_react());
var import_classnames14 = __toESM(require_classnames());
var classPrefix19 = `adm-list`;
var defaultProps12 = {
  mode: "default"
};
var List = (0, import_react122.forwardRef)((p, ref) => {
  const props = mergeProps(defaultProps12, p);
  const nativeElementRef = (0, import_react122.useRef)(null);
  (0, import_react122.useImperativeHandle)(ref, () => ({
    get nativeElement() {
      return nativeElementRef.current;
    }
  }));
  return withNativeProps(props, import_react122.default.createElement("div", {
    className: (0, import_classnames14.default)(classPrefix19, `${classPrefix19}-${props.mode}`),
    ref: nativeElementRef
  }, props.header && import_react122.default.createElement("div", {
    className: `${classPrefix19}-header`
  }, props.header), import_react122.default.createElement("div", {
    className: `${classPrefix19}-body`
  }, import_react122.default.createElement("div", {
    className: `${classPrefix19}-body-inner`
  }, props.children))));
});

// node_modules/antd-mobile/es/components/list/list-item.js
var import_react123 = __toESM(require_react());
var import_classnames15 = __toESM(require_classnames());

// node_modules/antd-mobile/es/utils/is-node-with-content.js
function isNodeWithContent(node) {
  return node !== void 0 && node !== null && node !== false;
}

// node_modules/antd-mobile/es/components/list/list-item.js
var classPrefix20 = `adm-list-item`;
var ListItem = (props) => {
  var _a;
  const clickable = (_a = props.clickable) !== null && _a !== void 0 ? _a : !!props.onClick;
  const arrow2 = props.arrow === void 0 ? clickable : props.arrow;
  const content = import_react123.default.createElement("div", {
    className: `${classPrefix20}-content`
  }, isNodeWithContent(props.prefix) && import_react123.default.createElement("div", {
    className: `${classPrefix20}-content-prefix`
  }, props.prefix), import_react123.default.createElement("div", {
    className: `${classPrefix20}-content-main`
  }, isNodeWithContent(props.title) && import_react123.default.createElement("div", {
    className: `${classPrefix20}-title`
  }, props.title), props.children, isNodeWithContent(props.description) && import_react123.default.createElement("div", {
    className: `${classPrefix20}-description`
  }, props.description)), isNodeWithContent(props.extra) && import_react123.default.createElement("div", {
    className: `${classPrefix20}-content-extra`
  }, props.extra), isNodeWithContent(arrow2) && import_react123.default.createElement("div", {
    className: `${classPrefix20}-content-arrow`
  }, arrow2 === true ? import_react123.default.createElement(RightOutline_default, null) : arrow2));
  return withNativeProps(props, import_react123.default.createElement(clickable ? "a" : "div", {
    className: (0, import_classnames15.default)(`${classPrefix20}`, clickable ? ["adm-plain-anchor"] : [], props.disabled && `${classPrefix20}-disabled`),
    onClick: props.disabled ? void 0 : props.onClick
  }, content));
};

// node_modules/antd-mobile/es/components/list/index.js
var list_default = attachPropertiesToComponent(List, {
  Item: ListItem
});

// node_modules/antd-mobile/es/components/check-list/context.js
var import_react124 = __toESM(require_react());
var CheckListContext = (0, import_react124.createContext)(null);

// node_modules/antd-mobile/es/components/check-list/check-list.js
var classPrefix21 = "adm-check-list";
var defaultProps13 = {
  multiple: false,
  defaultValue: [],
  activeIcon: import_react125.default.createElement(CheckOutline_default, null)
};
var CheckList = (p) => {
  const props = mergeProps(defaultProps13, p);
  const [value, setValue] = usePropsValue(props);
  function check(val) {
    if (props.multiple) {
      setValue([...value, val]);
    } else {
      setValue([val]);
    }
  }
  function uncheck(val) {
    setValue(value.filter((item) => item !== val));
  }
  const {
    activeIcon,
    disabled,
    readOnly
  } = props;
  return import_react125.default.createElement(CheckListContext.Provider, {
    value: {
      value,
      check,
      uncheck,
      activeIcon,
      disabled,
      readOnly
    }
  }, withNativeProps(props, import_react125.default.createElement(list_default, {
    mode: props.mode,
    className: classPrefix21
  }, props.children)));
};

// node_modules/antd-mobile/es/components/check-list/check-list-item.js
var import_react126 = __toESM(require_react());
var import_classnames16 = __toESM(require_classnames());
var classPrefix22 = `adm-check-list-item`;
var CheckListItem = (props) => {
  const context = (0, import_react126.useContext)(CheckListContext);
  if (context === null) {
    devWarning("CheckList.Item", "CheckList.Item can only be used inside CheckList.");
    return null;
  }
  const active = context.value.includes(props.value);
  const readOnly = props.readOnly || context.readOnly;
  const extra = import_react126.default.createElement("div", {
    className: `${classPrefix22}-extra`
  }, active ? context.activeIcon : null);
  return withNativeProps(props, import_react126.default.createElement(list_default.Item, {
    title: props.title,
    className: (0, import_classnames16.default)(classPrefix22, readOnly && `${classPrefix22}-readonly`, active && `${classPrefix22}-active`),
    description: props.description,
    prefix: props.prefix,
    onClick: (e) => {
      var _a;
      if (readOnly)
        return;
      if (active) {
        context.uncheck(props.value);
      } else {
        context.check(props.value);
      }
      (_a = props.onClick) === null || _a === void 0 ? void 0 : _a.call(props, e);
    },
    arrow: false,
    clickable: !readOnly,
    extra,
    disabled: props.disabled || context.disabled
  }, props.children));
};

// node_modules/antd-mobile/es/components/check-list/index.js
var check_list_default = attachPropertiesToComponent(CheckList, {
  Item: CheckListItem
});

// node_modules/antd-mobile/es/components/cascader-view/use-cascader-value-extend.js
var import_react127 = __toESM(require_react());
var import_memoize = __toESM(require_memoize());
function useCascaderValueExtend(options) {
  const generateItems = (0, import_react127.useMemo)(() => {
    return (0, import_memoize.default)((val) => {
      const ret = [];
      let currentOptions = options;
      for (const v of val) {
        const target = currentOptions.find((option) => option.value === v);
        if (!target) {
          break;
        }
        ret.push(target);
        if (!target.children)
          break;
        currentOptions = target.children;
      }
      return ret;
    }, (val) => JSON.stringify(val));
  }, [options]);
  const generateIsLeaf = (0, import_react127.useMemo)(() => {
    return (0, import_memoize.default)((val) => {
      const children = val.reduce((currentOptions, v) => {
        var _a;
        return ((_a = currentOptions.find((option) => option.value === v)) === null || _a === void 0 ? void 0 : _a.children) || [];
      }, options);
      return children.length === 0;
    }, (val) => JSON.stringify(val));
  }, [options]);
  function generateValueExtend(val) {
    return {
      get items() {
        return generateItems(val);
      },
      get isLeaf() {
        return generateIsLeaf(val);
      }
    };
  }
  return generateValueExtend;
}

// node_modules/antd-mobile/es/components/cascader-view/option-skeleton.js
var optionSkeleton = [];

// node_modules/antd-mobile/es/components/skeleton/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/skeleton/skeleton.css";

// node_modules/antd-mobile/es/components/skeleton/skeleton.js
var import_react128 = __toESM(require_react());
var import_classnames17 = __toESM(require_classnames());

// node_modules/antd-mobile/es/utils/generate-int-array.js
function generateIntArray(from, to3) {
  const array = [];
  for (let i = from; i <= to3; i++) {
    array.push(i);
  }
  return array;
}

// node_modules/antd-mobile/es/components/skeleton/skeleton.js
var classPrefix23 = "adm-skeleton";
var Skeleton = (props) => {
  return withNativeProps(props, import_react128.default.createElement("div", {
    className: (0, import_classnames17.default)(classPrefix23, {
      [`${classPrefix23}-animated`]: props.animated
    })
  }));
};
var SkeletonTitle = (props) => {
  return withNativeProps(props, import_react128.default.createElement(Skeleton, {
    animated: props.animated,
    className: `${classPrefix23}-title`
  }));
};
var defaultSkeletonParagraphProps = {
  lineCount: 3
};
var SkeletonParagraph = (p) => {
  const props = mergeProps(defaultSkeletonParagraphProps, p);
  const keys = generateIntArray(1, props.lineCount);
  const node = import_react128.default.createElement("div", {
    className: `${classPrefix23}-paragraph`
  }, keys.map((key) => import_react128.default.createElement(Skeleton, {
    key,
    animated: props.animated,
    className: `${classPrefix23}-paragraph-line`
  })));
  return withNativeProps(props, node);
};

// node_modules/antd-mobile/es/components/skeleton/index.js
var skeleton_default = attachPropertiesToComponent(Skeleton, {
  Title: SkeletonTitle,
  Paragraph: SkeletonParagraph
});

// node_modules/antd-mobile/es/components/cascader-view/cascader-view.js
var classPrefix24 = `adm-cascader-view`;
var defaultProps14 = {
  defaultValue: []
};
var CascaderView = (p) => {
  const {
    locale
  } = useConfig();
  const props = mergeProps(defaultProps14, {
    placeholder: locale.Cascader.placeholder
  }, p);
  const [value, setValue] = usePropsValue(Object.assign(Object.assign({}, props), {
    onChange: (val) => {
      var _a;
      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, val, generateValueExtend(val));
    }
  }));
  const [tabActiveIndex, setTabActiveIndex] = (0, import_react129.useState)(0);
  useUpdateEffect_default(() => {
    var _a;
    (_a = props.onTabsChange) === null || _a === void 0 ? void 0 : _a.call(props, tabActiveIndex);
  }, [tabActiveIndex]);
  const generateValueExtend = useCascaderValueExtend(props.options);
  const levels = (0, import_react129.useMemo)(() => {
    const ret = [];
    let currentOptions = props.options;
    let reachedEnd = false;
    for (const v of value) {
      const target = currentOptions.find((option) => option.value === v);
      ret.push({
        selected: target,
        options: currentOptions
      });
      if (!target || !target.children) {
        reachedEnd = true;
        break;
      }
      currentOptions = target.children;
    }
    if (!reachedEnd) {
      ret.push({
        selected: void 0,
        options: currentOptions
      });
    }
    return ret;
  }, [value, props.options]);
  (0, import_react129.useEffect)(() => {
    setTabActiveIndex(levels.length - 1);
  }, [value]);
  (0, import_react129.useEffect)(() => {
    const max3 = levels.length - 1;
    if (tabActiveIndex > max3) {
      setTabActiveIndex(max3);
    }
  }, [tabActiveIndex, levels]);
  const onItemSelect = (selectValue, depth) => {
    const next = value.slice(0, depth);
    if (selectValue !== void 0) {
      next[depth] = selectValue;
    }
    setValue(next);
  };
  return withNativeProps(props, import_react129.default.createElement("div", {
    className: classPrefix24
  }, import_react129.default.createElement(tabs_default, {
    activeKey: tabActiveIndex.toString(),
    onChange: (key) => {
      const activeIndex = parseInt(key);
      setTabActiveIndex(activeIndex);
    },
    stretch: false,
    className: `${classPrefix24}-tabs`
  }, levels.map((level, index) => {
    const selected = level.selected;
    return import_react129.default.createElement(tabs_default.Tab, {
      key: index.toString(),
      title: import_react129.default.createElement("div", {
        className: `${classPrefix24}-header-title`
      }, selected ? selected.label : props.placeholder),
      forceRender: true
    }, import_react129.default.createElement("div", {
      className: `${classPrefix24}-content`
    }, level.options === optionSkeleton ? import_react129.default.createElement("div", {
      className: `${classPrefix24}-skeleton`
    }, import_react129.default.createElement(skeleton_default, {
      className: `${classPrefix24}-skeleton-line-1`,
      animated: true
    }), import_react129.default.createElement(skeleton_default, {
      className: `${classPrefix24}-skeleton-line-2`,
      animated: true
    }), import_react129.default.createElement(skeleton_default, {
      className: `${classPrefix24}-skeleton-line-3`,
      animated: true
    }), import_react129.default.createElement(skeleton_default, {
      className: `${classPrefix24}-skeleton-line-4`,
      animated: true
    })) : import_react129.default.createElement(check_list_default, {
      value: [value[index]],
      onChange: (selectValue) => onItemSelect(selectValue[0], index),
      activeIcon: props.activeIcon
    }, level.options.map((option) => {
      const active = value[index] === option.value;
      return import_react129.default.createElement(check_list_default.Item, {
        value: option.value,
        key: option.value,
        disabled: option.disabled,
        className: (0, import_classnames18.default)(`${classPrefix24}-item`, {
          [`${classPrefix24}-item-active`]: active
        })
      }, option.label);
    }))));
  }))));
};

// node_modules/antd-mobile/es/components/cascader-view/index.js
var cascader_view_default = attachPropertiesToComponent(CascaderView, {
  optionSkeleton
});

// node_modules/antd-mobile/es/components/cascader/cascader.js
var classPrefix25 = `adm-cascader`;
var defaultProps15 = {
  defaultValue: [],
  destroyOnClose: true,
  forceRender: false
};
var Cascader = (0, import_react130.forwardRef)((p, ref) => {
  var _a;
  const {
    locale
  } = useConfig();
  const props = mergeProps(defaultProps15, {
    confirmText: locale.common.confirm,
    cancelText: locale.common.cancel,
    placeholder: locale.Cascader.placeholder
  }, p);
  const [visible, setVisible] = usePropsValue({
    value: props.visible,
    defaultValue: false,
    onChange: (v) => {
      var _a2;
      if (v === false) {
        (_a2 = props.onClose) === null || _a2 === void 0 ? void 0 : _a2.call(props);
      }
    }
  });
  const actions = {
    toggle: () => {
      setVisible((v) => !v);
    },
    open: () => {
      setVisible(true);
    },
    close: () => {
      setVisible(false);
    }
  };
  (0, import_react130.useImperativeHandle)(ref, () => actions);
  const [value, setValue] = usePropsValue(Object.assign(Object.assign({}, props), {
    onChange: (val) => {
      var _a2;
      (_a2 = props.onConfirm) === null || _a2 === void 0 ? void 0 : _a2.call(props, val, generateValueExtend(val));
    }
  }));
  const generateValueExtend = useCascaderValueExtend(props.options);
  const [innerValue, setInnerValue] = (0, import_react130.useState)(value);
  (0, import_react130.useEffect)(() => {
    if (!visible) {
      setInnerValue(value);
    }
  }, [visible]);
  (0, import_react130.useEffect)(() => {
    if (!visible) {
      setInnerValue(value);
    }
  }, [value]);
  const cascaderElement = withNativeProps(props, import_react130.default.createElement("div", {
    className: classPrefix25
  }, import_react130.default.createElement("div", {
    className: `${classPrefix25}-header`
  }, import_react130.default.createElement("a", {
    className: `${classPrefix25}-header-button`,
    onClick: () => {
      var _a2;
      (_a2 = props.onCancel) === null || _a2 === void 0 ? void 0 : _a2.call(props);
      setVisible(false);
    }
  }, props.cancelText), import_react130.default.createElement("div", {
    className: `${classPrefix25}-header-title`
  }, props.title), import_react130.default.createElement("a", {
    className: `${classPrefix25}-header-button`,
    onClick: () => {
      setValue(innerValue, true);
      setVisible(false);
    }
  }, props.confirmText)), import_react130.default.createElement("div", {
    className: `${classPrefix25}-body`
  }, import_react130.default.createElement(cascader_view_default, Object.assign({}, props, {
    value: innerValue,
    onChange: (val, ext) => {
      var _a2;
      setInnerValue(val);
      if (visible) {
        (_a2 = props.onSelect) === null || _a2 === void 0 ? void 0 : _a2.call(props, val, ext);
      }
    }
  })))));
  const popupElement = import_react130.default.createElement(popup_default, {
    visible,
    position: "bottom",
    onMaskClick: () => {
      var _a2;
      (_a2 = props.onCancel) === null || _a2 === void 0 ? void 0 : _a2.call(props);
      setVisible(false);
    },
    getContainer: props.getContainer,
    destroyOnClose: props.destroyOnClose,
    forceRender: props.forceRender,
    afterShow: props.afterShow,
    afterClose: props.afterClose,
    onClick: props.onClick,
    stopPropagation: props.stopPropagation
  }, cascaderElement);
  return import_react130.default.createElement(import_react130.default.Fragment, null, popupElement, (_a = props.children) === null || _a === void 0 ? void 0 : _a.call(props, generateValueExtend(value).items, actions));
});

// node_modules/antd-mobile/es/components/cascader/prompt.js
var import_react131 = __toESM(require_react());
function prompt3(props) {
  return new Promise((resolve) => {
    const Wrapper2 = () => {
      const [visible, setVisible] = (0, import_react131.useState)(false);
      (0, import_react131.useEffect)(() => {
        setVisible(true);
      }, []);
      return import_react131.default.createElement(Cascader, Object.assign({}, props, {
        visible,
        onConfirm: (val, extend) => {
          var _a;
          (_a = props.onConfirm) === null || _a === void 0 ? void 0 : _a.call(props, val, extend);
          resolve(val);
        },
        onClose: () => {
          var _a;
          (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
          setVisible(false);
          resolve(null);
        },
        afterClose: () => {
          var _a;
          (_a = props.afterClose) === null || _a === void 0 ? void 0 : _a.call(props);
          unmount2();
        }
      }));
    };
    const unmount2 = renderToBody(import_react131.default.createElement(Wrapper2, null));
  });
}

// node_modules/antd-mobile/es/components/cascader/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/cascader/cascader.css";
var cascader_default = attachPropertiesToComponent(Cascader, {
  prompt: prompt3,
  optionSkeleton
});

// node_modules/antd-mobile/es/components/center-popup/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/center-popup/center-popup.css";

// node_modules/antd-mobile/es/components/center-popup/center-popup.js
var import_react132 = __toESM(require_react());
var import_classnames19 = __toESM(require_classnames());
var defaultProps16 = Object.assign(Object.assign({}, defaultPopupBaseProps), {
  getContainer: null
});
var CenterPopup = (p) => {
  const props = mergeProps(defaultProps16, p);
  const unmountedRef = useUnmountedRef_default();
  const style = useSpring({
    scale: props.visible ? 1 : 0.8,
    opacity: props.visible ? 1 : 0,
    config: {
      mass: 1.2,
      tension: 200,
      friction: 25,
      clamp: true
    },
    onRest: () => {
      var _a, _b;
      if (unmountedRef.current)
        return;
      setActive(props.visible);
      if (props.visible) {
        (_a = props.afterShow) === null || _a === void 0 ? void 0 : _a.call(props);
      } else {
        (_b = props.afterClose) === null || _b === void 0 ? void 0 : _b.call(props);
      }
    }
  });
  const [active, setActive] = (0, import_react132.useState)(props.visible);
  useIsomorphicLayoutEffect_default(() => {
    if (props.visible) {
      setActive(true);
    }
  }, [props.visible]);
  const ref = (0, import_react132.useRef)(null);
  useLockScroll(ref, props.disableBodyScroll && active);
  const maskVisible = useInnerVisible(active && props.visible);
  const body = import_react132.default.createElement("div", {
    className: (0, import_classnames19.default)("adm-center-popup-body", props.bodyClassName),
    style: props.bodyStyle
  }, props.children);
  const node = withStopPropagation(props.stopPropagation, withNativeProps(props, import_react132.default.createElement("div", {
    className: "adm-center-popup",
    style: {
      display: active ? void 0 : "none",
      pointerEvents: active ? void 0 : "none"
    }
  }, props.mask && import_react132.default.createElement(mask_default, {
    visible: maskVisible,
    forceRender: props.forceRender,
    destroyOnClose: props.destroyOnClose,
    onMaskClick: (e) => {
      var _a, _b;
      (_a = props.onMaskClick) === null || _a === void 0 ? void 0 : _a.call(props, e);
      if (props.closeOnMaskClick) {
        (_b = props.onClose) === null || _b === void 0 ? void 0 : _b.call(props);
      }
    },
    style: props.maskStyle,
    className: (0, import_classnames19.default)("adm-center-popup-mask", props.maskClassName),
    disableBodyScroll: false,
    stopPropagation: props.stopPropagation
  }), import_react132.default.createElement("div", {
    className: "adm-center-popup-wrap",
    role: props.role,
    "aria-label": props["aria-label"]
  }, import_react132.default.createElement(animated.div, {
    style,
    ref
  }, props.showCloseButton && import_react132.default.createElement("a", {
    className: (0, import_classnames19.default)("adm-center-popup-close", "adm-plain-anchor"),
    onClick: () => {
      var _a;
      (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
    }
  }, import_react132.default.createElement(CloseOutline_default, null)), body)))));
  return import_react132.default.createElement(ShouldRender, {
    active,
    forceRender: props.forceRender,
    destroyOnClose: props.destroyOnClose
  }, renderToContainer(props.getContainer, node));
};

// node_modules/antd-mobile/es/components/center-popup/index.js
var center_popup_default = CenterPopup;

// node_modules/antd-mobile/es/components/checkbox/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/checkbox/checkbox.css";

// node_modules/antd-mobile/es/components/checkbox/group.js
var import_react134 = __toESM(require_react());

// node_modules/antd-mobile/es/components/checkbox/group-context.js
var import_react133 = __toESM(require_react());
var CheckboxGroupContext = (0, import_react133.createContext)(null);

// node_modules/antd-mobile/es/components/checkbox/group.js
var defaultProps17 = {
  disabled: false,
  defaultValue: []
};
var Group = (p) => {
  const props = mergeProps(defaultProps17, p);
  const [value, setValue] = usePropsValue(props);
  return import_react134.default.createElement(
    CheckboxGroupContext.Provider,
    {
      value: {
        value,
        disabled: props.disabled,
        check: (v) => {
          setValue([...value, v]);
        },
        uncheck: (v) => {
          setValue(value.filter((item) => item !== v));
        }
      }
    },
    props.children
  );
};

// node_modules/antd-mobile/es/components/checkbox/checkbox.js
var import_react138 = __toESM(require_react());
var import_classnames20 = __toESM(require_classnames());

// node_modules/antd-mobile/es/components/checkbox/check-icon.js
var import_react135 = __toESM(require_react());
var CheckIcon = (0, import_react135.memo)((props) => {
  return withNativeProps(props, import_react135.default.createElement("svg", {
    viewBox: "0 0 40 40"
  }, import_react135.default.createElement("path", {
    d: "M31.5541766,15 L28.0892433,15 L28.0892434,15 C27.971052,15 27.8576674,15.044522 27.7740471,15.1239792 L18.2724722,24.1625319 L13.2248725,19.3630279 L13.2248725,19.3630279 C13.1417074,19.2834412 13.0287551,19.2384807 12.9107898,19.2380079 L9.44474455,19.2380079 L9.44474454,19.2380079 C9.19869815,19.2384085 8.99957935,19.4284738 9,19.66253 C9,19.7747587 9.04719253,19.8823283 9.13066188,19.9616418 L17.0907466,27.5338228 C17.4170809,27.8442545 17.8447695,28 18.2713393,28 L18.2980697,28 C18.7168464,27.993643 19.133396,27.8378975 19.4530492,27.5338228 L31.8693384,15.7236361 L31.8693384,15.7236361 C32.0434167,15.5582251 32.0435739,15.2898919 31.8696892,15.1242941 C31.7860402,15.0446329 31.6725052,15 31.5541421,15 L31.5541766,15 Z",
    fill: "currentColor"
  })));
});

// node_modules/antd-mobile/es/components/checkbox/indeterminate-icon.js
var import_react136 = __toESM(require_react());
var IndeterminateIcon = (0, import_react136.memo)((props) => {
  return withNativeProps(props, import_react136.default.createElement("svg", {
    viewBox: "0 0 40 40"
  }, import_react136.default.createElement("path", {
    d: "M20,9 C26.0752953,9 31,13.9247047 31,20 C31,26.0752953 26.0752953,31 20,31 C13.9247047,31 9,26.0752953 9,20 C9,13.9247047 13.9247047,9 20,9 Z",
    fill: "currentColor"
  })));
});

// node_modules/antd-mobile/es/components/checkbox/native-input.js
var import_react137 = __toESM(require_react());
var NativeInput = (props) => {
  const inputRef = (0, import_react137.useRef)(null);
  const handleClick = useMemoizedFn_default((e) => {
    e.stopPropagation();
    e.stopImmediatePropagation();
    const latestChecked = e.target.checked;
    if (latestChecked === props.checked)
      return;
    props.onChange(latestChecked);
  });
  (0, import_react137.useEffect)(() => {
    if (props.disabled)
      return;
    if (!inputRef.current)
      return;
    const input = inputRef.current;
    input.addEventListener("click", handleClick);
    return () => {
      input.removeEventListener("click", handleClick);
    };
  }, [props.disabled, props.onChange]);
  return import_react137.default.createElement("input", {
    ref: inputRef,
    type: props.type,
    checked: props.checked,
    onChange: () => {
    },
    disabled: props.disabled,
    id: props.id
  });
};

// node_modules/antd-mobile/es/components/checkbox/checkbox.js
var classPrefix26 = `adm-checkbox`;
var defaultProps18 = {
  defaultChecked: false,
  indeterminate: false
};
var Checkbox = (0, import_react138.forwardRef)((p, ref) => {
  const groupContext = (0, import_react138.useContext)(CheckboxGroupContext);
  const props = mergeProps(defaultProps18, p);
  let [checked, setChecked] = usePropsValue({
    value: props.checked,
    defaultValue: props.defaultChecked,
    onChange: props.onChange
  });
  let disabled = props.disabled;
  const {
    value
  } = props;
  if (groupContext && value !== void 0) {
    if (isDev2) {
      if (p.checked !== void 0) {
        devWarning("Checkbox", "When used within `Checkbox.Group`, the `checked` prop of `Checkbox` will not work.");
      }
      if (p.defaultChecked !== void 0) {
        devWarning("Checkbox", "When used within `Checkbox.Group`, the `defaultChecked` prop of `Checkbox` will not work.");
      }
    }
    checked = groupContext.value.includes(value);
    setChecked = (checked2) => {
      var _a;
      if (checked2) {
        groupContext.check(value);
      } else {
        groupContext.uncheck(value);
      }
      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, checked2);
    };
    disabled = disabled || groupContext.disabled;
  }
  (0, import_react138.useImperativeHandle)(ref, () => ({
    check: () => {
      setChecked(true);
    },
    uncheck: () => {
      setChecked(false);
    },
    toggle: () => {
      setChecked(!checked);
    }
  }));
  const renderIcon = () => {
    if (props.icon) {
      return import_react138.default.createElement("div", {
        className: `${classPrefix26}-custom-icon`
      }, props.icon(checked, props.indeterminate));
    }
    return import_react138.default.createElement("div", {
      className: `${classPrefix26}-icon`
    }, props.indeterminate ? import_react138.default.createElement(IndeterminateIcon, null) : checked && import_react138.default.createElement(CheckIcon, null));
  };
  return withNativeProps(props, import_react138.default.createElement("label", {
    className: (0, import_classnames20.default)(classPrefix26, {
      [`${classPrefix26}-checked`]: checked && !props.indeterminate,
      [`${classPrefix26}-indeterminate`]: props.indeterminate,
      [`${classPrefix26}-disabled`]: disabled,
      [`${classPrefix26}-block`]: props.block
    })
  }, import_react138.default.createElement(NativeInput, {
    type: "checkbox",
    checked,
    onChange: setChecked,
    disabled,
    id: props.id
  }), renderIcon(), props.children && import_react138.default.createElement("div", {
    className: `${classPrefix26}-content`
  }, props.children)));
});

// node_modules/antd-mobile/es/components/checkbox/index.js
var checkbox_default = attachPropertiesToComponent(Checkbox, {
  Group
});

// node_modules/antd-mobile/es/components/collapse/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/collapse/collapse.css";

// node_modules/antd-mobile/es/components/collapse/collapse.js
var import_react139 = __toESM(require_react());
var import_classnames21 = __toESM(require_classnames());
var classPrefix27 = `adm-collapse`;
var CollapsePanel = () => {
  return null;
};
var CollapsePanelContent = (props) => {
  const {
    visible
  } = props;
  const innerRef = (0, import_react139.useRef)(null);
  const shouldRender = useShouldRender(visible, props.forceRender, props.destroyOnClose);
  const [{
    height
  }, api] = useSpring(() => ({
    from: {
      height: 0
    },
    config: {
      precision: 0.01,
      mass: 1,
      tension: 200,
      friction: 25,
      clamp: true
    }
  }));
  useMount_default(() => {
    if (!visible)
      return;
    const inner = innerRef.current;
    if (!inner)
      return;
    api.start({
      height: inner.offsetHeight,
      immediate: true
    });
  });
  useIsomorphicUpdateLayoutEffect(() => {
    const inner = innerRef.current;
    if (!inner)
      return;
    if (visible) {
      api.start({
        height: inner.offsetHeight
      });
    } else {
      api.start({
        height: inner.offsetHeight,
        immediate: true
      });
      api.start({
        height: 0
      });
    }
  }, [visible]);
  return import_react139.default.createElement(animated.div, {
    className: `${classPrefix27}-panel-content`,
    style: {
      height: height.to((v) => {
        if (height.idle && visible) {
          return "auto";
        } else {
          return v;
        }
      })
    }
  }, import_react139.default.createElement("div", {
    className: `${classPrefix27}-panel-content-inner`,
    ref: innerRef
  }, import_react139.default.createElement(list_default.Item, null, shouldRender && props.children)));
};
var Collapse = (props) => {
  var _a;
  const panels = [];
  traverseReactNode(props.children, (child) => {
    if (!import_react139.default.isValidElement(child))
      return;
    const key = child.key;
    if (typeof key !== "string")
      return;
    panels.push(child);
  });
  const [activeKey, setActiveKey] = usePropsValue(props.accordion ? {
    value: props.activeKey === void 0 ? void 0 : props.activeKey === null ? [] : [props.activeKey],
    defaultValue: props.defaultActiveKey === void 0 || props.defaultActiveKey === null ? [] : [props.defaultActiveKey],
    onChange: (v) => {
      var _a2, _b;
      (_a2 = props.onChange) === null || _a2 === void 0 ? void 0 : _a2.call(props, (_b = v[0]) !== null && _b !== void 0 ? _b : null);
    }
  } : {
    value: props.activeKey,
    defaultValue: (_a = props.defaultActiveKey) !== null && _a !== void 0 ? _a : [],
    onChange: props.onChange
  });
  const activeKeyList = activeKey === null ? [] : Array.isArray(activeKey) ? activeKey : [activeKey];
  return withNativeProps(props, import_react139.default.createElement("div", {
    className: classPrefix27
  }, import_react139.default.createElement(list_default, null, panels.map((panel) => {
    const key = panel.key;
    const active = activeKeyList.includes(key);
    function handleClick(event) {
      var _a2, _b;
      if (props.accordion) {
        if (active) {
          setActiveKey([]);
        } else {
          setActiveKey([key]);
        }
      } else {
        if (active) {
          setActiveKey(activeKeyList.filter((v) => v !== key));
        } else {
          setActiveKey([...activeKeyList, key]);
        }
      }
      (_b = (_a2 = panel.props).onClick) === null || _b === void 0 ? void 0 : _b.call(_a2, event);
    }
    const renderArrow = () => {
      let arrow2 = import_react139.default.createElement(DownOutline_default, null);
      if (props.arrow !== void 0) {
        arrow2 = props.arrow;
      }
      if (panel.props.arrow !== void 0) {
        arrow2 = panel.props.arrow;
      }
      return typeof arrow2 === "function" ? arrow2(active) : import_react139.default.createElement("div", {
        className: (0, import_classnames21.default)(`${classPrefix27}-arrow`, {
          [`${classPrefix27}-arrow-active`]: active
        })
      }, arrow2);
    };
    return import_react139.default.createElement(import_react139.default.Fragment, {
      key
    }, withNativeProps(panel.props, import_react139.default.createElement(list_default.Item, {
      className: `${classPrefix27}-panel-header`,
      onClick: handleClick,
      disabled: panel.props.disabled,
      arrow: renderArrow()
    }, panel.props.title)), import_react139.default.createElement(CollapsePanelContent, {
      visible: active,
      forceRender: !!panel.props.forceRender,
      destroyOnClose: !!panel.props.destroyOnClose
    }, panel.props.children));
  }))));
};

// node_modules/antd-mobile/es/components/collapse/index.js
var collapse_default = attachPropertiesToComponent(Collapse, {
  Panel: CollapsePanel
});

// node_modules/antd-mobile/es/components/date-picker/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/date-picker/date-picker.css";

// node_modules/antd-mobile/es/components/date-picker/date-picker.js
var import_react140 = __toESM(require_react());

// node_modules/antd-mobile/es/components/date-picker/date-picker-date-utils.js
var import_dayjs3 = __toESM(require_dayjs_min());
var import_isoWeek2 = __toESM(require_isoWeek());
var import_isoWeeksInYear = __toESM(require_isoWeeksInYear());
var import_isLeapYear = __toESM(require_isLeapYear());
import_dayjs3.default.extend(import_isoWeek2.default);
import_dayjs3.default.extend(import_isoWeeksInYear.default);
import_dayjs3.default.extend(import_isLeapYear.default);
var precisionRankRecord = {
  year: 0,
  month: 1,
  day: 2,
  hour: 3,
  minute: 4,
  second: 5
};
function defaultRenderLabel2(type, data) {
  switch (type) {
    case "minute":
    case "second":
    case "hour":
      return ("0" + data.toString()).slice(-2);
    default:
      return data.toString();
  }
}
function generateDatePickerColumns(selected, min3, max3, precision, renderLabel, filter) {
  const ret = [];
  const minYear = min3.getFullYear();
  const minMonth = min3.getMonth() + 1;
  const minDay = min3.getDate();
  const minHour = min3.getHours();
  const minMinute = min3.getMinutes();
  const minSecond = min3.getSeconds();
  const maxYear = max3.getFullYear();
  const maxMonth = max3.getMonth() + 1;
  const maxDay = max3.getDate();
  const maxHour = max3.getHours();
  const maxMinute = max3.getMinutes();
  const maxSecond = max3.getSeconds();
  const rank = precisionRankRecord[precision];
  const selectedYear = parseInt(selected[0]);
  const firstDayInSelectedMonth = (0, import_dayjs3.default)(convertStringArrayToDate([selected[0], selected[1], "1"]));
  const selectedMonth = parseInt(selected[1]);
  const selectedDay = parseInt(selected[2]);
  const selectedHour = parseInt(selected[3]);
  const selectedMinute = parseInt(selected[4]);
  const isInMinYear = selectedYear === minYear;
  const isInMaxYear = selectedYear === maxYear;
  const isInMinMonth = isInMinYear && selectedMonth === minMonth;
  const isInMaxMonth = isInMaxYear && selectedMonth === maxMonth;
  const isInMinDay = isInMinMonth && selectedDay === minDay;
  const isInMaxDay = isInMaxMonth && selectedDay === maxDay;
  const isInMinHour = isInMinDay && selectedHour === minHour;
  const isInMaxHour = isInMaxDay && selectedHour === maxHour;
  const isInMinMinute = isInMinHour && selectedMinute === minMinute;
  const isInMaxMinute = isInMaxHour && selectedMinute === maxMinute;
  const generateColumn = (from, to3, precision2) => {
    let column = [];
    for (let i = from; i <= to3; i++) {
      column.push(i);
    }
    const prefix2 = selected.slice(0, precisionRankRecord[precision2]);
    const currentFilter = filter === null || filter === void 0 ? void 0 : filter[precision2];
    if (currentFilter && typeof currentFilter === "function") {
      column = column.filter((i) => currentFilter(i, {
        get date() {
          const stringArray = [...prefix2, i.toString()];
          return convertStringArrayToDate(stringArray);
        }
      }));
    }
    return column;
  };
  if (rank >= precisionRankRecord.year) {
    const lower = minYear;
    const upper = maxYear;
    const years = generateColumn(lower, upper, "year");
    ret.push(years.map((v) => {
      return {
        label: renderLabel("year", v),
        value: v.toString()
      };
    }));
  }
  if (rank >= precisionRankRecord.month) {
    const lower = isInMinYear ? minMonth : 1;
    const upper = isInMaxYear ? maxMonth : 12;
    const months = generateColumn(lower, upper, "month");
    ret.push(months.map((v) => {
      return {
        label: renderLabel("month", v),
        value: v.toString()
      };
    }));
  }
  if (rank >= precisionRankRecord.day) {
    const lower = isInMinMonth ? minDay : 1;
    const upper = isInMaxMonth ? maxDay : firstDayInSelectedMonth.daysInMonth();
    const days = generateColumn(lower, upper, "day");
    ret.push(days.map((v) => {
      return {
        label: renderLabel("day", v),
        value: v.toString()
      };
    }));
  }
  if (rank >= precisionRankRecord.hour) {
    const lower = isInMinDay ? minHour : 0;
    const upper = isInMaxDay ? maxHour : 23;
    const hours = generateColumn(lower, upper, "hour");
    ret.push(hours.map((v) => {
      return {
        label: renderLabel("hour", v),
        value: v.toString()
      };
    }));
  }
  if (rank >= precisionRankRecord.minute) {
    const lower = isInMinHour ? minMinute : 0;
    const upper = isInMaxHour ? maxMinute : 59;
    const minutes = generateColumn(lower, upper, "minute");
    ret.push(minutes.map((v) => {
      return {
        label: renderLabel("minute", v),
        value: v.toString()
      };
    }));
  }
  if (rank >= precisionRankRecord.second) {
    const lower = isInMinMinute ? minSecond : 0;
    const upper = isInMaxMinute ? maxSecond : 59;
    const seconds = generateColumn(lower, upper, "second");
    ret.push(seconds.map((v) => {
      return {
        label: renderLabel("second", v),
        value: v.toString()
      };
    }));
  }
  return ret;
}
function convertDateToStringArray(date) {
  if (!date)
    return [];
  return [date.getFullYear().toString(), (date.getMonth() + 1).toString(), date.getDate().toString(), date.getHours().toString(), date.getMinutes().toString(), date.getSeconds().toString()];
}
function convertStringArrayToDate(value) {
  var _a, _b, _c, _d, _e, _f;
  const yearString = (_a = value[0]) !== null && _a !== void 0 ? _a : "1900";
  const monthString = (_b = value[1]) !== null && _b !== void 0 ? _b : "1";
  const dateString = (_c = value[2]) !== null && _c !== void 0 ? _c : "1";
  const hourString = (_d = value[3]) !== null && _d !== void 0 ? _d : "0";
  const minuteString = (_e = value[4]) !== null && _e !== void 0 ? _e : "0";
  const secondString = (_f = value[5]) !== null && _f !== void 0 ? _f : "0";
  return new Date(parseInt(yearString), parseInt(monthString) - 1, parseInt(dateString), parseInt(hourString), parseInt(minuteString), parseInt(secondString));
}

// node_modules/antd-mobile/es/components/date-picker/date-picker-week-utils.js
var import_dayjs4 = __toESM(require_dayjs_min());
var import_isoWeek3 = __toESM(require_isoWeek());
var import_isoWeeksInYear2 = __toESM(require_isoWeeksInYear());
var import_isLeapYear2 = __toESM(require_isLeapYear());
import_dayjs4.default.extend(import_isoWeek3.default);
import_dayjs4.default.extend(import_isoWeeksInYear2.default);
import_dayjs4.default.extend(import_isLeapYear2.default);
var precisionRankRecord2 = {
  year: 0,
  week: 1,
  "week-day": 2
};
function defaultRenderLabel3(type, data) {
  return data.toString();
}
function generateDatePickerColumns2(selected, min3, max3, precision, renderLabel, filter) {
  const ret = [];
  const minYear = min3.getFullYear();
  const maxYear = max3.getFullYear();
  const rank = precisionRankRecord2[precision];
  const selectedYear = parseInt(selected[0]);
  const isInMinYear = selectedYear === minYear;
  const isInMaxYear = selectedYear === maxYear;
  const minDay = (0, import_dayjs4.default)(min3);
  const maxDay = (0, import_dayjs4.default)(max3);
  const minWeek = minDay.isoWeek();
  const maxWeek = maxDay.isoWeek();
  const minWeekday = minDay.isoWeekday();
  const maxWeekday = maxDay.isoWeekday();
  const selectedWeek = parseInt(selected[1]);
  const isInMinWeek = isInMinYear && selectedWeek === minWeek;
  const isInMaxWeek = isInMaxYear && selectedWeek === maxWeek;
  const selectedYearWeeks = (0, import_dayjs4.default)(`${selectedYear}-01-01`).isoWeeksInYear();
  const generateColumn = (from, to3, precision2) => {
    let column = [];
    for (let i = from; i <= to3; i++) {
      column.push(i);
    }
    const prefix2 = selected.slice(0, precisionRankRecord2[precision2]);
    const currentFilter = filter === null || filter === void 0 ? void 0 : filter[precision2];
    if (currentFilter && typeof currentFilter === "function") {
      column = column.filter((i) => currentFilter(i, {
        get date() {
          const stringArray = [...prefix2, i.toString()];
          return convertStringArrayToDate2(stringArray);
        }
      }));
    }
    return column;
  };
  if (rank >= precisionRankRecord2.year) {
    const lower = minYear;
    const upper = maxYear;
    const years = generateColumn(lower, upper, "year");
    ret.push(years.map((v) => {
      return {
        label: renderLabel("year", v),
        value: v.toString()
      };
    }));
  }
  if (rank >= precisionRankRecord2.week) {
    const lower = isInMinYear ? minWeek : 1;
    const upper = isInMaxYear ? maxWeek : selectedYearWeeks;
    const weeks = generateColumn(lower, upper, "week");
    ret.push(weeks.map((v) => {
      return {
        label: renderLabel("week", v),
        value: v.toString()
      };
    }));
  }
  if (rank >= precisionRankRecord2["week-day"]) {
    const lower = isInMinWeek ? minWeekday : 1;
    const upper = isInMaxWeek ? maxWeekday : 7;
    const weeks = generateColumn(lower, upper, "week-day");
    ret.push(weeks.map((v) => {
      return {
        label: renderLabel("week-day", v),
        value: v.toString()
      };
    }));
  }
  return ret;
}
function convertDateToStringArray2(date) {
  if (!date)
    return [];
  const day = (0, import_dayjs4.default)(date);
  return [day.isoWeekYear().toString(), day.isoWeek().toString(), day.isoWeekday().toString()];
}
function convertStringArrayToDate2(value) {
  var _a, _b, _c;
  const yearString = (_a = value[0]) !== null && _a !== void 0 ? _a : "1900";
  const weekString = (_b = value[1]) !== null && _b !== void 0 ? _b : "1";
  const weekdayString = (_c = value[2]) !== null && _c !== void 0 ? _c : "1";
  const day = (0, import_dayjs4.default)().year(parseInt(yearString)).isoWeek(parseInt(weekString)).isoWeekday(parseInt(weekdayString)).hour(0).minute(0).second(0);
  return day.toDate();
}

// node_modules/antd-mobile/es/components/date-picker/date-picker-utils.js
var precisionLengthRecord = {
  year: 1,
  month: 2,
  day: 3,
  hour: 4,
  minute: 5,
  second: 6
};
var convertDateToStringArray3 = (date, precision) => {
  if (precision.includes("week")) {
    return convertDateToStringArray2(date);
  } else {
    const datePrecision = precision;
    const stringArray = convertDateToStringArray(date);
    return stringArray.slice(0, precisionLengthRecord[datePrecision]);
  }
};
var convertStringArrayToDate3 = (value, precision) => {
  if (precision.includes("week")) {
    return convertStringArrayToDate2(value);
  } else {
    return convertStringArrayToDate(value);
  }
};
var generateDatePickerColumns3 = (selected, min3, max3, precision, renderLabel, filter) => {
  if (precision.startsWith("week")) {
    return generateDatePickerColumns2(selected, min3, max3, precision, renderLabel, filter);
  } else {
    return generateDatePickerColumns(selected, min3, max3, precision, renderLabel, filter);
  }
};
var defaultRenderLabel4 = (precision, data) => {
  if (precision.includes("week")) {
    return defaultRenderLabel3(precision, data);
  } else {
    return defaultRenderLabel2(precision, data);
  }
};

// node_modules/antd-mobile/es/components/date-picker/date-picker.js
var thisYear = new Date().getFullYear();
var defaultProps19 = {
  min: new Date(new Date().setFullYear(thisYear - 10)),
  max: new Date(new Date().setFullYear(thisYear + 10)),
  precision: "day",
  renderLabel: defaultRenderLabel4,
  defaultValue: null
};
var DatePicker = (0, import_react140.forwardRef)((p, ref) => {
  const props = mergeProps(defaultProps19, p);
  const [value, setValue] = usePropsValue({
    value: props.value,
    defaultValue: props.defaultValue,
    onChange: (v) => {
      var _a;
      if (v === null)
        return;
      (_a = props.onConfirm) === null || _a === void 0 ? void 0 : _a.call(props, v);
    }
  });
  const now = (0, import_react140.useMemo)(() => new Date(), []);
  const pickerValue = (0, import_react140.useMemo)(() => {
    let date = value !== null && value !== void 0 ? value : now;
    date = new Date(bound(date.getTime(), props.min.getTime(), props.max.getTime()));
    return convertDateToStringArray3(date, props.precision);
  }, [value, props.precision, props.min, props.max]);
  const onConfirm = (0, import_react140.useCallback)((val) => {
    setValue(convertStringArrayToDate3(val, props.precision), true);
  }, [setValue, props.precision]);
  const onSelect = useMemoizedFn_default((val) => {
    var _a;
    const date = convertStringArrayToDate3(val, props.precision);
    (_a = props.onSelect) === null || _a === void 0 ? void 0 : _a.call(props, date);
  });
  const columns = (0, import_react140.useCallback)((selected) => generateDatePickerColumns3(selected, props.min, props.max, props.precision, props.renderLabel, props.filter), [props.min, props.max, props.precision, props.renderLabel]);
  return withNativeProps(props, import_react140.default.createElement(picker_default, {
    ref,
    columns,
    value: pickerValue,
    onCancel: props.onCancel,
    onClose: props.onClose,
    closeOnMaskClick: props.closeOnMaskClick,
    visible: props.visible,
    confirmText: props.confirmText,
    cancelText: props.cancelText,
    onConfirm,
    onSelect,
    getContainer: props.getContainer,
    loading: props.loading,
    loadingContent: props.loadingContent,
    afterShow: props.afterShow,
    afterClose: props.afterClose,
    onClick: props.onClick,
    title: props.title,
    stopPropagation: props.stopPropagation,
    mouseWheel: props.mouseWheel,
    destroyOnClose: props.destroyOnClose,
    forceRender: props.forceRender
  }, (_, actions) => {
    var _a;
    return (_a = props.children) === null || _a === void 0 ? void 0 : _a.call(props, value, actions);
  }));
});

// node_modules/antd-mobile/es/components/date-picker/prompt.js
var import_react141 = __toESM(require_react());
function prompt4(props) {
  return new Promise((resolve) => {
    const Wrapper2 = () => {
      const [visible, setVisible] = (0, import_react141.useState)(false);
      (0, import_react141.useEffect)(() => {
        setVisible(true);
      }, []);
      return import_react141.default.createElement(DatePicker, Object.assign({}, props, {
        visible,
        onConfirm: (val) => {
          var _a;
          (_a = props.onConfirm) === null || _a === void 0 ? void 0 : _a.call(props, val);
          resolve(val);
        },
        onClose: () => {
          var _a;
          (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
          setVisible(false);
          resolve(null);
        },
        afterClose: () => {
          var _a;
          (_a = props.afterClose) === null || _a === void 0 ? void 0 : _a.call(props);
          unmount2();
        }
      }));
    };
    const unmount2 = renderToBody(import_react141.default.createElement(Wrapper2, null));
  });
}

// node_modules/antd-mobile/es/components/date-picker/index.js
var date_picker_default = attachPropertiesToComponent(DatePicker, {
  prompt: prompt4
});

// node_modules/antd-mobile/es/components/date-picker-view/date-picker-view.js
var import_react142 = __toESM(require_react());
var thisYear2 = new Date().getFullYear();
var defaultProps20 = {
  min: new Date(new Date().setFullYear(thisYear2 - 10)),
  max: new Date(new Date().setFullYear(thisYear2 + 10)),
  precision: "day",
  renderLabel: defaultRenderLabel4
};
var DatePickerView = (p) => {
  var _a;
  const props = mergeProps(defaultProps20, p);
  const [value, setValue] = usePropsValue({
    value: props.value,
    defaultValue: (_a = props.defaultValue) !== null && _a !== void 0 ? _a : null
  });
  const pickerValue = (0, import_react142.useMemo)(() => convertDateToStringArray3(value, props.precision), [value, props.precision]);
  const onChange = (0, import_react142.useCallback)((val) => {
    var _a2;
    const date = convertStringArrayToDate3(val, props.precision);
    if (date) {
      setValue(date);
      (_a2 = props.onChange) === null || _a2 === void 0 ? void 0 : _a2.call(props, date);
    }
  }, [props.onChange, props.precision]);
  return withNativeProps(props, import_react142.default.createElement(picker_view_default, {
    columns: (selected) => generateDatePickerColumns3(selected, props.min, props.max, props.precision, props.renderLabel, props.filter),
    loading: props.loading,
    loadingContent: props.loadingContent,
    value: pickerValue,
    mouseWheel: props.mouseWheel,
    onChange
  }));
};

// node_modules/antd-mobile/es/components/date-picker-view/index.js
var date_picker_view_default = DatePickerView;

// node_modules/antd-mobile/es/components/dialog/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/dialog/dialog.css";

// node_modules/antd-mobile/es/components/dialog/show.js
var import_react149 = __toESM(require_react());

// node_modules/antd-mobile/es/components/dialog/dialog.js
var import_react148 = __toESM(require_react());
var import_classnames23 = __toESM(require_classnames());

// node_modules/antd-mobile/es/components/dialog/dialog-action-button.js
var import_react143 = __toESM(require_react());
var import_classnames22 = __toESM(require_classnames());
var DialogActionButton = (props) => {
  const {
    action
  } = props;
  return withNativeProps(props.action, import_react143.default.createElement(button_default, {
    key: action.key,
    onClick: props.onAction,
    className: (0, import_classnames22.default)("adm-dialog-button", {
      "adm-dialog-button-bold": action.bold
    }),
    fill: "none",
    shape: "rectangular",
    block: true,
    color: action.danger ? "danger" : "primary",
    loading: "auto",
    disabled: action.disabled
  }, action.text));
};

// node_modules/antd-mobile/es/components/image/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/image/image.css";

// node_modules/antd-mobile/es/components/image/image.js
var import_react147 = __toESM(require_react());
var import_staged_components = __toESM(require_staged_components());

// node_modules/antd-mobile/es/utils/to-css-length.js
function toCSSLength(val) {
  return typeof val === "number" ? `${val}px` : val;
}

// node_modules/antd-mobile/es/components/image/lazy-detector.js
var import_react144 = __toESM(require_react());
var LazyDetector = (props) => {
  const ref = (0, import_react144.useRef)(null);
  const [inViewport] = useInViewport_default(ref);
  (0, import_react144.useEffect)(() => {
    if (inViewport) {
      props.onActive();
    }
  }, [inViewport]);
  return import_react144.default.createElement("div", {
    ref
  });
};

// node_modules/antd-mobile/es/components/image/image-icon.js
var import_react145 = __toESM(require_react());
var ImageIcon = () => import_react145.default.createElement("svg", {
  viewBox: "0 0 48 48",
  xmlns: "http://www.w3.org/2000/svg"
}, import_react145.default.createElement("path", {
  d: "M41.396 6.234c1.923 0 3.487 1.574 3.487 3.505v29.14c0 1.937-1.568 3.51-3.491 3.51H6.604c-1.923 0-3.487-1.573-3.487-3.51V9.745c0-1.936 1.564-3.51 3.487-3.51Zm0 2.847H6.604c-.355 0-.654.3-.654.658V34.9l5.989-8.707a2.373 2.373 0 0 1 1.801-1.005 2.405 2.405 0 0 1 1.933.752l4.182 4.525 7.58-11.005a2.374 2.374 0 0 1 1.96-1.01c.79 0 1.532.38 1.966 1.01L42.05 34.89V9.74a.664.664 0 0 0-.654-.658Zm-28.305 2.763a3.119 3.119 0 0 1 3.117 3.117 3.119 3.119 0 0 1-3.117 3.117 3.122 3.122 0 0 1-3.117-3.117 3.119 3.119 0 0 1 3.117-3.117Z",
  fill: "#DBDBDB",
  fillRule: "nonzero"
}));

// node_modules/antd-mobile/es/components/image/broken-image-icon.js
var import_react146 = __toESM(require_react());
var BrokenImageIcon = () => import_react146.default.createElement("svg", {
  viewBox: "0 0 48 48",
  xmlns: "http://www.w3.org/2000/svg"
}, import_react146.default.createElement("path", {
  d: "M19.233 6.233 17.42 9.08l-10.817.001a.665.665 0 0 0-.647.562l-.007.096V34.9l5.989-8.707a2.373 2.373 0 0 1 1.801-1.005 2.415 2.415 0 0 1 1.807.625l.126.127 4.182 4.525 2.267-3.292 5.461 7.841-4.065 7.375H6.604c-1.86 0-3.382-1.47-3.482-3.317l-.005-.192V9.744c0-1.872 1.461-3.405 3.296-3.505l.19-.005h12.63Zm22.163 0c1.86 0 3.382 1.472 3.482 3.314l.005.192v29.14a3.507 3.507 0 0 1-3.3 3.505l-.191.006H27.789l3.63-6.587.06-.119a1.87 1.87 0 0 0-.163-1.853l-6.928-9.949 3.047-4.422a2.374 2.374 0 0 1 1.96-1.01 2.4 2.4 0 0 1 1.86.87l.106.14L42.05 34.89V9.74a.664.664 0 0 0-.654-.658H21.855l1.812-2.848h17.73Zm-28.305 5.611c.794 0 1.52.298 2.07.788l-.843 1.325-.067.114a1.87 1.87 0 0 0 .11 1.959l.848 1.217c-.556.515-1.3.83-2.118.83a3.122 3.122 0 0 1-3.117-3.116 3.119 3.119 0 0 1 3.117-3.117Z",
  fill: "#DBDBDB",
  fillRule: "nonzero"
}));

// node_modules/antd-mobile/es/components/image/image.js
var classPrefix28 = `adm-image`;
var defaultProps21 = {
  fit: "fill",
  placeholder: import_react147.default.createElement("div", {
    className: `${classPrefix28}-tip`
  }, import_react147.default.createElement(ImageIcon, null)),
  fallback: import_react147.default.createElement("div", {
    className: `${classPrefix28}-tip`
  }, import_react147.default.createElement(BrokenImageIcon, null)),
  lazy: false,
  draggable: false
};
var Image2 = (0, import_staged_components.staged)((p) => {
  const props = mergeProps(defaultProps21, p);
  const [loaded, setLoaded] = (0, import_react147.useState)(false);
  const [failed, setFailed] = (0, import_react147.useState)(false);
  const ref = (0, import_react147.useRef)(null);
  let src = props.src;
  let srcSet = props.srcSet;
  const [initialized, setInitialized] = (0, import_react147.useState)(!props.lazy);
  src = initialized ? props.src : void 0;
  srcSet = initialized ? props.srcSet : void 0;
  useIsomorphicUpdateLayoutEffect(() => {
    setLoaded(false);
    setFailed(false);
  }, [src]);
  function renderInner() {
    if (failed) {
      return import_react147.default.createElement(import_react147.default.Fragment, null, props.fallback);
    }
    const img = import_react147.default.createElement("img", {
      className: `${classPrefix28}-img`,
      src,
      alt: props.alt,
      onClick: props.onClick,
      onLoad: (e) => {
        var _a;
        setLoaded(true);
        (_a = props.onLoad) === null || _a === void 0 ? void 0 : _a.call(props, e);
      },
      onError: (e) => {
        var _a;
        setFailed(true);
        (_a = props.onError) === null || _a === void 0 ? void 0 : _a.call(props, e);
      },
      style: {
        objectFit: props.fit,
        display: loaded ? "block" : "none"
      },
      crossOrigin: props.crossOrigin,
      decoding: props.decoding,
      loading: props.loading,
      referrerPolicy: props.referrerPolicy,
      sizes: props.sizes,
      srcSet,
      useMap: props.useMap,
      draggable: props.draggable
    });
    return import_react147.default.createElement(import_react147.default.Fragment, null, !loaded && props.placeholder, img);
  }
  const style = {};
  if (props.width) {
    style["--width"] = toCSSLength(props.width);
    style["width"] = toCSSLength(props.width);
  }
  if (props.height) {
    style["--height"] = toCSSLength(props.height);
    style["height"] = toCSSLength(props.height);
  }
  return withNativeProps(props, import_react147.default.createElement("div", {
    ref,
    className: classPrefix28,
    style,
    onClick: props.onContainerClick
  }, props.lazy && !initialized && import_react147.default.createElement(LazyDetector, {
    onActive: () => {
      setInitialized(true);
    }
  }), renderInner()));
});

// node_modules/antd-mobile/es/components/image/index.js
var image_default = Image2;

// node_modules/antd-mobile/es/components/dialog/dialog.js
var defaultProps22 = {
  actions: [],
  closeOnAction: false,
  closeOnMaskClick: false,
  getContainer: null
};
var Dialog = (p) => {
  const props = mergeProps(defaultProps22, p);
  const element = import_react148.default.createElement(import_react148.default.Fragment, null, !!props.image && import_react148.default.createElement("div", {
    className: cls("image-container")
  }, import_react148.default.createElement(image_default, {
    src: props.image,
    alt: "dialog header image",
    width: "100%"
  })), !!props.header && import_react148.default.createElement("div", {
    className: cls("header")
  }, import_react148.default.createElement(auto_center_default, null, props.header)), !!props.title && import_react148.default.createElement("div", {
    className: cls("title")
  }, props.title), import_react148.default.createElement("div", {
    className: (0, import_classnames23.default)(cls("content"), !props.content && cls("content-empty"))
  }, typeof props.content === "string" ? import_react148.default.createElement(auto_center_default, null, props.content) : props.content), import_react148.default.createElement("div", {
    className: cls("footer")
  }, props.actions.map((row, index) => {
    const actions = Array.isArray(row) ? row : [row];
    return import_react148.default.createElement("div", {
      className: cls("action-row"),
      key: index
    }, actions.map((action, index2) => import_react148.default.createElement(DialogActionButton, {
      key: action.key,
      action,
      onAction: () => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c;
        yield Promise.all([(_a = action.onClick) === null || _a === void 0 ? void 0 : _a.call(action), (_b = props.onAction) === null || _b === void 0 ? void 0 : _b.call(props, action, index2)]);
        if (props.closeOnAction) {
          (_c = props.onClose) === null || _c === void 0 ? void 0 : _c.call(props);
        }
      })
    })));
  })));
  return import_react148.default.createElement(center_popup_default, {
    className: (0, import_classnames23.default)(cls(), props.className),
    style: props.style,
    afterClose: props.afterClose,
    afterShow: props.afterShow,
    onMaskClick: props.closeOnMaskClick ? () => {
      var _a;
      (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
    } : void 0,
    visible: props.visible,
    getContainer: props.getContainer,
    bodyStyle: props.bodyStyle,
    bodyClassName: (0, import_classnames23.default)(cls("body"), props.image && cls("with-image"), props.bodyClassName),
    maskStyle: props.maskStyle,
    maskClassName: props.maskClassName,
    stopPropagation: props.stopPropagation,
    disableBodyScroll: props.disableBodyScroll,
    destroyOnClose: props.destroyOnClose,
    forceRender: props.forceRender,
    role: "dialog",
    "aria-label": props["aria-label"]
  }, element);
};
function cls(name = "") {
  return "adm-dialog" + (name && "-") + name;
}

// node_modules/antd-mobile/es/components/dialog/show.js
var closeFnSet = /* @__PURE__ */ new Set();
function show(props) {
  const handler = renderImperatively(import_react149.default.createElement(Dialog, Object.assign({}, props, {
    afterClose: () => {
      var _a;
      closeFnSet.delete(handler.close);
      (_a = props.afterClose) === null || _a === void 0 ? void 0 : _a.call(props);
    }
  })));
  closeFnSet.add(handler.close);
  return handler;
}

// node_modules/antd-mobile/es/components/dialog/alert.js
function alert(p) {
  const defaultProps68 = {
    confirmText: getDefaultConfig().locale.Dialog.ok
  };
  const props = mergeProps(defaultProps68, p);
  return new Promise((resolve) => {
    show(Object.assign(Object.assign({}, props), {
      closeOnAction: true,
      actions: [{
        key: "confirm",
        text: props.confirmText
      }],
      onAction: props.onConfirm,
      onClose: () => {
        var _a;
        (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
        resolve();
      }
    }));
  });
}

// node_modules/antd-mobile/es/components/dialog/confirm.js
var defaultProps23 = {
  confirmText: "\u786E\u8BA4",
  cancelText: "\u53D6\u6D88"
};
function confirm(p) {
  const {
    locale
  } = getDefaultConfig();
  const props = mergeProps(defaultProps23, {
    confirmText: locale.common.confirm,
    cancelText: locale.common.cancel
  }, p);
  return new Promise((resolve) => {
    show(Object.assign(Object.assign({}, props), {
      closeOnAction: true,
      onClose: () => {
        var _a;
        (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
        resolve(false);
      },
      actions: [[{
        key: "cancel",
        text: props.cancelText,
        onClick: () => __awaiter(this, void 0, void 0, function* () {
          var _a;
          yield (_a = props.onCancel) === null || _a === void 0 ? void 0 : _a.call(props);
          resolve(false);
        })
      }, {
        key: "confirm",
        text: props.confirmText,
        bold: true,
        onClick: () => __awaiter(this, void 0, void 0, function* () {
          var _b;
          yield (_b = props.onConfirm) === null || _b === void 0 ? void 0 : _b.call(props);
          resolve(true);
        })
      }]]
    }));
  });
}

// node_modules/antd-mobile/es/components/dialog/clear.js
function clear() {
  closeFnSet.forEach((close) => {
    close();
  });
}

// node_modules/antd-mobile/es/components/dialog/index.js
var dialog_default = attachPropertiesToComponent(Dialog, {
  show,
  alert,
  confirm,
  clear
});

// node_modules/antd-mobile/es/components/divider/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/divider/divider.css";

// node_modules/antd-mobile/es/components/divider/divider.js
var import_react150 = __toESM(require_react());
var import_classnames24 = __toESM(require_classnames());
var classPrefix29 = `adm-divider`;
var defaultProps24 = {
  contentPosition: "center",
  direction: "horizontal"
};
var Divider = (p) => {
  const props = mergeProps(defaultProps24, p);
  return withNativeProps(props, import_react150.default.createElement("div", {
    className: (0, import_classnames24.default)(classPrefix29, `${classPrefix29}-${props.direction}`, `${classPrefix29}-${props.contentPosition}`)
  }, props.children && import_react150.default.createElement("div", {
    className: `${classPrefix29}-content`
  }, props.children)));
};

// node_modules/antd-mobile/es/components/divider/index.js
var divider_default = Divider;

// node_modules/antd-mobile/es/components/dropdown/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/dropdown/dropdown.css";

// node_modules/antd-mobile/es/components/dropdown/dropdown.js
var import_classnames26 = __toESM(require_classnames());
var import_react152 = __toESM(require_react());

// node_modules/antd-mobile/es/components/dropdown/item.js
var import_classnames25 = __toESM(require_classnames());
var import_react151 = __toESM(require_react());
var classPrefix30 = `adm-dropdown-item`;
var Item = (props) => {
  var _a;
  const cls3 = (0, import_classnames25.default)(classPrefix30, {
    [`${classPrefix30}-active`]: props.active,
    [`${classPrefix30}-highlight`]: (_a = props.highlight) !== null && _a !== void 0 ? _a : props.active
  });
  return withNativeProps(props, import_react151.default.createElement("div", {
    className: cls3,
    onClick: props.onClick
  }, import_react151.default.createElement("div", {
    className: `${classPrefix30}-title`
  }, import_react151.default.createElement("span", {
    className: `${classPrefix30}-title-text`
  }, props.title), import_react151.default.createElement("span", {
    className: (0, import_classnames25.default)(`${classPrefix30}-title-arrow`, {
      [`${classPrefix30}-title-arrow-active`]: props.active
    })
  }, props.arrow === void 0 ? import_react151.default.createElement(DownFill_default, null) : props.arrow))));
};
var item_default = Item;
var ItemChildrenWrap = (props) => {
  const {
    active = false
  } = props;
  const shouldRender = useShouldRender(active, props.forceRender, props.destroyOnClose);
  const cls3 = (0, import_classnames25.default)(`${classPrefix30}-content`, {
    [`${classPrefix30}-content-hidden`]: !active
  });
  return shouldRender ? import_react151.default.createElement("div", {
    className: cls3,
    onClick: props.onClick
  }, props.children) : null;
};

// node_modules/antd-mobile/es/components/dropdown/dropdown.js
var classPrefix31 = `adm-dropdown`;
var defaultProps25 = {
  defaultActiveKey: null,
  closeOnMaskClick: true,
  closeOnClickAway: false
};
var Dropdown = (0, import_react152.forwardRef)((p, ref) => {
  const props = mergeProps(defaultProps25, p);
  const [value, setValue] = usePropsValue({
    value: props.activeKey,
    defaultValue: props.defaultActiveKey,
    onChange: props.onChange
  });
  const navRef = (0, import_react152.useRef)(null);
  const contentRef = (0, import_react152.useRef)(null);
  useClickAway(() => {
    if (!props.closeOnClickAway)
      return;
    setValue(null);
  }, [navRef, contentRef]);
  const [top, setTop] = (0, import_react152.useState)();
  const containerRef = (0, import_react152.useRef)(null);
  (0, import_react152.useEffect)(() => {
    const container = containerRef.current;
    if (!container)
      return;
    if (value) {
      const rect = container.getBoundingClientRect();
      setTop(rect.bottom);
    }
  }, [value]);
  const changeActive = (key) => {
    if (value === key) {
      setValue(null);
    } else {
      setValue(key);
    }
  };
  let popupForceRender = false;
  const items = [];
  const navs = import_react152.default.Children.map(props.children, (child) => {
    if (import_react152.default.isValidElement(child)) {
      const childProps = Object.assign(Object.assign({}, child.props), {
        onClick: () => {
          changeActive(child.key);
        },
        active: child.key === value,
        arrow: child.props.arrow === void 0 ? props.arrow : child.props.arrow
      });
      items.push(child);
      if (child.props.forceRender)
        popupForceRender = true;
      return (0, import_react152.cloneElement)(child, childProps);
    } else {
      return child;
    }
  });
  (0, import_react152.useImperativeHandle)(ref, () => ({
    close: () => {
      setValue(null);
    }
  }), [setValue]);
  return withNativeProps(props, import_react152.default.createElement("div", {
    className: (0, import_classnames26.default)(classPrefix31, {
      [`${classPrefix31}-open`]: !!value
    }),
    ref: containerRef
  }, import_react152.default.createElement("div", {
    className: `${classPrefix31}-nav`,
    ref: navRef
  }, navs), import_react152.default.createElement(popup_default, {
    visible: !!value,
    position: "top",
    className: `${classPrefix31}-popup`,
    maskClassName: `${classPrefix31}-popup-mask`,
    bodyClassName: `${classPrefix31}-popup-body`,
    style: {
      top
    },
    forceRender: popupForceRender,
    onMaskClick: props.closeOnMaskClick ? () => {
      changeActive(null);
    } : void 0
  }, import_react152.default.createElement("div", {
    ref: contentRef
  }, items.map((item) => {
    const isActive = item.key === value;
    return import_react152.default.createElement(ItemChildrenWrap, {
      key: item.key,
      active: isActive,
      forceRender: item.props.forceRender,
      destroyOnClose: item.props.destroyOnClose
    }, item.props.children);
  })))));
});
var dropdown_default = Dropdown;

// node_modules/antd-mobile/es/components/dropdown/index.js
var dropdown_default2 = attachPropertiesToComponent(dropdown_default, {
  Item: item_default
});

// node_modules/antd-mobile/es/components/ellipsis/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/ellipsis/ellipsis.css";

// node_modules/antd-mobile/es/components/ellipsis/ellipsis.js
var import_react153 = __toESM(require_react());
var classPrefix32 = `adm-ellipsis`;
var defaultProps26 = {
  direction: "end",
  rows: 1,
  expandText: "",
  collapseText: "",
  stopPropagationForActionButtons: [],
  onContentClick: () => {
  }
};
var Ellipsis = (p) => {
  const props = mergeProps(defaultProps26, p);
  const rootRef = (0, import_react153.useRef)(null);
  const [ellipsised, setEllipsised] = (0, import_react153.useState)({});
  const [expanded, setExpanded] = (0, import_react153.useState)(false);
  const [exceeded, setExceeded] = (0, import_react153.useState)(false);
  function calcEllipsised() {
    const root = rootRef.current;
    if (!root)
      return;
    if (!root.offsetParent)
      return;
    const originStyle = window.getComputedStyle(root);
    const container = document.createElement("div");
    const styleNames = Array.prototype.slice.apply(originStyle);
    styleNames.forEach((name) => {
      container.style.setProperty(name, originStyle.getPropertyValue(name));
    });
    container.style.position = "fixed";
    container.style.left = "999999px";
    container.style.top = "999999px";
    container.style.zIndex = "-1000";
    container.style.height = "auto";
    container.style.minHeight = "auto";
    container.style.maxHeight = "auto";
    container.style.textOverflow = "clip";
    container.style.whiteSpace = "normal";
    container.style.webkitLineClamp = "unset";
    container.style.display = "block";
    const lineHeight = pxToNumber(originStyle.lineHeight);
    const maxHeight = Math.floor(lineHeight * (props.rows + 0.5) + pxToNumber(originStyle.paddingTop) + pxToNumber(originStyle.paddingBottom));
    container.innerText = props.content;
    document.body.appendChild(container);
    if (container.offsetHeight <= maxHeight) {
      setExceeded(false);
    } else {
      let check = function(left, right) {
        if (right - left <= 1) {
          if (props.direction === "end") {
            return {
              leading: props.content.slice(0, left) + "..."
            };
          } else {
            return {
              tailing: "..." + props.content.slice(right, end)
            };
          }
        }
        const middle2 = Math.round((left + right) / 2);
        if (props.direction === "end") {
          container.innerText = props.content.slice(0, middle2) + "..." + actionText;
        } else {
          container.innerText = actionText + "..." + props.content.slice(middle2, end);
        }
        if (container.offsetHeight <= maxHeight) {
          if (props.direction === "end") {
            return check(middle2, right);
          } else {
            return check(left, middle2);
          }
        } else {
          if (props.direction === "end") {
            return check(left, middle2);
          } else {
            return check(middle2, right);
          }
        }
      }, checkMiddle = function(leftPart, rightPart) {
        if (leftPart[1] - leftPart[0] <= 1 && rightPart[1] - rightPart[0] <= 1) {
          return {
            leading: props.content.slice(0, leftPart[0]) + "...",
            tailing: "..." + props.content.slice(rightPart[1], end)
          };
        }
        const leftPartMiddle = Math.floor((leftPart[0] + leftPart[1]) / 2);
        const rightPartMiddle = Math.ceil((rightPart[0] + rightPart[1]) / 2);
        container.innerText = props.content.slice(0, leftPartMiddle) + "..." + actionText + "..." + props.content.slice(rightPartMiddle, end);
        if (container.offsetHeight <= maxHeight) {
          return checkMiddle([leftPartMiddle, leftPart[1]], [rightPart[0], rightPartMiddle]);
        } else {
          return checkMiddle([leftPart[0], leftPartMiddle], [rightPartMiddle, rightPart[1]]);
        }
      };
      setExceeded(true);
      const end = props.content.length;
      const actionText = expanded ? props.collapseText : props.expandText;
      const middle = Math.floor((0 + end) / 2);
      const ellipsised2 = props.direction === "middle" ? checkMiddle([0, middle], [middle, end]) : check(0, end);
      setEllipsised(ellipsised2);
    }
    document.body.removeChild(container);
  }
  useResizeEffect(calcEllipsised, rootRef);
  useIsomorphicLayoutEffect_default(() => {
    calcEllipsised();
  }, [props.content, props.direction, props.rows, props.expandText, props.collapseText]);
  const expandActionElement = exceeded && props.expandText ? withStopPropagation(props.stopPropagationForActionButtons, import_react153.default.createElement("a", {
    onClick: () => {
      setExpanded(true);
    }
  }, props.expandText)) : null;
  const collapseActionElement = exceeded && props.expandText ? withStopPropagation(props.stopPropagationForActionButtons, import_react153.default.createElement("a", {
    onClick: () => {
      setExpanded(false);
    }
  }, props.collapseText)) : null;
  const renderContent = () => {
    if (!exceeded) {
      return props.content;
    }
    if (expanded) {
      return import_react153.default.createElement(import_react153.default.Fragment, null, props.content, collapseActionElement);
    } else {
      return import_react153.default.createElement(import_react153.default.Fragment, null, ellipsised.leading, expandActionElement, ellipsised.tailing);
    }
  };
  return withNativeProps(props, import_react153.default.createElement("div", {
    ref: rootRef,
    className: classPrefix32,
    onClick: (e) => {
      if (e.target === e.currentTarget) {
        props.onContentClick(e);
      }
    }
  }, renderContent()));
};
function pxToNumber(value) {
  if (!value)
    return 0;
  const match = value.match(/^\d*(\.\d*)?/);
  return match ? Number(match[0]) : 0;
}

// node_modules/antd-mobile/es/components/ellipsis/index.js
var ellipsis_default = Ellipsis;

// node_modules/antd-mobile/es/components/empty/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/empty/empty.css";

// node_modules/antd-mobile/es/components/empty/empty.js
var import_react155 = __toESM(require_react());
var import_classnames27 = __toESM(require_classnames());

// node_modules/antd-mobile/es/components/empty/empty-icon.js
var import_react154 = __toESM(require_react());
var EmptyIcon = (props) => {
  return withNativeProps(props, import_react154.default.createElement("svg", {
    viewBox: "0 0 64 41"
  }, import_react154.default.createElement("g", {
    transform: "translate(0 1)",
    fill: "none",
    fillRule: "evenodd"
  }, import_react154.default.createElement("ellipse", {
    fill: "#f5f5f5",
    cx: "32",
    cy: "33",
    rx: "32",
    ry: "7"
  }), import_react154.default.createElement("g", {
    stroke: "#d9d9d9"
  }, import_react154.default.createElement("path", {
    d: "M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z"
  }), import_react154.default.createElement("path", {
    d: "M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z",
    fill: "#fafafa"
  })))));
};

// node_modules/antd-mobile/es/components/empty/empty.js
var classPrefix33 = `adm-empty`;
var Empty = (props) => {
  function renderImageNode() {
    const {
      image
    } = props;
    if (image === void 0) {
      return import_react155.default.createElement(EmptyIcon, {
        className: `${classPrefix33}-image`,
        style: props.imageStyle
      });
    }
    if (typeof image === "string") {
      return import_react155.default.createElement("img", {
        className: `${classPrefix33}-image`,
        style: props.imageStyle,
        src: image,
        alt: "empty"
      });
    }
    return image;
  }
  return withNativeProps(props, import_react155.default.createElement("div", {
    className: classPrefix33
  }, import_react155.default.createElement("div", {
    className: `${classPrefix33}-image-container`
  }, renderImageNode()), props.description && import_react155.default.createElement("div", {
    className: (0, import_classnames27.default)(`${classPrefix33}-description`)
  }, props.description)));
};

// node_modules/antd-mobile/es/components/empty/index.js
var empty_default = Empty;

// node_modules/antd-mobile/es/components/error-block/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/error-block/error-block.css";

// node_modules/antd-mobile/es/components/error-block/create-error-block.js
var import_react156 = __toESM(require_react());
var import_classnames28 = __toESM(require_classnames());
var classPrefix34 = `adm-error-block`;
var defaultProps27 = {
  status: "default"
};
function createErrorBlock(imageRecord2) {
  const ErrorBlock2 = (p) => {
    var _a;
    const props = mergeProps(defaultProps27, p);
    const {
      locale
    } = useConfig();
    const contentPack = locale.ErrorBlock[props.status];
    const des = "description" in props ? props.description : contentPack.description;
    const title = "title" in props ? props.title : contentPack.title;
    const image = (_a = props.image) !== null && _a !== void 0 ? _a : imageRecord2[props.status];
    const imageNode = typeof image === "string" ? import_react156.default.createElement("img", {
      src: image,
      alt: "error block image"
    }) : image;
    return withNativeProps(props, import_react156.default.createElement("div", {
      className: (0, import_classnames28.default)(classPrefix34, {
        [`${classPrefix34}-full-page`]: props.fullPage
      })
    }, import_react156.default.createElement("div", {
      className: `${classPrefix34}-image`
    }, imageNode), import_react156.default.createElement("div", {
      className: `${classPrefix34}-description`
    }, title && import_react156.default.createElement("div", {
      className: `${classPrefix34}-description-title`
    }, title), des && import_react156.default.createElement("div", {
      className: `${classPrefix34}-description-subtitle`
    }, des)), props.children && import_react156.default.createElement("div", {
      className: `${classPrefix34}-content`
    }, props.children)));
  };
  return ErrorBlock2;
}

// node_modules/antd-mobile/es/components/error-block/images/default.js
var import_react157 = __toESM(require_react());
var defaultImage = import_react157.default.createElement("svg", {
  viewBox: "0 0 200 200",
  xmlns: "http://www.w3.org/2000/svg",
  xmlnsXlink: "http://www.w3.org/1999/xlink"
}, import_react157.default.createElement("defs", null, import_react157.default.createElement("linearGradient", {
  x1: "50%",
  y1: "-116.862%",
  x2: "50%",
  y2: "90.764%",
  id: "error-block-image-default-a"
}, import_react157.default.createElement("stop", {
  stopColor: "#72A7FD",
  stopOpacity: 0.207,
  offset: "0%"
}), import_react157.default.createElement("stop", {
  stopColor: "#72A7FD",
  stopOpacity: 0.115,
  offset: "80.072%"
}), import_react157.default.createElement("stop", {
  stopColor: "#72A7FD",
  stopOpacity: 0,
  offset: "100%"
})), import_react157.default.createElement("circle", {
  id: "error-block-image-default-d",
  cx: 18.823,
  cy: 18.823,
  r: 18.823
}), import_react157.default.createElement("rect", {
  id: "error-block-image-default-b",
  x: 3.5,
  y: 9,
  width: 51.429,
  height: 88,
  rx: 4.571
})), import_react157.default.createElement("g", {
  fill: "none",
  fillRule: "evenodd"
}, import_react157.default.createElement("path", {
  d: "M73.557.004c19.435-.311 38.696 17.016 51.523 35.287 8.708-10.822 17.127-16.233 25.255-16.233 13.333 0 28.35 14.274 45.053 42.822 1.769 3.024-3.582 7.435-16.054 13.231l-41.322 1.37c-7.343 5.872-31.225.626-69.152 1.234-27.79.445-45.759-1.234-53.908-5.037C3.2 71.143-1.625 68.686.48 65.308 27.371 22.12 51.73.353 73.557.003Zm93.098 49.53a1.125 1.125 0 0 0-.401.072l-.058.023-.07.03-.028.014-.02.01c-.03.015-.059.032-.088.049a2.543 2.543 0 0 0-.568.477l-.067.074c-1.686 1.931-2.904 7.062-2.904 8.985 0 2.283 1.719 4.153 3.898 4.314l.026.001v3.805c0 .39.25.705.56.705.31 0 .56-.316.56-.705l.001-3.88c1.92-.402 3.363-2.148 3.363-4.24 0-2.39-1.882-9.734-4.204-9.734Zm-100-5a1.125 1.125 0 0 0-.331.05l-.035.01-.035.012-.058.023-.07.03-.028.014-.02.01c-.03.015-.059.032-.088.049a2.543 2.543 0 0 0-.568.477l-.067.074c-1.686 1.931-2.904 7.062-2.904 8.985 0 2.212 1.613 4.036 3.695 4.294l.203.02.026.001v3.805c0 .39.25.705.56.705.282 0 .515-.26.555-.6l.006-.105v-3.88c1.92-.402 3.363-2.148 3.363-4.24 0-2.39-1.882-9.734-4.204-9.734ZM52.64 38.348l-.15.008-.149.023-.032.007-.032.008-.078.022-.045.015-.045.016-.06.023-.038.017-.038.017-.058.028-.022.011a2.201 2.201 0 0 0-.323.204l-.05.038-.05.04-.025.02-.025.021a3.742 3.742 0 0 0-.31.294l-.036.04c-.035.037-.07.076-.105.116-.01.012-.02.025-.031.036a3.275 3.275 0 0 0-.081.098l-.063.078c-2.031 2.583-3.48 8.692-3.48 11.027 0 2.636 1.846 4.832 4.292 5.323l.224.04-.064-.012.105.018.103.014v4.618c0 .47.299.85.667.85.337 0 .615-.32.659-.735l.006-.115v-4.618c.18-.023.355-.054.527-.094l.256-.067.196-.06c2.136-.706 3.68-2.75 3.68-5.162 0-2.996-2.383-12.207-5.325-12.207Z",
  transform: "translate(2.286 22.286)",
  fill: "url(#error-block-image-default-a)"
}), import_react157.default.createElement("g", {
  transform: "rotate(-90 102.429 55.357)"
}, import_react157.default.createElement("path", {
  d: "M6.857 0H52a6.857 6.857 0 0 1 6.857 6.857v92A6.857 6.857 0 0 1 52 105.714H6.857A6.857 6.857 0 0 1 0 98.857v-92A6.857 6.857 0 0 1 6.857 0Z",
  fill: "#7EACFF"
}), import_react157.default.createElement("mask", {
  id: "error-block-image-default-c",
  fill: "#fff"
}, import_react157.default.createElement("use", {
  xlinkHref: "#error-block-image-default-b"
})), import_react157.default.createElement("use", {
  fill: "#377EFF",
  xlinkHref: "#error-block-image-default-b"
}), import_react157.default.createElement("path", {
  d: "M11.838 91.8a.64.64 0 0 1 .627.652.64.64 0 0 1-.627.652.64.64 0 0 1-.628-.652c0-.36.281-.651.628-.651Zm-2.858 0a.64.64 0 0 1 .628.652.64.64 0 0 1-.628.652.64.64 0 0 1-.627-.652c0-.36.281-.651.627-.651Zm2.16-2.305a.64.64 0 0 1 .628.652.64.64 0 0 1-.627.651.64.64 0 0 1-.627-.651c0-.36.28-.652.627-.652Zm-2.982-.04a.64.64 0 0 1 .627.651.64.64 0 0 1-.627.652.64.64 0 0 1-.627-.652c0-.36.28-.651.627-.651Zm5.268-.531a.64.64 0 0 1 .628.651.64.64 0 0 1-.628.652.64.64 0 0 1-.627-.652c0-.36.281-.651.627-.651Zm2.858-1.143a.64.64 0 0 1 .627.651.64.64 0 0 1-.627.652.64.64 0 0 1-.628-.652c0-.36.281-.651.628-.651Zm-6.37-.917c.209 0 .377.175.377.39a.384.384 0 0 1-.376.392.384.384 0 0 1-.376-.391c0-.216.168-.391.376-.391Zm3.512-.798.093.007a.644.644 0 0 1 .535.645.64.64 0 0 1-.628.652.64.64 0 0 1-.627-.652c0-.36.281-.652.627-.652Zm5.715 0a.64.64 0 0 1 .627.652.64.64 0 0 1-.627.652.64.64 0 0 1-.627-.652c0-.36.28-.652.627-.652Zm-11.429 0a.64.64 0 0 1 .627.652.64.64 0 0 1-.627.652.64.64 0 0 1-.627-.652c0-.36.28-.652.627-.652Zm-3.261.241c.208 0 .376.175.376.39a.384.384 0 0 1-.376.392.384.384 0 0 1-.377-.391c0-.216.169-.391.377-.391Zm11.833-.812a.64.64 0 0 1 .627.652.64.64 0 0 1-.627.651.64.64 0 0 1-.628-.651c0-.36.281-.652.628-.652Zm-4.851.399c.208 0 .376.175.376.39a.384.384 0 0 1-.376.392.384.384 0 0 1-.377-.391c0-.216.169-.391.377-.391Zm10.313-2.056a.64.64 0 0 1 .628.652.64.64 0 0 1-.628.651.64.64 0 0 1-.627-.651c0-.36.281-.652.627-.652Zm-2.354-.128a.64.64 0 0 1 .627.652.64.64 0 0 1-.627.652.64.64 0 0 1-.628-.652c0-.36.281-.652.628-.652Zm-13.798.311c.207 0 .376.175.376.391a.384.384 0 0 1-.376.391.384.384 0 0 1-.377-.39c0-.217.169-.392.377-.392Zm11.832-.812a.64.64 0 0 1 .628.652.64.64 0 0 1-.628.651.64.64 0 0 1-.627-.651c0-.36.281-.652.627-.652Zm-6.285 0a.64.64 0 0 1 .627.652.64.64 0 0 1-.627.651.64.64 0 0 1-.627-.651c0-.36.28-.652.627-.652Zm3.428 0a.64.64 0 0 1 .627.652.64.64 0 0 1-.627.651.64.64 0 0 1-.627-.651c0-.36.28-.652.627-.652Zm-6.118.24c.208 0 .376.176.376.392a.384.384 0 0 1-.376.39.384.384 0 0 1-.377-.39c0-.216.169-.391.377-.391Zm11.261-2.525a.64.64 0 0 1 .627.651.64.64 0 0 1-.627.652.64.64 0 0 1-.627-.652c0-.36.28-.651.627-.651Zm-3.557.484c.208 0 .376.175.376.391a.384.384 0 0 1-.376.391.384.384 0 0 1-.376-.391c0-.216.168-.391.376-.391Zm-2.478-.555a.64.64 0 0 1 .627.652.64.64 0 0 1-.627.652.64.64 0 0 1-.627-.652c0-.36.28-.652.627-.652Zm-3.512-.26c.208 0 .376.175.376.39a.384.384 0 0 1-.376.392.384.384 0 0 1-.376-.391c0-.216.168-.391.376-.391Zm-2.857 0c.208 0 .376.175.376.39a.384.384 0 0 1-.376.392.384.384 0 0 1-.376-.391c0-.216.168-.391.376-.391Zm-4.571 0c.207 0 .376.175.376.39a.384.384 0 0 1-.376.392.384.384 0 0 1-.377-.391c0-.216.169-.391.377-.391Zm14.898-1.835a.64.64 0 0 1 .628.652.64.64 0 0 1-.628.651.64.64 0 0 1-.627-.651c0-.36.281-.652.627-.652Zm-8.027-.245c.208 0 .377.175.377.39a.384.384 0 0 1-.377.392.384.384 0 0 1-.376-.391c0-.216.169-.391.376-.391Zm6.271-1.349c.208 0 .377.175.377.391a.384.384 0 0 1-.377.391.384.384 0 0 1-.376-.39c0-.217.169-.392.376-.392Zm-11.484-.481c.208 0 .376.175.376.39a.384.384 0 0 1-.376.392.384.384 0 0 1-.376-.391c0-.216.168-.391.376-.391Zm15.103-.972c.208 0 .376.175.376.391a.384.384 0 0 1-.376.391.384.384 0 0 1-.376-.39c0-.217.168-.392.376-.392Zm-9.333-1.404c.208 0 .376.175.376.39a.384.384 0 0 1-.376.392.384.384 0 0 1-.376-.391c0-.216.168-.391.376-.391Zm-6.819-.405c.208 0 .377.175.377.39a.384.384 0 0 1-.377.392.384.384 0 0 1-.376-.391c0-.216.168-.391.376-.391Z",
  fill: "#003CFF",
  fillRule: "nonzero",
  mask: "url(#error-block-image-default-c)",
  transform: "rotate(116 12.367 83.503)"
}), import_react157.default.createElement("path", {
  stroke: "#FFF",
  strokeWidth: 0.75,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  d: "M36.774 5.474H21.523"
}), import_react157.default.createElement("path", {
  d: "m67.818 94.025-4.996 3.913m4.996 11.91-4.996-3.912m-1.142 9.145-1.143-6.288m10.71-6.768h-7.262",
  stroke: "#4486FE",
  strokeWidth: 0.75,
  strokeLinecap: "round",
  strokeLinejoin: "round"
})), import_react157.default.createElement("circle", {
  cx: 8.571,
  cy: 8.571,
  r: 8.571,
  transform: "translate(22.857 142)",
  fill: "#FFCD6B",
  fillRule: "nonzero"
}), import_react157.default.createElement("g", {
  transform: "translate(132.857 124)"
}, import_react157.default.createElement("mask", {
  id: "error-block-image-default-e",
  fill: "#fff"
}, import_react157.default.createElement("use", {
  xlinkHref: "#error-block-image-default-d"
})), import_react157.default.createElement("use", {
  fill: "#FBBE47",
  fillRule: "nonzero",
  xlinkHref: "#error-block-image-default-d"
}), import_react157.default.createElement("circle", {
  fill: "#FFCD6B",
  fillRule: "nonzero",
  mask: "url(#error-block-image-default-e)",
  cx: 13.886,
  cy: 15.12,
  r: 18.823
}), import_react157.default.createElement("circle", {
  fill: "#FFB400",
  fillRule: "nonzero",
  mask: "url(#error-block-image-default-e)",
  cx: 23.4,
  cy: 29.057,
  r: 1
}), import_react157.default.createElement("circle", {
  fill: "#FFB400",
  fillRule: "nonzero",
  mask: "url(#error-block-image-default-e)",
  cx: 30.343,
  cy: 29.829,
  r: 1
}), import_react157.default.createElement("circle", {
  fill: "#FFB400",
  fillRule: "nonzero",
  mask: "url(#error-block-image-default-e)",
  cx: 18.771,
  cy: 32.657,
  r: 1.286
}), import_react157.default.createElement("circle", {
  fill: "#FFB400",
  fillRule: "nonzero",
  mask: "url(#error-block-image-default-e)",
  cx: 29.571,
  cy: 25.971,
  r: 1.286
}), import_react157.default.createElement("circle", {
  fill: "#FFB400",
  fillRule: "nonzero",
  mask: "url(#error-block-image-default-e)",
  cx: 19.286,
  cy: 7.971,
  r: 1.286
}), import_react157.default.createElement("circle", {
  fill: "#FFB400",
  fillRule: "nonzero",
  mask: "url(#error-block-image-default-e)",
  cx: 26.486,
  cy: 5.914,
  r: 1.286
}), import_react157.default.createElement("circle", {
  fill: "#FFB400",
  fillRule: "nonzero",
  mask: "url(#error-block-image-default-e)",
  cx: 11.057,
  cy: 6.943,
  r: 1
}), import_react157.default.createElement("circle", {
  fill: "#FFB400",
  fillRule: "nonzero",
  mask: "url(#error-block-image-default-e)",
  cx: 30.086,
  cy: 15.686,
  r: 1.286
}), import_react157.default.createElement("circle", {
  fill: "#FFB400",
  fillRule: "nonzero",
  mask: "url(#error-block-image-default-e)",
  cx: 22.886,
  cy: 14.657,
  r: 1
})), import_react157.default.createElement("path", {
  d: "m87.429 135.123 6.591-9.378v-.08h-5.99v-2.559h10.038v1.787l-6.44 9.254v.082h6.56v2.557h-10.76v-1.663Zm12.185-5.889 4.948-7.047v-.056h-4.498v-1.917h7.536v1.34l-4.849 6.942v.059h4.923v1.92h-8.06v-1.24Zm10.345.702 3.708-5.274v-.045h-3.372v-1.437h5.648v1.003l-3.628 5.206v.045H116v1.438h-6.041v-.936Z",
  fill: "#FFF",
  fillRule: "nonzero"
})));

// node_modules/antd-mobile/es/components/error-block/images/disconnected.js
var import_react158 = __toESM(require_react());
var disconnectedImage = import_react158.default.createElement("svg", {
  viewBox: "0 0 400 400",
  xmlns: "http://www.w3.org/2000/svg",
  xmlnsXlink: "http://www.w3.org/1999/xlink"
}, import_react158.default.createElement("title", null, "@\u53CD\u9988/\u5F02\u5E38/\u7F51\u7EDC\u670D\u52A1\u5F02\u5E38"), import_react158.default.createElement("defs", null, import_react158.default.createElement("linearGradient", {
  x1: "50%",
  y1: "-116.862%",
  x2: "50%",
  y2: "90.764%",
  id: "error-block-image-disconnected-c"
}, import_react158.default.createElement("stop", {
  stopColor: "#72A7FD",
  stopOpacity: 0.207,
  offset: "0%"
}), import_react158.default.createElement("stop", {
  stopColor: "#72A7FD",
  stopOpacity: 0.115,
  offset: "80.072%"
}), import_react158.default.createElement("stop", {
  stopColor: "#72A7FD",
  stopOpacity: 0,
  offset: "100%"
})), import_react158.default.createElement("circle", {
  id: "error-block-image-disconnected-d",
  cx: 22.309,
  cy: 22.309,
  r: 22.309
}), import_react158.default.createElement("path", {
  id: "error-block-image-disconnected-a",
  d: "M0 0h400v400H0z"
})), import_react158.default.createElement("g", {
  fill: "none",
  fillRule: "evenodd"
}, import_react158.default.createElement("mask", {
  id: "error-block-image-disconnected-b",
  fill: "#fff"
}, import_react158.default.createElement("use", {
  xlinkHref: "#error-block-image-disconnected-a"
})), import_react158.default.createElement("g", {
  mask: "url(#error-block-image-disconnected-b)",
  fill: "url(#error-block-image-disconnected-c)"
}, import_react158.default.createElement("path", {
  d: "M151.686 45.58c38.869-.623 77.391 34.03 103.046 70.573 17.416-21.644 34.253-32.465 50.51-32.465 26.666 0 56.701 28.548 90.105 85.643 3.539 6.05-7.164 14.87-32.107 26.462l-82.643 2.741c-14.686 11.745-62.45 1.252-138.305 2.467-55.58.89-91.518-2.468-107.816-10.074-23.505-3.07-33.154-7.983-28.946-14.74C59.313 89.813 108.03 46.278 151.686 45.58Zm186.195 99.06-.127.003-.126.01a2.32 2.32 0 0 0-.465.103l-.032.01-.031.01a2.364 2.364 0 0 0-.181.071 2.52 2.52 0 0 0-.116.054l-.133.067-.042.024-.036.02a2.946 2.946 0 0 0-.133.08l-.048.03a3.052 3.052 0 0 0-.126.087l-.047.033a3.274 3.274 0 0 0-.128.097c-.01.008-.02.017-.031.024a4.906 4.906 0 0 0-.31.27l-.036.032a6.654 6.654 0 0 0-.46.484l-.045.05c-3.344 3.91-5.755 14.083-5.755 17.908 0 4.547 3.409 8.275 7.74 8.625l.108.008v7.608c0 .779.502 1.41 1.121 1.41.62 0 1.121-.632 1.121-1.41v-7.762c3.838-.802 6.727-4.293 6.727-8.48 0-4.778-3.765-19.467-8.409-19.467Zm-200-10-.127.003-.126.01a2.32 2.32 0 0 0-.368.073l-.049.014-.048.016-.032.01-.031.01a2.364 2.364 0 0 0-.181.071l-.058.026-.058.028-.133.067-.042.024-.036.02-.066.039-.067.041-.048.03a3.052 3.052 0 0 0-.126.087l-.047.033a3.274 3.274 0 0 0-.128.097c-.01.008-.02.017-.031.024l-.156.13-.154.14-.036.032a6.654 6.654 0 0 0-.46.484l-.045.05c-3.344 3.91-5.755 14.083-5.755 17.908 0 4.547 3.409 8.275 7.74 8.625l.054.004.054.004v7.608c0 .779.502 1.41 1.121 1.41.58 0 1.058-.556 1.115-1.266l.006-.144v-7.762c3.838-.802 6.727-4.293 6.727-8.48 0-4.778-3.765-19.467-8.409-19.467Zm-28.029-12.373-.107.002-.106.006a2.978 2.978 0 0 0-.551.095 3.444 3.444 0 0 0-.323.104 3.962 3.962 0 0 0-.61.297c-.076.045-.15.092-.226.141-4.964 3.312-8.728 18.445-8.728 23.77 0 5.434 3.922 9.935 9.04 10.726l.28.04v9.236c0 .886.532 1.614 1.21 1.692l.121.007.122-.007c.638-.074 1.147-.723 1.204-1.538l.006-.155v-9.235c5.254-.668 9.32-5.234 9.32-10.767 0-5.993-4.77-24.414-10.652-24.414Z"
})), import_react158.default.createElement("g", {
  mask: "url(#error-block-image-disconnected-b)"
}, import_react158.default.createElement("g", {
  transform: "translate(85.858 150.644)"
}, import_react158.default.createElement("path", {
  d: "M116.26 28.467c1.352 0 2.703.018 4.054.054 3.923.385 10.188 4.248 9.267 11.061-.878 6.496-5.836 9.089-8.962 9.529a130.762 130.762 0 0 0-4.36-.072c-28.567 0-60.654 10.149-96.22 30.676l-2.227 1.297c-.744.437-1.49.878-2.236 1.323-4.878 2.911-11.193 1.316-14.103-3.562C-1.438 73.894.157 67.58 5.035 64.67 45.34 40.62 82.4 28.467 116.26 28.467Zm22 11.63c1.03-5.942 6.376-8.618 11.084-8.08C172.14 36.91 194.83 46.86 217.37 61.794c4.735 3.138 6.03 9.52 2.893 14.255-3.138 4.736-9.52 6.031-14.256 2.893-20.111-13.325-40.075-22.165-59.935-26.584a9.974 9.974 0 0 0-.325-.088c-3.987-1.015-8.602-5.738-7.487-12.175ZM116.26 77.418c22.777 0 45.4 7.057 67.73 20.988 4.82 3.007 6.289 9.351 3.282 14.17-3.007 4.82-9.351 6.29-14.17 3.283-19.194-11.974-38.095-17.87-56.842-17.87s-37.648 5.896-56.842 17.87c-4.82 3.007-11.164 1.537-14.17-3.282-3.007-4.82-1.538-11.164 3.282-14.171 22.33-13.931 44.953-20.988 67.73-20.988ZM117.974 124.67c9.85 0 17.303 1.69 25.687 5.082l.82.337 2.9 1.231 3.008 1.252.77.305.107.04c5.326 1.976 8.042 7.895 6.066 13.221-1.976 5.326-7.895 8.042-13.221 6.067l-.713-.27-.726-.285-.763-.31-1.263-.527-2.944-1.26-1.125-.473c-6.393-2.648-11.433-3.838-18.603-3.838-8.223 0-16.532 2.126-25.028 6.475-5.056 2.588-11.254.587-13.842-4.47-2.589-5.056-.588-11.253 4.47-13.842 11.313-5.791 22.814-8.735 34.4-8.735ZM118.235 197.047c7.15 0 13.77-.897 19.841-2.721 5.44-1.635 8.526-7.37 6.892-12.81-1.635-5.44-7.37-8.526-12.81-6.892-4.072 1.224-8.707 1.851-13.923 1.851-4.36 0-8.79-1.045-13.373-3.21l-.626-.301c-5.095-2.512-11.262-.418-13.773 4.678-2.512 5.095-.418 11.261 4.678 13.773 7.559 3.727 15.288 5.632 23.094 5.632Z",
  fill: "#377EFF",
  fillRule: "nonzero"
}), import_react158.default.createElement("path", {
  d: "M198.35 62.413c2.755-4.967 9.016-6.76 13.984-4.004 13.068 7.25 19.124 18.535 17.615 30.952-1.157 9.515-6.83 18.757-14.096 24.352-13.364 10.29-34.915 9.401-49.363-1.91-4.472-3.502-5.26-9.967-1.758-14.44 3.436-4.388 9.724-5.229 14.185-1.952l.255.194c7.283 5.702 18.475 6.164 24.13 1.809 3.072-2.366 5.766-6.754 6.226-10.536.467-3.844-1.21-7.07-6.796-10.267l-.378-.213c-4.967-2.756-6.76-9.017-4.004-13.985ZM61.35 103.092c-2.84-4.92-9.13-6.607-14.05-3.768-20.662 11.922-21.772 35.751-6.018 51.69 13.752 13.914 33.192 13.447 50.507 1.158 4.633-3.288 5.723-9.708 2.436-14.34-3.288-4.633-9.709-5.724-14.341-2.436-9.763 6.928-18.07 7.128-23.97 1.158-6.761-6.84-6.498-14.501 1.35-19.225l.317-.187c4.92-2.84 6.608-9.13 3.769-14.05ZM129.103 135.702c1.688-5.424 7.454-8.453 12.878-6.764 14.776 4.599 23.437 13.727 25.259 25.58 1.316 8.561-1.228 17.533-5.58 24.052-3.132 4.688-7.388 8.287-12.504 11.112-3.03 1.673-5.75 2.811-9.37 4.066l-1.4.477c-5.387 1.806-11.217-1.097-13.022-6.484-1.805-5.386 1.098-11.216 6.484-13.02l1.09-.374c6.032-2.112 9.602-4.19 11.613-7.201 1.693-2.535 2.818-6.502 2.356-9.503-.564-3.673-3.432-6.696-11.04-9.063-5.424-1.689-8.452-7.454-6.764-12.878Z",
  fill: "#377EFF",
  fillRule: "nonzero"
}), import_react158.default.createElement("path", {
  d: "M148.072 181.58c3.718-7.98 4.172-14.9 1.36-20.76-2.81-5.86-6.236-9.096-10.275-9.707",
  stroke: "#FFF",
  strokeWidth: 0.571,
  strokeLinecap: "round"
}), import_react158.default.createElement("ellipse", {
  fill: "#7EACFF",
  transform: "rotate(10 147 41.933)",
  cx: 147,
  cy: 41.933,
  rx: 9.143,
  ry: 10.286
}), import_react158.default.createElement("path", {
  d: "M210.422 107.472c3.718-7.98 4.172-14.9 1.36-20.76-2.81-5.86-6.668-9.883-11.572-12.067M51.604 131.769c-3.15-6.8-3.537-12.694-1.161-17.685 2.376-4.99 5.57-8.136 9.583-9.438",
  stroke: "#003CFF",
  strokeWidth: 0.75,
  strokeLinecap: "round",
  strokeLinejoin: "round"
}), import_react158.default.createElement("path", {
  d: "M21.53 64.408c4.946-3.389 9.817-6.026 14.612-7.912",
  stroke: "#FFF",
  strokeWidth: 0.75,
  strokeLinecap: "round",
  strokeLinejoin: "round"
}), import_react158.default.createElement("path", {
  d: "m113.243 15.444 9.588 8.314M144.31 9.405l-5.775 11.3m18.389-1.246-11.907 4.643M127.64 5.66l2.77 14.255",
  stroke: "#4486FE",
  strokeWidth: 0.75,
  strokeLinecap: "round",
  strokeLinejoin: "round"
}))), import_react158.default.createElement("g", {
  mask: "url(#error-block-image-disconnected-b)"
}, import_react158.default.createElement("g", {
  transform: "translate(275.143 302.571)"
}, import_react158.default.createElement("mask", {
  id: "error-block-image-disconnected-e",
  fill: "#fff"
}, import_react158.default.createElement("use", {
  xlinkHref: "#error-block-image-disconnected-d"
})), import_react158.default.createElement("use", {
  fill: "#FBBE47",
  fillRule: "nonzero",
  xlinkHref: "#error-block-image-disconnected-d"
}), import_react158.default.createElement("circle", {
  fill: "#FFCD6B",
  fillRule: "nonzero",
  mask: "url(#error-block-image-disconnected-e)",
  cx: 16.457,
  cy: 17.92,
  r: 22.309
}), import_react158.default.createElement("circle", {
  fill: "#FFF",
  fillRule: "nonzero",
  mask: "url(#error-block-image-disconnected-e)",
  cx: 14.263,
  cy: 12.069,
  r: 2.194
}))), import_react158.default.createElement("g", {
  mask: "url(#error-block-image-disconnected-b)",
  fill: "#FBBE47",
  fillRule: "nonzero"
}, import_react158.default.createElement("circle", {
  cx: 12,
  cy: 12,
  r: 12,
  transform: "translate(84 297.714)"
}))));

// node_modules/antd-mobile/es/components/error-block/images/empty.js
var import_react159 = __toESM(require_react());
var emptyImage = import_react159.default.createElement("svg", {
  viewBox: "0 0 400 400",
  xmlns: "http://www.w3.org/2000/svg",
  xmlnsXlink: "http://www.w3.org/1999/xlink"
}, import_react159.default.createElement("defs", null, import_react159.default.createElement("linearGradient", {
  x1: "50%",
  y1: "-116.862%",
  x2: "50%",
  y2: "90.764%",
  id: "error-block-image-empty-a"
}, import_react159.default.createElement("stop", {
  stopColor: "#72A7FD",
  stopOpacity: 0.207,
  offset: "0%"
}), import_react159.default.createElement("stop", {
  stopColor: "#72A7FD",
  stopOpacity: 0.115,
  offset: "80.072%"
}), import_react159.default.createElement("stop", {
  stopColor: "#72A7FD",
  stopOpacity: 0,
  offset: "100%"
})), import_react159.default.createElement("path", {
  d: "M146.183 18.461c31.705 23.336 33.349 71.85 4.93 96.614-.252.22 6.172 5.602 13.577 11.414l.686.537.69.54.695.54.348.27.698.54a341.27 341.27 0 0 0 8.806 6.596c1.114.802 4.643-.853 10.587-4.965l-.532 12.218a1.2 1.2 0 0 1-.481.91l-10.868 8.111c-1.405 1.048-3.32 1.185-4.854.072l-35.578-25.834c-33.414 17.333-79.913 15-109.804-7-33.444-24.616-33.444-75.95 0-100.563 33.443-24.615 87.657-24.615 121.1 0Zm-60.469 7.653C51.63 26.114 24 44.534 24 67.257S51.63 108.4 85.714 108.4s61.715-18.42 61.715-41.143c0-22.722-27.63-41.143-61.715-41.143Z",
  id: "error-block-image-empty-b"
})), import_react159.default.createElement("g", {
  fill: "none",
  fillRule: "evenodd"
}, import_react159.default.createElement("path", {
  d: "M157.964 244.661H0L3.806 100.13a4.572 4.572 0 0 1 4.353-4.446l.217-.006h45.588V68.2a4.572 4.572 0 0 1 4.356-4.567l.216-.005h65.498l2.554-58.689a4.571 4.571 0 0 1 4.779-4.367l.214.015 87.79 8.222a4.572 4.572 0 0 1 4.126 4.133l.015.212 3.146 69.652L301.634 64.9a4.571 4.571 0 0 1 5.628 4.231l.005.215v43.955l56.162.001v130.264h-56.163v.001h-82.383v-.004h-66.919v1.098ZM89.503 160.03h-9.968v8.436h9.968v-8.436Zm0-14.507h-9.968v8.435h9.968v-8.435Zm197.985-5.15h-9.967v8.432h9.967v-8.431Zm-197.985-8.806h-9.968v8.436h9.968v-8.436Zm197.985-5.153h-9.967v8.432h9.967v-8.432Zm0-14.503h-9.967v8.432h9.967v-8.432Zm-84.643-.777h-30.8v8.436h30.8v-8.436Zm84.643-13.186h-9.967v8.436h9.967v-8.436Zm-84.643-3.29h-30.8v8.436h30.8v-8.436Zm0-15.912h-30.8v8.436h30.8v-8.436Z",
  transform: "translate(18.286 50.286)",
  fill: "url(#error-block-image-empty-a)"
}), import_react159.default.createElement("g", {
  transform: "translate(108.571 189.886)"
}, import_react159.default.createElement("mask", {
  id: "error-block-image-empty-c",
  fill: "#fff"
}, import_react159.default.createElement("use", {
  xlinkHref: "#error-block-image-empty-b"
})), import_react159.default.createElement("use", {
  fill: "#377EFF",
  xlinkHref: "#error-block-image-empty-b"
}), import_react159.default.createElement("path", {
  d: "M131.429 134.686a1.143 1.143 0 1 1 0 2.285 1.143 1.143 0 0 1 0-2.285Zm5.714 0a1.143 1.143 0 1 1 0 2.285 1.143 1.143 0 0 1 0-2.285ZM128 133.543a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm-5.714 0a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm21.143-1.143a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Zm-9.143-1.143a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Zm12-1.143a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm-6.857 0a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286ZM120 128.971a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm5.714 0a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm16-1.142.125.006a1.143 1.143 0 1 1-.125-.006Zm11.429 0a1.143 1.143 0 1 1 0 2.285 1.143 1.143 0 0 1 0-2.285Zm-22.857 0a1.143 1.143 0 1 1 0 2.285 1.143 1.143 0 0 1 0-2.285Zm17.143-1.143a1.143 1.143 0 1 1 0 2.285 1.143 1.143 0 0 1 0-2.285ZM136 125.543a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm-13.143 1.143a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Zm4.572-1.143a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Zm18.857-2.286a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm-16-1.143.124.007a1.143 1.143 0 1 1-.124-.007Zm11.428 0a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm-22.857 0a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm36.572 0a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm-5.715 0a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm-37.143 1.143a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Zm13.715-1.143a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Zm9.714-1.143a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm18.286-3.428a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm-11.429 0a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm-28 1.143a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Zm5.714-1.143a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Zm17.715-1.143a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm-5.715 0a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm-6.857 0a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm17.143-4.571a1.143 1.143 0 1 1 0 2.285 1.143 1.143 0 0 1 0-2.285Zm-11.428 0a1.143 1.143 0 1 1 0 2.285 1.143 1.143 0 0 1 0-2.285Zm-5.143 1.142a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Zm-8-1.142a.571.571 0 1 1 0 1.142.571.571 0 0 1 0-1.142Zm-9.143 0a.571.571 0 1 1 0 1.142.571.571 0 0 1 0-1.142Zm30.286-3.429a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286ZM124 109.543a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Zm5.714 0a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Zm5.715-4.572a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Zm-22.858-1.142a.571.571 0 1 1 0 1.142.571.571 0 0 1 0-1.142Zm-11.428-3.429a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143ZM124 99.257a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143ZM49.143 55.829a1.143 1.143 0 1 1 0 2.285 1.143 1.143 0 0 1 0-2.285Zm5.714 0a1.143 1.143 0 1 1 0 2.285 1.143 1.143 0 0 1 0-2.285Zm-9.143-1.143a1.143 1.143 0 1 1 0 2.285 1.143 1.143 0 0 1 0-2.285Zm-5.714 0a1.143 1.143 0 1 1 0 2.285 1.143 1.143 0 0 1 0-2.285Zm21.143-1.143a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143ZM52 52.4a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Zm12-1.143a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm-6.857 0a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm-19.429-1.143a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm5.715 0a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm16-1.143.124.007a1.143 1.143 0 1 1-.124-.007Zm11.428 0a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm-22.857 0a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm17.143-1.142a1.143 1.143 0 1 1 0 2.285 1.143 1.143 0 0 1 0-2.285Zm-11.429-1.143a1.143 1.143 0 1 1 0 2.285 1.143 1.143 0 0 1 0-2.285Zm-13.143 1.143a.571.571 0 1 1 0 1.142.571.571 0 0 1 0-1.142Zm4.572-1.143a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143ZM64 44.4a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm-16-1.143.125.007a1.143 1.143 0 1 1-.125-.007Zm11.429 0a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm-22.858 0a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm36.572 0a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm-5.714 0a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286ZM30.286 44.4a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143ZM44 43.257a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Zm9.714-1.143a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286ZM72 38.686a1.143 1.143 0 1 1 0 2.285 1.143 1.143 0 0 1 0-2.285Zm-11.429 0a1.143 1.143 0 1 1 0 2.285 1.143 1.143 0 0 1 0-2.285Zm-28 1.143a.571.571 0 1 1 0 1.142.571.571 0 0 1 0-1.142Zm5.715-1.143a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143ZM56 37.543a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm-5.714 0a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm-6.857 0a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286ZM60.57 32.97a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm-11.428 0a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286ZM44 34.114a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Zm-8-1.143a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Zm-9.143 0a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Zm30.286-3.428a1.143 1.143 0 1 1 0 2.286 1.143 1.143 0 0 1 0-2.286Zm-15.429 1.143a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Zm5.715 0a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Zm5.714-4.572a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Zm-22.857-1.143a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Zm-11.429-3.428a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143ZM41.714 20.4a.571.571 0 1 1 0 1.143.571.571 0 0 1 0-1.143Z",
  fill: "#003CFF",
  fillRule: "nonzero",
  mask: "url(#error-block-image-empty-c)"
})), import_react159.default.createElement("path", {
  d: "M295.213 319.24c.744.546.745 1.433.002 1.98l-11.806 8.81c-1.069.799-3.326.474-4.853-.609l-35.622-25.241c-33.375 17.037-79.545 14.615-109.28-7.271-33.443-24.615-33.443-64.521 0-89.133 33.443-24.616 87.657-24.616 121.1 0 31.706 23.336 33.35 60.42 4.931 85.185-.543.473 35.528 26.278 35.528 26.278ZM148.06 220.015c-25.44 17.853-25.44 46.8 0 64.652 25.44 17.85 66.689 17.85 92.129 0 25.436-17.853 25.436-46.799 0-64.652-25.44-17.853-66.688-17.853-92.129 0Z",
  fill: "#5D96FE"
}), import_react159.default.createElement("path", {
  d: "M123.514 233.021c2.185-5.241 5.67-9.735 10.453-13.482M264.967 271.54c-2.185 5.24-5.67 9.734-10.453 13.481",
  stroke: "#FFF",
  strokeWidth: 0.75,
  strokeLinecap: "round",
  strokeLinejoin: "round"
}), import_react159.default.createElement("path", {
  d: "M81.143 252.571c7.574 0 13.714 23.88 13.714 31.649 0 6.97-4.942 12.755-11.429 13.871v11.672c0 1.235-.767 2.237-1.713 2.237-.904 0-1.644-.912-1.71-2.07l-.005-.167v-11.526c-7.04-.595-12.571-6.644-12.571-14.017 0-7.024 5.02-27.222 11.581-31.027l.096-.053c.027-.016.055-.03.082-.045l.067-.035.066-.033.1-.05.094-.041a3.34 3.34 0 0 1 .224-.093l.11-.042.097-.032c.038-.013.077-.025.115-.036l.053-.016.053-.014a3.351 3.351 0 0 1 .23-.055l.085-.016a3.95 3.95 0 0 1 .441-.054l.11-.005.11-.002Z",
  fill: "#FFCD6B",
  fillRule: "nonzero"
}), import_react159.default.createElement("g", {
  transform: "translate(283.429 177.143)",
  fillRule: "nonzero"
}, import_react159.default.createElement("path", {
  d: "M22.475.847c12.34 0 22.345 37.935 22.345 50.276 0 11.395-8.53 20.798-19.552 22.172v19.019c0 1.932-1.25 3.5-2.792 3.5-1.49 0-2.707-1.46-2.79-3.301l-.004-.2-.001-19.018C8.659 71.92.13 62.518.13 51.123.13 40.071 8.154 8.49 18.694 2.015l.054-.031a5.94 5.94 0 0 1 .214-.128l.088-.048c.213-.12.427-.228.642-.326l.135-.06.18-.075.135-.053a5.796 5.796 0 0 1 .464-.16 4.44 4.44 0 0 1 .33-.092l.124-.03a7.122 7.122 0 0 1 .31-.065l.018-.003a6.305 6.305 0 0 1 .756-.088l.165-.007.166-.002Z",
  fill: "#FFCD6B"
}), import_react159.default.createElement("path", {
  d: "M22.475.847c12.34 0 22.345 37.935 22.345 50.276 0 11.395-8.53 20.798-19.552 22.172v19.019c0 1.932-1.25 3.5-2.792 3.5-1.543 0-2.794-1.566-2.794-3.5V73.295C8.659 71.921.13 62.518.13 51.123.13 38.783 10.134.847 22.475.847Z",
  fill: "#FFCD6B"
}), import_react159.default.createElement("circle", {
  fill: "#FFB400",
  cx: 26.4,
  cy: 56.869,
  r: 1.45
}), import_react159.default.createElement("circle", {
  fill: "#FFB400",
  cx: 39.453,
  cy: 58.319,
  r: 1
}), import_react159.default.createElement("circle", {
  fill: "#FFB400",
  cx: 17.698,
  cy: 63.637,
  r: 2.417
}), import_react159.default.createElement("circle", {
  fill: "#FFB400",
  cx: 38.002,
  cy: 51.068,
  r: 2.417
}), import_react159.default.createElement("circle", {
  fill: "#FFB400",
  cx: 18.665,
  cy: 17.228,
  r: 2.417
}), import_react159.default.createElement("circle", {
  fill: "#FFB400",
  cx: 32.201,
  cy: 13.36,
  r: 2.417
}), import_react159.default.createElement("circle", {
  fill: "#FFB400",
  cx: 26.83,
  cy: 20.666,
  r: 1.45
}), import_react159.default.createElement("circle", {
  fill: "#FFB400",
  cx: 38.969,
  cy: 31.731,
  r: 2.417
}), import_react159.default.createElement("circle", {
  fill: "#FFB400",
  cx: 25.433,
  cy: 29.797,
  r: 1.45
}), import_react159.default.createElement("path", {
  d: "M34.197 53.033c0 9.825-6.934 18.017-16.172 19.987a22.44 22.44 0 0 0 4.45.448c12.34 0 22.344-10.004 22.344-22.345C44.82 38.783 34.815.847 22.475.847c8.947 14.03 11.722 40.891 11.722 52.186Z",
  fill: "#FBBE47"
}))));

// node_modules/antd-mobile/es/components/error-block/images/busy.js
var import_react160 = __toESM(require_react());
var busyImage = import_react160.default.createElement("svg", {
  viewBox: "0 0 400 400",
  xmlns: "http://www.w3.org/2000/svg",
  xmlnsXlink: "http://www.w3.org/1999/xlink"
}, import_react160.default.createElement("defs", null, import_react160.default.createElement("linearGradient", {
  x1: "50%",
  y1: "-116.862%",
  x2: "50%",
  y2: "90.764%",
  id: "error-block-image-busy-a"
}, import_react160.default.createElement("stop", {
  stopColor: "#72A7FD",
  stopOpacity: 0.207,
  offset: "0%"
}), import_react160.default.createElement("stop", {
  stopColor: "#72A7FD",
  stopOpacity: 0.115,
  offset: "80.072%"
}), import_react160.default.createElement("stop", {
  stopColor: "#72A7FD",
  stopOpacity: 0,
  offset: "100%"
})), import_react160.default.createElement("circle", {
  id: "error-block-image-busy-b",
  cx: 34.857,
  cy: 34.857,
  r: 34.857
})), import_react160.default.createElement("g", {
  fill: "none",
  fillRule: "evenodd"
}, import_react160.default.createElement("path", {
  d: "M157.964 243.667H0L3.806 99.134a4.572 4.572 0 0 1 4.353-4.446l.217-.005h45.588V67.205a4.572 4.572 0 0 1 4.356-4.566l.216-.005 65.498-.001 2.554-58.688a4.571 4.571 0 0 1 4.779-4.368l.214.015 87.79 8.222a4.572 4.572 0 0 1 4.126 4.133l.015.213 3.146 69.652 74.976-17.906a4.571 4.571 0 0 1 5.628 4.23l.005.216v43.955h56.162v130.265l-56.163-.001v.002h-82.383v-.004h-66.919v1.098Zm-68.461-84.631h-9.968v8.435h9.968v-8.435Zm0-14.508h-9.968v8.436h9.968v-8.436Zm197.985-5.149h-9.967v8.432h9.967v-8.432Zm-197.985-8.806h-9.968v8.436h9.968v-8.436Zm197.985-5.153h-9.967v8.432h9.967v-8.432Zm0-14.503h-9.967v8.432h9.967v-8.432Zm-84.643-.777h-30.8v8.436h30.8v-8.436Zm84.643-13.186h-9.967v8.435h9.967v-8.435Zm-84.643-3.29h-30.8v8.435h30.8v-8.435Zm0-15.912h-30.8v8.436h30.8v-8.436Z",
  transform: "translate(18.286 51.286)",
  fill: "url(#error-block-image-busy-a)"
}), import_react160.default.createElement("path", {
  d: "m250.934 176.555-101.963 1.038c-5.276.054-9.51 4.374-9.455 9.65.054 5.274 4.374 9.507 9.649 9.454l.958-.01c-.376 7.363 3.679 59.93 34.894 62.659 4.203.367 7.432.39 7.475 4.609.042 4.218-3.176 4.307-7.37 4.76-34.593 3.737-34.136 56.004-33.61 63.357l-.957.01c-5.276.053-9.51 4.373-9.455 9.649.053 5.275 4.374 9.508 9.649 9.454l101.963-1.039c5.275-.054 9.508-4.374 9.455-9.648-.055-5.276-4.374-9.51-9.65-9.455l-.958.01c.377-7.363-.729-59.672-34.894-62.66-4.202-.367-7.432-.39-7.474-4.608-.043-4.219 3.175-4.308 7.369-4.76 31.276-3.377 34.136-56.004 33.61-63.357l.958-.01c5.276-.053 9.508-4.373 9.455-9.649-.055-5.276-4.374-9.509-9.65-9.454Z",
  fill: "#377EFF"
}), import_react160.default.createElement("path", {
  d: "M233.524 314.422c.108.684.772 1.148 1.483 1.035.711-.112 1.2-.758 1.091-1.443-.108-.684-.772-1.147-1.483-1.035-.711.113-1.2.759-1.091 1.443Zm-.894-5.644c.108.684.772 1.148 1.483 1.035.711-.112 1.2-.758 1.091-1.443-.108-.684-.772-1.147-1.483-1.035-.711.113-1.2.759-1.091 1.443Zm-.149 17.865c.108.684.773 1.147 1.483 1.035.711-.113 1.2-.759 1.091-1.443-.108-.684-.772-1.148-1.483-1.035-.71.112-1.2.758-1.09 1.443Zm-2.144-8.182c.109.684.773 1.148 1.484 1.035.71-.113 1.199-.759 1.09-1.443-.108-.684-.772-1.148-1.483-1.035-.71.113-1.2.759-1.09 1.443Zm-1.586-4.694c.108.684.772 1.148 1.483 1.035.711-.113 1.2-.759 1.091-1.443-.108-.684-.772-1.147-1.483-1.035-.711.113-1.2.759-1.091 1.443Zm-1.013-5.88c.109.685.773 1.148 1.484 1.036.71-.113 1.2-.759 1.09-1.443-.107-.684-.772-1.148-1.483-1.035-.71.113-1.199.759-1.09 1.443Zm.236 15.575c.108.685.772 1.148 1.483 1.035.71-.112 1.2-.758 1.09-1.442-.107-.685-.772-1.148-1.483-1.035-.71.112-1.199.758-1.09 1.442Zm-.4 4.494c.108.684.772 1.147 1.483 1.035.71-.113 1.2-.759 1.091-1.443-.108-.684-.773-1.148-1.483-1.035-.711.113-1.2.759-1.091 1.443Zm-3.88-8.601c.108.684.772 1.147 1.483 1.035.71-.113 1.199-.759 1.09-1.443-.108-.684-.772-1.148-1.483-1.035-.71.113-1.2.759-1.09 1.443Zm-.524-7.186c.065.41.463.688.89.62.426-.067.72-.454.654-.865-.065-.41-.463-.688-.89-.62-.426.067-.72.454-.654.865Zm-2.265-4.102c.109.684.773 1.148 1.484 1.035.71-.113 1.2-.759 1.09-1.443-.108-.684-.772-1.147-1.483-1.035-.71.113-1.199.759-1.09 1.443Zm-.545-6.518c.065.41.464.689.89.621.427-.067.72-.455.655-.865-.065-.41-.464-.689-.89-.621-.427.067-.72.455-.655.865Zm2.098 23.629c.109.684.773 1.147 1.484 1.035.71-.113 1.2-.759 1.09-1.443-.108-.684-.772-1.148-1.483-1.035-.71.112-1.199.758-1.09 1.443Zm-.756-9.65c.043.274.309.46.593.414a.512.512 0 0 0 .437-.577.512.512 0 0 0-.594-.414.512.512 0 0 0-.436.577Zm-.808 20.96c.109.684.773 1.147 1.484 1.034.71-.112 1.2-.758 1.09-1.442-.108-.685-.772-1.148-1.483-1.036-.71.113-1.199.759-1.09 1.443Zm-4.691-31.966c.065.41.463.689.89.621.426-.068.72-.455.654-.866-.065-.41-.463-.688-.89-.62-.426.067-.72.454-.654.865Zm2.098 23.628c.108.684.772 1.148 1.483 1.035.711-.112 1.2-.758 1.091-1.443-.108-.684-.772-1.147-1.483-1.035-.711.113-1.2.759-1.091 1.443Zm-1.967-12.416c.109.684.773 1.147 1.484 1.035.71-.113 1.199-.759 1.09-1.443-.108-.684-.772-1.148-1.483-1.035-.71.112-1.2.758-1.09 1.443Zm1.073 6.772c.108.685.772 1.148 1.483 1.035.711-.112 1.2-.758 1.091-1.442-.108-.685-.772-1.148-1.483-1.036-.711.113-1.2.759-1.091 1.443Zm-.009-3.131c.065.41.464.689.89.621.427-.068.72-.455.655-.866-.065-.41-.464-.688-.89-.62-.427.067-.72.454-.655.865Zm-1.43-9.03c.065.41.463.688.89.62.426-.067.72-.454.655-.865-.065-.41-.464-.689-.89-.62-.427.067-.72.454-.655.865ZM214.5 333.38c.108.685.772 1.148 1.483 1.036.711-.113 1.2-.759 1.091-1.443-.108-.684-.772-1.148-1.483-1.035-.711.112-1.2.758-1.091 1.442Zm-.156-7.178c.065.41.464.689.89.621.427-.067.72-.455.655-.865-.065-.41-.464-.689-.89-.621-.427.067-.72.455-.655.865Zm-1.871-4.72c.108.684.773 1.147 1.483 1.034.711-.112 1.2-.758 1.091-1.442-.108-.685-.772-1.148-1.483-1.035-.71.112-1.2.758-1.091 1.442Zm-1.614-6.857c.065.41.464.689.89.621.427-.068.72-.455.655-.866-.065-.41-.464-.688-.89-.62-.427.067-.72.454-.655.865Zm-.894-5.644c.065.41.464.689.89.621.427-.067.72-.455.655-.866-.065-.41-.463-.688-.89-.62-.427.067-.72.455-.655.865Zm-1.43-9.03c.065.41.464.688.89.62.427-.067.72-.454.655-.865-.065-.41-.464-.688-.89-.62-.427.067-.72.454-.655.865Zm-1.958 14.225c.065.41.463.689.89.62.426-.067.72-.454.654-.865-.065-.41-.463-.688-.89-.62-.426.067-.72.454-.654.865Zm-.703 12.81c.065.41.464.688.89.62.427-.067.72-.455.655-.865-.065-.41-.463-.689-.89-.621-.427.067-.72.455-.655.866Zm-4.543-22.536c.065.41.463.689.89.621.426-.067.72-.455.654-.865-.065-.41-.463-.689-.89-.621-.426.067-.72.455-.654.865Zm2.806 30.138c.065.41.463.689.89.621.426-.067.72-.455.654-.865-.065-.41-.463-.689-.89-.621-.426.067-.72.455-.654.865Zm-5.694-17.996c.065.41.463.688.89.62.426-.067.72-.455.654-.865-.065-.41-.463-.689-.89-.621-.426.067-.72.455-.654.866Zm-2.935-13.343c.066.41.464.688.89.62.427-.067.72-.454.655-.865-.065-.41-.463-.689-.89-.621-.426.068-.72.455-.655.866Z",
  fill: "#003CFF",
  fillRule: "nonzero"
}), import_react160.default.createElement("path", {
  d: "m250.934 176.555-101.963 1.038c-5.276.054-9.51 4.374-9.455 9.65.054 5.274 4.374 9.507 9.649 9.454l101.963-1.04c5.276-.052 9.508-4.372 9.455-9.648-.055-5.276-4.374-9.509-9.65-9.454ZM252.64 331.241l-101.964 1.038c-5.275.054-9.508 4.374-9.454 9.65.054 5.275 4.374 9.508 9.649 9.454l101.963-1.039c5.275-.053 9.507-4.373 9.454-9.649-.054-5.275-4.374-9.508-9.649-9.454Z",
  fill: "#7EACFF"
}), import_react160.default.createElement("path", {
  stroke: "#003CFF",
  strokeWidth: 0.75,
  strokeLinecap: "round",
  strokeLinejoin: "round",
  d: "m196.824 197.298 52.216-.506M193.329 330.5h52.215"
}), import_react160.default.createElement("path", {
  d: "M167.367 228.041c-4.091-10.787-6.086-20.934-5.985-30.44",
  stroke: "#FFF",
  strokeWidth: 0.75,
  strokeLinecap: "round",
  strokeLinejoin: "round"
}), import_react160.default.createElement("circle", {
  cx: 14.857,
  cy: 14.857,
  r: 14.857,
  transform: "translate(106.857 248.571)",
  fill: "#FFCD6B",
  fillRule: "nonzero"
}), import_react160.default.createElement("g", {
  transform: "translate(236.571 284.571)"
}, import_react160.default.createElement("mask", {
  id: "error-block-image-busy-c",
  fill: "#fff"
}, import_react160.default.createElement("use", {
  xlinkHref: "#error-block-image-busy-b"
})), import_react160.default.createElement("use", {
  fill: "#FBBE47",
  fillRule: "nonzero",
  xlinkHref: "#error-block-image-busy-b"
}), import_react160.default.createElement("circle", {
  fill: "#FFCD6B",
  fillRule: "nonzero",
  mask: "url(#error-block-image-busy-c)",
  cx: 25.714,
  cy: 28,
  r: 34.857
}), import_react160.default.createElement("circle", {
  fill: "#FFF",
  fillRule: "nonzero",
  mask: "url(#error-block-image-busy-c)",
  cx: 22.286,
  cy: 18.857,
  r: 3.429
}))));

// node_modules/antd-mobile/es/components/error-block/error-block.js
var imageRecord = {
  "default": defaultImage,
  "disconnected": disconnectedImage,
  "empty": emptyImage,
  "busy": busyImage
};
var ErrorBlock = createErrorBlock(imageRecord);

// node_modules/antd-mobile/es/components/error-block/index.js
var error_block_default = ErrorBlock;

// node_modules/antd-mobile/es/components/floating-bubble/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/floating-bubble/floating-bubble.css";

// node_modules/antd-mobile/es/components/floating-bubble/floating-bubble.js
var import_react161 = __toESM(require_react());
var classPrefix35 = `adm-floating-bubble`;
var defaultProps28 = {
  axis: "y"
};
var FloatingBubble = (p) => {
  const props = mergeProps(defaultProps28, p);
  const boundaryRef = (0, import_react161.useRef)(null);
  const buttonRef = (0, import_react161.useRef)(null);
  const [{
    x,
    y,
    opacity
  }, api] = useSpring(() => ({
    x: 0,
    y: 0,
    opacity: 1
  }));
  const bind = useDrag((state) => {
    let nextX = state.offset[0];
    let nextY = state.offset[1];
    if (state.last && props.magnetic) {
      const boundary = boundaryRef.current;
      const button = buttonRef.current;
      if (!boundary || !button)
        return;
      const boundaryRect = boundary.getBoundingClientRect();
      const buttonRect = button.getBoundingClientRect();
      if (props.magnetic === "x") {
        const compensation = x.goal - x.get();
        const leftDistance = buttonRect.left + compensation - boundaryRect.left;
        const rightDistance = boundaryRect.right - (buttonRect.right + compensation);
        if (rightDistance <= leftDistance) {
          nextX += rightDistance;
        } else {
          nextX -= leftDistance;
        }
      } else if (props.magnetic === "y") {
        const compensation = y.goal - y.get();
        const topDistance = buttonRect.top + compensation - boundaryRect.top;
        const bottomDistance = boundaryRect.bottom - (buttonRect.bottom + compensation);
        if (bottomDistance <= topDistance) {
          nextY += bottomDistance;
        } else {
          nextY -= topDistance;
        }
      }
    }
    api.start({
      x: nextX,
      y: nextY
    });
    api.start({
      opacity: state.active ? 0.8 : 1
    });
  }, {
    axis: props.axis === "xy" ? void 0 : props.axis,
    pointer: {
      touch: true
    },
    filterTaps: true,
    bounds: boundaryRef,
    from: () => [x.get(), y.get()]
  });
  return withNativeProps(props, import_react161.default.createElement("div", {
    className: classPrefix35
  }, import_react161.default.createElement("div", {
    className: `${classPrefix35}-boundary-outer`
  }, import_react161.default.createElement("div", {
    className: `${classPrefix35}-boundary`,
    ref: boundaryRef
  })), import_react161.default.createElement(animated.div, Object.assign({}, bind(), {
    style: {
      opacity,
      transform: to2([x, y], (x2, y2) => `translate(${x2}px, ${y2}px)`)
    },
    onClick: props.onClick,
    className: `${classPrefix35}-button`,
    ref: buttonRef
  }), props.children)));
};

// node_modules/antd-mobile/es/components/floating-bubble/index.js
var floating_bubble_default = FloatingBubble;

// node_modules/antd-mobile/es/components/floating-panel/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/floating-panel/floating-panel.css";

// node_modules/antd-mobile/es/components/floating-panel/floating-panel.js
var import_react163 = __toESM(require_react());

// node_modules/antd-mobile/es/utils/nearest.js
function nearest(arr, target) {
  return arr.reduce((pre, cur) => {
    return Math.abs(pre - target) < Math.abs(cur - target) ? pre : cur;
  });
}

// node_modules/antd-mobile/es/components/floating-panel/floating-panel.js
var defaultProps29 = {
  handleDraggingOfContent: true
};
var FloatingPanel = (0, import_react163.forwardRef)((p, ref) => {
  var _a, _b;
  const props = mergeProps(defaultProps29, p);
  const {
    anchors
  } = props;
  const maxHeight = (_a = anchors[anchors.length - 1]) !== null && _a !== void 0 ? _a : window.innerHeight;
  const possibles = anchors.map((x) => -x);
  const elementRef = (0, import_react163.useRef)(null);
  const headerRef = (0, import_react163.useRef)(null);
  const contentRef = (0, import_react163.useRef)(null);
  const [pulling, setPulling] = (0, import_react163.useState)(false);
  const pullingRef = (0, import_react163.useRef)(false);
  const bounds = {
    top: possibles[possibles.length - 1],
    bottom: possibles[0]
  };
  const onHeightChange = useMemoizedFn_default((_b = props.onHeightChange) !== null && _b !== void 0 ? _b : () => {
  });
  const [{
    y
  }, api] = useSpring(() => ({
    y: bounds.bottom,
    config: {
      tension: 300
    },
    onChange: (result) => {
      onHeightChange(-result.value.y, y.isAnimating);
    }
  }));
  useDrag((state) => {
    const [, offsetY] = state.offset;
    if (state.first) {
      const target = state.event.target;
      const header = headerRef.current;
      if (header === target || (header === null || header === void 0 ? void 0 : header.contains(target))) {
        pullingRef.current = true;
      } else {
        if (!props.handleDraggingOfContent)
          return;
        const reachedTop = y.goal <= bounds.top;
        const content = contentRef.current;
        if (!content)
          return;
        if (reachedTop) {
          if (content.scrollTop <= 0 && state.direction[1] > 0) {
            pullingRef.current = true;
          }
        } else {
          pullingRef.current = true;
        }
      }
    }
    setPulling(pullingRef.current);
    if (!pullingRef.current)
      return;
    const {
      event
    } = state;
    if (event.cancelable) {
      event.preventDefault();
    }
    event.stopPropagation();
    let nextY = offsetY;
    if (state.last) {
      pullingRef.current = false;
      setPulling(false);
      nextY = nearest(possibles, offsetY);
    }
    api.start({
      y: nextY
    });
  }, {
    axis: "y",
    bounds,
    rubberband: true,
    from: () => [0, y.get()],
    pointer: {
      touch: true
    },
    target: elementRef,
    eventOptions: supportsPassive ? {
      passive: false
    } : false
  });
  (0, import_react163.useImperativeHandle)(ref, () => ({
    setHeight: (height, options) => {
      api.start({
        y: -height,
        immediate: options === null || options === void 0 ? void 0 : options.immediate
      });
    }
  }), [api]);
  useLockScroll(elementRef, true);
  return withNativeProps(props, import_react163.default.createElement(animated.div, {
    ref: elementRef,
    className: "adm-floating-panel",
    style: {
      height: Math.round(maxHeight),
      translateY: y.to((y2) => `calc(100% + (${Math.round(y2)}px))`)
    }
  }, import_react163.default.createElement("div", {
    className: "adm-floating-panel-mask",
    style: {
      display: pulling ? "block" : "none"
    }
  }), import_react163.default.createElement("div", {
    className: "adm-floating-panel-header",
    ref: headerRef
  }, import_react163.default.createElement("div", {
    className: "adm-floating-panel-bar"
  })), import_react163.default.createElement("div", {
    className: "adm-floating-panel-content",
    ref: contentRef
  }, props.children)));
});

// node_modules/antd-mobile/es/components/floating-panel/index.js
var floating_panel_default = FloatingPanel;

// node_modules/antd-mobile/es/components/form/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/form/index.css";

// node_modules/antd-mobile/es/components/form/form.js
var import_react167 = __toESM(require_react());
var import_classnames29 = __toESM(require_classnames());

// node_modules/antd-mobile/es/components/form/context.js
var import_react165 = __toESM(require_react());
var defaultFormContext = {
  name: void 0,
  hasFeedback: true,
  layout: "vertical",
  requiredMarkStyle: "asterisk",
  disabled: false
};
var FormContext = import_react165.default.createContext(defaultFormContext);
var NoStyleItemContext = import_react165.default.createContext(null);

// node_modules/antd-mobile/es/components/form/header.js
var Header = () => null;

// node_modules/antd-mobile/es/components/form/form.js
var import_merge = __toESM(require_merge());

// node_modules/antd-mobile/es/components/form/form-array.js
var import_react166 = __toESM(require_react());
var FormArray = (props) => {
  return import_react166.default.createElement(List_default, {
    name: props.name,
    initialValue: props.initialValue
  }, (rcFields, operation) => {
    const fields = rcFields.map((field) => ({
      index: field.name,
      key: field.key
    }));
    const children = props.children(fields, operation).map((child, index) => {
      var _a;
      return import_react166.default.createElement(list_default, {
        key: fields[index].key,
        mode: "card",
        header: (_a = props.renderHeader) === null || _a === void 0 ? void 0 : _a.call(props, fields[index], operation)
      }, child);
    });
    if (props.renderAdd) {
      children.push(import_react166.default.createElement(list_default, {
        key: "add",
        mode: "card"
      }, import_react166.default.createElement(list_default.Item, {
        className: "adm-form-list-operation",
        onClick: () => {
          props.onAdd ? props.onAdd(operation) : operation.add();
        },
        arrow: false
      }, props.renderAdd())));
    }
    return import_react166.default.createElement(import_react166.default.Fragment, null, children);
  });
};

// node_modules/antd-mobile/es/components/form/form.js
var classPrefix36 = "adm-form";
var defaultProps30 = defaultFormContext;
var Form = (0, import_react167.forwardRef)((p, ref) => {
  const props = mergeProps(defaultProps30, p);
  const {
    className,
    style,
    hasFeedback,
    children,
    layout,
    footer,
    mode,
    disabled,
    requiredMarkStyle
  } = props, formProps = __rest(props, ["className", "style", "hasFeedback", "children", "layout", "footer", "mode", "disabled", "requiredMarkStyle"]);
  const {
    locale
  } = useConfig();
  const validateMessages = (0, import_react167.useMemo)(() => (0, import_merge.default)({}, locale.Form.defaultValidateMessages, formProps.validateMessages), [locale.Form.defaultValidateMessages, formProps.validateMessages]);
  const lists = [];
  let currentHeader = null;
  let items = [];
  let count = 0;
  function collect() {
    if (items.length === 0)
      return;
    count += 1;
    lists.push(import_react167.default.createElement(list_default, {
      header: currentHeader,
      key: count,
      mode
    }, items));
    items = [];
  }
  traverseReactNode(props.children, (child) => {
    if (import_react167.default.isValidElement(child)) {
      if (child.type === Header) {
        collect();
        currentHeader = child.props.children;
        return;
      }
      if (child.type === FormArray) {
        collect();
        lists.push(child);
        return;
      }
    }
    items.push(child);
  });
  collect();
  return import_react167.default.createElement(es_default, Object.assign({
    className: (0, import_classnames29.default)(classPrefix36, className),
    style,
    ref
  }, formProps, {
    validateMessages
  }), import_react167.default.createElement(FormContext.Provider, {
    value: {
      name: formProps.name,
      hasFeedback,
      layout,
      requiredMarkStyle,
      disabled
    }
  }, lists), footer && import_react167.default.createElement("div", {
    className: `${classPrefix36}-footer`
  }, footer));
});

// node_modules/antd-mobile/es/components/form/form-item.js
var import_react172 = __toESM(require_react());
var import_classnames32 = __toESM(require_classnames());
var import_FieldContext = __toESM(require_FieldContext());

// node_modules/antd-mobile/es/components/form/utils.js
var import_react_is2 = __toESM(require_react_is());
function toArray2(candidate) {
  if (candidate === void 0 || candidate === false)
    return [];
  return Array.isArray(candidate) ? candidate : [candidate];
}
function shouldConstruct(Component) {
  const prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}
function isSimpleFunctionComponent(type) {
  return typeof type === "function" && !shouldConstruct(type) && type.defaultProps === void 0;
}
function isSafeSetRefComponent(component) {
  if ((0, import_react_is2.isFragment)(component))
    return false;
  if ((0, import_react_is2.isMemo)(component))
    return isSafeSetRefComponent(component.type);
  return !isSimpleFunctionComponent(component.type);
}

// node_modules/antd-mobile/es/components/popover/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/popover/popover.css";
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/popover/popover-menu.css";

// node_modules/antd-mobile/es/components/popover/popover-menu.js
var import_react171 = __toESM(require_react());
var import_classnames31 = __toESM(require_classnames());

// node_modules/antd-mobile/es/components/popover/popover.js
var import_react170 = __toESM(require_react());
var import_classnames30 = __toESM(require_classnames());

// node_modules/antd-mobile/es/components/popover/arrow.js
var import_react168 = __toESM(require_react());
var Arrow = (0, import_react168.memo)((props) => {
  return withNativeProps(props, import_react168.default.createElement("svg", {
    viewBox: "0 0 30 16"
  }, import_react168.default.createElement("g", {
    fill: "currentColor"
  }, import_react168.default.createElement("path", {
    d: "M0,0 L30,0 L18.07289,14.312538 C16.65863,16.009645 14.13637,16.238942 12.43926,14.824685 C12.25341,14.669808 12.08199,14.49839 11.92711,14.312538 L0,0 L0,0 Z"
  }))));
});

// node_modules/@floating-ui/core/dist/floating-ui.core.esm.js
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "x" : "y";
}
function getLengthFromAxis(axis) {
  return axis === "y" ? "height" : "width";
}
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const mainAxis = getMainAxisFromPlacement(placement);
  const length = getLengthFromAxis(mainAxis);
  const commonAlign = reference[length] / 2 - floating[length] / 2;
  const side = getSide(placement);
  const isVertical = mainAxis === "x";
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[mainAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[mainAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
var computePosition = async (reference, floating, config3) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config3;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  if (true) {
    if (platform2 == null) {
      console.error(["Floating UI: `platform` property was not passed to config. If you", "want to use Floating UI on the web, install @floating-ui/dom", "instead of the /core package. Otherwise, you can create your own", "`platform`: https://floating-ui.com/docs/platform"].join(" "));
    }
    if (middleware.filter((_ref) => {
      let {
        name
      } = _ref;
      return name === "autoPlacement" || name === "flip";
    }).length > 1) {
      throw new Error(["Floating UI: duplicate `flip` and/or `autoPlacement`", "middleware detected. This will lead to an infinite loop. Ensure only", "one of either has been passed to the `middleware` array."].join(" "));
    }
  }
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x,
    y
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i = 0; i < middleware.length; i++) {
    const {
      name,
      fn
    } = middleware[i];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x,
      y,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x = nextX != null ? nextX : x;
    y = nextY != null ? nextY : y;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (true) {
      if (resetCount > 50) {
        console.warn(["Floating UI: The middleware lifecycle appears to be running in an", "infinite loop. This is usually caused by a `reset` continually", "being returned without a break condition."].join(" "));
      }
    }
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x,
          y
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i = -1;
      continue;
    }
  }
  return {
    x,
    y,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getSideObjectFromPadding(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  return {
    ...rect,
    top: rect.y,
    left: rect.x,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  };
}
async function detectOverflow(middlewareArguments, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x,
    y,
    platform: platform2,
    rects,
    elements,
    strategy
  } = middlewareArguments;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = options;
  const paddingObject = getSideObjectFromPadding(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    rect: elementContext === "floating" ? {
      ...rects.floating,
      x,
      y
    } : rects.reference,
    offsetParent: await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating)),
    strategy
  }) : rects[elementContext]);
  return {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
}
var min = Math.min;
var max = Math.max;
function within(min$1, value, max$1) {
  return max(min$1, min(value, max$1));
}
var arrow = (options) => ({
  name: "arrow",
  options,
  async fn(middlewareArguments) {
    const {
      element,
      padding = 0
    } = options != null ? options : {};
    const {
      x,
      y,
      placement,
      rects,
      platform: platform2
    } = middlewareArguments;
    if (element == null) {
      if (true) {
        console.warn("Floating UI: No `element` was passed to the `arrow` middleware.");
      }
      return {};
    }
    const paddingObject = getSideObjectFromPadding(padding);
    const coords = {
      x,
      y
    };
    const axis = getMainAxisFromPlacement(placement);
    const alignment = getAlignment(placement);
    const length = getLengthFromAxis(axis);
    const arrowDimensions = await platform2.getDimensions(element);
    const minProp = axis === "y" ? "top" : "left";
    const maxProp = axis === "y" ? "bottom" : "right";
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    if (clientSize === 0) {
      clientSize = rects.floating[length];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const min3 = paddingObject[minProp];
    const max3 = clientSize - arrowDimensions[length] - paddingObject[maxProp];
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset2 = within(min3, center, max3);
    const alignmentPadding = alignment === "start" ? paddingObject[minProp] : paddingObject[maxProp];
    const shouldAddOffset = alignmentPadding > 0 && center !== offset2 && rects.reference[length] <= rects.floating[length];
    const alignmentOffset = shouldAddOffset ? center < min3 ? min3 - center : max3 - center : 0;
    return {
      [axis]: coords[axis] - alignmentOffset,
      data: {
        [axis]: offset2,
        centerOffset: center - offset2
      }
    };
  }
});
var hash$1 = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (matched) => hash$1[matched]);
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const mainAxis = getMainAxisFromPlacement(placement);
  const length = getLengthFromAxis(mainAxis);
  let mainAlignmentSide = mainAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return {
    main: mainAlignmentSide,
    cross: getOppositePlacement(mainAlignmentSide)
  };
}
var hash = {
  start: "end",
  end: "start"
};
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (matched) => hash[matched]);
}
var sides = ["top", "right", "bottom", "left"];
var allPlacements = sides.reduce((acc, side) => acc.concat(side, side + "-start", side + "-end"), []);
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
var flip = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(middlewareArguments) {
      var _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = middlewareArguments;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        flipAlignment = true,
        ...detectOverflowOptions
      } = options;
      const side = getSide(placement);
      const isBasePlacement = side === initialPlacement;
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      const placements = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const {
          main,
          cross
        } = getAlignmentSides(placement, rects, await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)));
        overflows.push(overflow[main], overflow[cross]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip$, _middlewareData$flip2;
        const nextIndex = ((_middlewareData$flip$ = (_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) != null ? _middlewareData$flip$ : 0) + 1;
        const nextPlacement = placements[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = "bottom";
        switch (fallbackStrategy) {
          case "bestFit": {
            var _overflowsData$map$so;
            const placement2 = (_overflowsData$map$so = overflowsData.map((d) => [d, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0].placement;
            if (placement2) {
              resetPlacement = placement2;
            }
            break;
          }
          case "initialPlacement":
            resetPlacement = initialPlacement;
            break;
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
function getSideOffsets(overflow, rect) {
  return {
    top: overflow.top - rect.height,
    right: overflow.right - rect.width,
    bottom: overflow.bottom - rect.height,
    left: overflow.left - rect.width
  };
}
function isAnySideFullyClipped(overflow) {
  return sides.some((side) => overflow[side] >= 0);
}
var hide = function(_temp) {
  let {
    strategy = "referenceHidden",
    ...detectOverflowOptions
  } = _temp === void 0 ? {} : _temp;
  return {
    name: "hide",
    async fn(middlewareArguments) {
      const {
        rects
      } = middlewareArguments;
      switch (strategy) {
        case "referenceHidden": {
          const overflow = await detectOverflow(middlewareArguments, {
            ...detectOverflowOptions,
            elementContext: "reference"
          });
          const offsets = getSideOffsets(overflow, rects.reference);
          return {
            data: {
              referenceHiddenOffsets: offsets,
              referenceHidden: isAnySideFullyClipped(offsets)
            }
          };
        }
        case "escaped": {
          const overflow = await detectOverflow(middlewareArguments, {
            ...detectOverflowOptions,
            altBoundary: true
          });
          const offsets = getSideOffsets(overflow, rects.floating);
          return {
            data: {
              escapedOffsets: offsets,
              escaped: isAnySideFullyClipped(offsets)
            }
          };
        }
        default: {
          return {};
        }
      }
    }
  };
};
async function convertValueToCoords(middlewareArguments, value) {
  const {
    placement,
    platform: platform2,
    elements
  } = middlewareArguments;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getMainAxisFromPlacement(placement) === "x";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = typeof value === "function" ? value(middlewareArguments) : value;
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var offset = function(value) {
  if (value === void 0) {
    value = 0;
  }
  return {
    name: "offset",
    options: value,
    async fn(middlewareArguments) {
      const {
        x,
        y
      } = middlewareArguments;
      const diffCoords = await convertValueToCoords(middlewareArguments, value);
      return {
        x: x + diffCoords.x,
        y: y + diffCoords.y,
        data: diffCoords
      };
    }
  };
};
function getCrossAxis(axis) {
  return axis === "x" ? "y" : "x";
}
var shift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(middlewareArguments) {
      const {
        x,
        y,
        placement
      } = middlewareArguments;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x2,
              y: y2
            } = _ref;
            return {
              x: x2,
              y: y2
            };
          }
        },
        ...detectOverflowOptions
      } = options;
      const coords = {
        x,
        y
      };
      const overflow = await detectOverflow(middlewareArguments, detectOverflowOptions);
      const mainAxis = getMainAxisFromPlacement(getSide(placement));
      const crossAxis = getCrossAxis(mainAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min3 = mainAxisCoord + overflow[minSide];
        const max3 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = within(min3, mainAxisCoord, max3);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min3 = crossAxisCoord + overflow[minSide];
        const max3 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = within(min3, crossAxisCoord, max3);
      }
      const limitedCoords = limiter.fn({
        ...middlewareArguments,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x,
          y: limitedCoords.y - y
        }
      };
    }
  };
};
var limitShift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    options,
    fn(middlewareArguments) {
      const {
        x,
        y,
        placement,
        rects,
        middlewareData
      } = middlewareArguments;
      const {
        offset: offset2 = 0,
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true
      } = options;
      const coords = {
        x,
        y
      };
      const mainAxis = getMainAxisFromPlacement(placement);
      const crossAxis = getCrossAxis(mainAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      const rawOffset = typeof offset2 === "function" ? offset2(middlewareArguments) : offset2;
      const computedOffset = typeof rawOffset === "number" ? {
        mainAxis: rawOffset,
        crossAxis: 0
      } : {
        mainAxis: 0,
        crossAxis: 0,
        ...rawOffset
      };
      if (checkMainAxis) {
        const len = mainAxis === "y" ? "height" : "width";
        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
        if (mainAxisCoord < limitMin) {
          mainAxisCoord = limitMin;
        } else if (mainAxisCoord > limitMax) {
          mainAxisCoord = limitMax;
        }
      }
      if (checkCrossAxis) {
        var _middlewareData$offse, _middlewareData$offse2, _middlewareData$offse3, _middlewareData$offse4;
        const len = mainAxis === "y" ? "width" : "height";
        const isOriginSide = ["top", "left"].includes(getSide(placement));
        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? (_middlewareData$offse = (_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) != null ? _middlewareData$offse : 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : (_middlewareData$offse3 = (_middlewareData$offse4 = middlewareData.offset) == null ? void 0 : _middlewareData$offse4[crossAxis]) != null ? _middlewareData$offse3 : 0) - (isOriginSide ? computedOffset.crossAxis : 0);
        if (crossAxisCoord < limitMin) {
          crossAxisCoord = limitMin;
        } else if (crossAxisCoord > limitMax) {
          crossAxisCoord = limitMax;
        }
      }
      return {
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      };
    }
  };
};

// node_modules/@floating-ui/dom/dist/floating-ui.dom.esm.js
function isWindow(value) {
  return value && value.document && value.location && value.alert && value.setInterval;
}
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (!isWindow(node)) {
    const ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}
function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeName(node) {
  return isWindow(node) ? "" : node ? (node.nodeName || "").toLowerCase() : "";
}
function getUAString() {
  const uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands) {
    return uaData.brands.map((item) => item.brand + "/" + item.version).join(" ");
  }
  return navigator.userAgent;
}
function isHTMLElement(value) {
  return value instanceof getWindow(value).HTMLElement;
}
function isElement2(value) {
  return value instanceof getWindow(value).Element;
}
function isNode(value) {
  return value instanceof getWindow(value).Node;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  const OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY
  } = getComputedStyle(element);
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isContainingBlock(element) {
  const isFirefox = /firefox/i.test(getUAString());
  const css = getComputedStyle(element);
  return css.transform !== "none" || css.perspective !== "none" || css.contain === "paint" || ["transform", "perspective"].includes(css.willChange) || isFirefox && css.willChange === "filter" || isFirefox && (css.filter ? css.filter !== "none" : false);
}
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}
var min2 = Math.min;
var max2 = Math.max;
var round = Math.round;
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  var _win$visualViewport$o, _win$visualViewport, _win$visualViewport$o2, _win$visualViewport2;
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  let scaleX = 1;
  let scaleY = 1;
  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  const win = isElement2(element) ? getWindow(element) : window;
  const addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  const x = (clientRect.left + (addVisualOffsets ? (_win$visualViewport$o = (_win$visualViewport = win.visualViewport) == null ? void 0 : _win$visualViewport.offsetLeft) != null ? _win$visualViewport$o : 0 : 0)) / scaleX;
  const y = (clientRect.top + (addVisualOffsets ? (_win$visualViewport$o2 = (_win$visualViewport2 = win.visualViewport) == null ? void 0 : _win$visualViewport2.offsetTop) != null ? _win$visualViewport$o2 : 0 : 0)) / scaleY;
  const width = clientRect.width / scaleX;
  const height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x,
    y
  };
}
function getDocumentElement(node) {
  return ((isNode(node) ? node.ownerDocument : node.document) || window.document).documentElement;
}
function getNodeScroll(element) {
  if (isElement2(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.pageXOffset,
    scrollTop: element.pageYOffset
  };
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function isScaled(element) {
  const rect = getBoundingClientRect(element);
  return round(rect.width) !== element.offsetWidth || round(rect.height) !== element.offsetHeight;
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const rect = getBoundingClientRect(
    element,
    isOffsetParentAnElement && isScaled(offsetParent),
    strategy === "fixed"
  );
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent, true);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  return node.assignedSlot || node.parentNode || (isShadowRoot(node) ? node.host : null) || getDocumentElement(node);
}
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") {
    return null;
  }
  return composedOffsetParent(element);
}
function composedOffsetParent(element) {
  let {
    offsetParent
  } = element;
  let ancestor = element;
  let foundInsideSlot = false;
  while (ancestor && ancestor !== offsetParent) {
    const {
      assignedSlot
    } = ancestor;
    if (assignedSlot) {
      let newOffsetParent = assignedSlot.offsetParent;
      if (getComputedStyle(assignedSlot).display === "contents") {
        const hadStyleAttribute = assignedSlot.hasAttribute("style");
        const oldDisplay = assignedSlot.style.display;
        assignedSlot.style.display = getComputedStyle(ancestor).display;
        newOffsetParent = assignedSlot.offsetParent;
        assignedSlot.style.display = oldDisplay;
        if (!hadStyleAttribute) {
          assignedSlot.removeAttribute("style");
        }
      }
      ancestor = assignedSlot;
      if (offsetParent !== newOffsetParent) {
        offsetParent = newOffsetParent;
        foundInsideSlot = true;
      }
    } else if (isShadowRoot(ancestor) && ancestor.host && foundInsideSlot) {
      break;
    }
    ancestor = isShadowRoot(ancestor) && ancestor.host || ancestor.parentNode;
  }
  return offsetParent;
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && !["html", "body"].includes(getNodeName(currentNode))) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else {
      const parent = currentNode.parentNode;
      currentNode = isShadowRoot(parent) ? parent.host : parent;
    }
  }
  return null;
}
function getOffsetParent(element) {
  const window2 = getWindow(element);
  let offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}
function getDimensions(element) {
  if (isHTMLElement(element)) {
    return {
      width: element.offsetWidth,
      height: element.offsetHeight
    };
  }
  const rect = getBoundingClientRect(element);
  return {
    width: rect.width,
    height: rect.height
  };
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  if (offsetParent === documentElement) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent, true);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    ...rect,
    x: rect.x - scroll.scrollLeft + offsets.x,
    y: rect.y - scroll.scrollTop + offsets.y
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getDocumentRect(element) {
  var _element$ownerDocumen;
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  const width = max2(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  const height = max2(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;
  if (getComputedStyle(body || html).direction === "rtl") {
    x += max2(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (["html", "body", "#document"].includes(getNodeName(parentNode))) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list) {
  var _node$ownerDocument;
  if (list === void 0) {
    list = [];
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.body);
  const win = getWindow(scrollableAncestor);
  const target = isBody ? [win].concat(win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : []) : scrollableAncestor;
  const updatedList = list.concat(target);
  return isBody ? updatedList : updatedList.concat(getOverflowAncestors(target));
}
function contains(parent, child) {
  const rootNode = child.getRootNode == null ? void 0 : child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    let next = child;
    do {
      if (next && parent === next) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, false, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  return {
    top,
    left,
    x: left,
    y: top,
    right: left + element.clientWidth,
    bottom: top + element.clientHeight,
    width: element.clientWidth,
    height: element.clientHeight
  };
}
function getClientRectFromClippingAncestor(element, clippingParent, strategy) {
  if (clippingParent === "viewport") {
    return rectToClientRect(getViewportRect(element, strategy));
  }
  if (isElement2(clippingParent)) {
    return getInnerBoundingClientRect(clippingParent, strategy);
  }
  return rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingAncestors(element) {
  const clippingAncestors = getOverflowAncestors(element);
  const canEscapeClipping = ["absolute", "fixed"].includes(getComputedStyle(element).position);
  const clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement2(clipperElement)) {
    return [];
  }
  return clippingAncestors.filter((clippingAncestors2) => isElement2(clippingAncestors2) && contains(clippingAncestors2, clipperElement) && getNodeName(clippingAncestors2) !== "body");
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const mainClippingAncestors = boundary === "clippingAncestors" ? getClippingAncestors(element) : [].concat(boundary);
  const clippingAncestors = [...mainClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max2(rect.top, accRect.top);
    accRect.right = min2(rect.right, accRect.right);
    accRect.bottom = min2(rect.bottom, accRect.bottom);
    accRect.left = max2(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
var platform = {
  getClippingRect,
  convertOffsetParentRelativeRectToViewportRelativeRect,
  isElement: isElement2,
  getDimensions,
  getOffsetParent,
  getDocumentElement,
  getElementRects: (_ref) => {
    let {
      reference,
      floating,
      strategy
    } = _ref;
    return {
      reference: getRectRelativeToOffsetParent(reference, getOffsetParent(floating), strategy),
      floating: {
        ...getDimensions(floating),
        x: 0,
        y: 0
      }
    };
  },
  getClientRects: (element) => Array.from(element.getClientRects()),
  isRTL: (element) => getComputedStyle(element).direction === "rtl"
};
function autoUpdate(reference, floating, update3, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll: _ancestorScroll = true,
    ancestorResize: _ancestorResize = true,
    elementResize = true,
    animationFrame = false
  } = options;
  const ancestorScroll = _ancestorScroll && !animationFrame;
  const ancestorResize = _ancestorResize && !animationFrame;
  const ancestors = ancestorScroll || ancestorResize ? [...isElement2(reference) ? getOverflowAncestors(reference) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update3, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update3);
  });
  let observer = null;
  if (elementResize) {
    let initialUpdate = true;
    observer = new ResizeObserver(() => {
      if (!initialUpdate) {
        update3();
      }
      initialUpdate = false;
    });
    isElement2(reference) && !animationFrame && observer.observe(reference);
    observer.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop2();
  }
  function frameLoop2() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update3();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop2);
  }
  update3();
  return () => {
    var _observer;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update3);
      ancestorResize && ancestor.removeEventListener("resize", update3);
    });
    (_observer = observer) == null ? void 0 : _observer.disconnect();
    observer = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var computePosition2 = (reference, floating, options) => computePosition(reference, floating, {
  platform,
  ...options
});

// node_modules/antd-mobile/es/components/popover/wrapper.js
var import_react169 = __toESM(require_react());
var import_react_dom3 = __toESM(require_react_dom());
var Wrapper = class extends import_react169.default.Component {
  constructor() {
    super(...arguments);
    this.element = null;
  }
  componentDidMount() {
    this.componentDidUpdate();
  }
  componentDidUpdate() {
    const node = (0, import_react_dom3.findDOMNode)(this);
    if (node instanceof Element) {
      this.element = node;
    } else {
      this.element = null;
    }
  }
  render() {
    return import_react169.default.Children.only(this.props.children);
  }
};

// node_modules/antd-mobile/es/components/popover/normalize-placement.js
var record = {
  "topLeft": "top-start",
  "topRight": "top-end",
  "bottomLeft": "bottom-start",
  "bottomRight": "bottom-end",
  "leftTop": "left-start",
  "leftBottom": "left-end",
  "rightTop": "right-start",
  "rightBottom": "right-end"
};
function normalizePlacement(placement) {
  var _a;
  return (_a = record[placement]) !== null && _a !== void 0 ? _a : placement;
}

// node_modules/antd-mobile/es/utils/convert-px.js
var tenPxTester = null;
var tester = null;
if (canUseDom) {
  tenPxTester = document.createElement("div");
  tenPxTester.className = "adm-px-tester";
  tenPxTester.style.setProperty("--size", "10");
  document.body.appendChild(tenPxTester);
  tester = document.createElement("div");
  tester.className = "adm-px-tester";
  document.body.appendChild(tester);
  if (isDev2) {
    if (window.getComputedStyle(tester).position !== "fixed") {
      devError("Global", "The px tester is not rendering properly. Please make sure you have imported `antd-mobile/es/global`.");
    }
  }
}
function convertPx(px) {
  if (tenPxTester === null || tester === null)
    return px;
  if (tenPxTester.getBoundingClientRect().height === 10) {
    return px;
  }
  tester.style.setProperty("--size", px.toString());
  return tester.getBoundingClientRect().height;
}

// node_modules/antd-mobile/es/components/popover/popover.js
var classPrefix37 = `adm-popover`;
var defaultProps31 = {
  placement: "top",
  defaultVisible: false,
  stopPropagation: ["click"],
  getContainer: () => document.body
};
var Popover = (0, import_react170.forwardRef)((p, ref) => {
  const props = mergeProps(defaultProps31, p);
  const {
    mode = "light"
  } = props;
  const placement = normalizePlacement(props.placement);
  const [visible, setVisible] = usePropsValue({
    value: props.visible,
    defaultValue: props.defaultVisible,
    onChange: props.onVisibleChange
  });
  (0, import_react170.useImperativeHandle)(ref, () => {
    return {
      show: () => setVisible(true),
      hide: () => setVisible(false),
      visible
    };
  }, [visible]);
  const targetRef = (0, import_react170.useRef)(null);
  const floatingRef = (0, import_react170.useRef)(null);
  const arrowRef = (0, import_react170.useRef)(null);
  const floating = withStopPropagation(props.stopPropagation, withNativeProps(props, import_react170.default.createElement("div", {
    className: (0, import_classnames30.default)(classPrefix37, `${classPrefix37}-${mode}`, !visible && `${classPrefix37}-hidden`),
    ref: floatingRef
  }, import_react170.default.createElement("div", {
    className: `${classPrefix37}-arrow`,
    ref: arrowRef
  }, import_react170.default.createElement(Arrow, {
    className: `${classPrefix37}-arrow-icon`
  })), import_react170.default.createElement("div", {
    className: `${classPrefix37}-inner`
  }, import_react170.default.createElement("div", {
    className: `${classPrefix37}-inner-content`
  }, props.content)))));
  const [targetElement, setTargetElement] = (0, import_react170.useState)(null);
  function update3() {
    var _a, _b, _c;
    return __awaiter(this, void 0, void 0, function* () {
      const target = (_b = (_a = targetRef.current) === null || _a === void 0 ? void 0 : _a.element) !== null && _b !== void 0 ? _b : null;
      const floating2 = floatingRef.current;
      const arrowElement = arrowRef.current;
      setTargetElement(target);
      if (!target || !floating2 || !arrowElement)
        return;
      const {
        x,
        y,
        placement: realPlacement,
        middlewareData
      } = yield computePosition2(target, floating2, {
        placement,
        middleware: [offset(convertPx(12)), shift({
          padding: convertPx(4),
          crossAxis: false,
          limiter: limitShift()
        }), flip(), hide(), arrow({
          element: arrowElement,
          padding: convertPx(12)
        })]
      });
      Object.assign(floating2.style, {
        left: `${x}px`,
        top: `${y}px`
      });
      const side = realPlacement.split("-")[0];
      const arrowSide = {
        top: "bottom",
        right: "left",
        bottom: "top",
        left: "right"
      }[side];
      const {
        x: arrowX,
        y: arrowY
      } = (_c = middlewareData.arrow) !== null && _c !== void 0 ? _c : {};
      Object.assign(arrowElement.style, {
        left: arrowX != null ? `${arrowX}px` : "",
        top: arrowY != null ? `${arrowY}px` : "",
        right: "",
        bottom: "",
        [arrowSide]: `-${convertPx(8)}px`
      });
      const arrowRotate = {
        top: "0deg",
        bottom: "180deg",
        left: "270deg",
        right: "90deg"
      }[side];
      arrowElement.style.setProperty("--arrow-icon-rotate", arrowRotate);
    });
  }
  useIsomorphicLayoutEffect_default(() => {
    update3();
  });
  (0, import_react170.useEffect)(() => {
    if (!targetElement)
      return;
    if (!props.trigger)
      return;
    function handleClick() {
      setVisible((v) => !v);
    }
    targetElement.addEventListener("click", handleClick);
    return () => {
      targetElement.removeEventListener("click", handleClick);
    };
  }, [targetElement, props.trigger]);
  (0, import_react170.useEffect)(() => {
    const floatingElement = floatingRef.current;
    if (!targetElement || !floatingElement)
      return;
    return autoUpdate(targetElement, floatingElement, update3, {
      elementResize: typeof ResizeObserver !== "undefined"
    });
  }, [targetElement]);
  useClickAway(() => {
    if (!props.trigger)
      return;
    setVisible(false);
  }, () => {
    var _a;
    return (_a = targetRef.current) === null || _a === void 0 ? void 0 : _a.element;
  });
  const shouldRender = useShouldRender(visible, false, props.destroyOnHide);
  return import_react170.default.createElement(import_react170.default.Fragment, null, import_react170.default.createElement(Wrapper, {
    ref: targetRef
  }, props.children), shouldRender && renderToContainer(props.getContainer, floating));
});

// node_modules/antd-mobile/es/components/popover/popover-menu.js
var classPrefix38 = `adm-popover-menu`;
var PopoverMenu = (0, import_react171.forwardRef)((props, ref) => {
  const innerRef = (0, import_react171.useRef)(null);
  (0, import_react171.useImperativeHandle)(ref, () => innerRef.current, []);
  const onClick = (0, import_react171.useCallback)((e) => {
    var _a;
    const {
      onAction
    } = props;
    if (onAction) {
      onAction(e);
    }
    (_a = innerRef.current) === null || _a === void 0 ? void 0 : _a.hide();
  }, [props.onAction]);
  const overlay = (0, import_react171.useMemo)(() => {
    return import_react171.default.createElement("div", {
      className: `${classPrefix38}-list`
    }, import_react171.default.createElement("div", {
      className: `${classPrefix38}-list-inner`
    }, props.actions.map((action, index) => {
      var _a;
      return import_react171.default.createElement("a", {
        key: (_a = action.key) !== null && _a !== void 0 ? _a : index,
        className: (0, import_classnames31.default)(`${classPrefix38}-item`, "adm-plain-anchor", action.disabled && `${classPrefix38}-item-disabled`),
        onClick: () => {
          var _a2;
          if (action.disabled)
            return;
          onClick(action);
          (_a2 = action.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(action);
        }
      }, action.icon && import_react171.default.createElement("div", {
        className: `${classPrefix38}-item-icon`
      }, action.icon), import_react171.default.createElement("div", {
        className: `${classPrefix38}-item-text`
      }, action.text));
    })));
  }, [props.actions, onClick]);
  return import_react171.default.createElement(Popover, Object.assign({
    ref: innerRef
  }, props, {
    className: (0, import_classnames31.default)(classPrefix38, props.className),
    content: overlay
  }), props.children);
});

// node_modules/antd-mobile/es/components/popover/index.js
var popover_default = attachPropertiesToComponent(Popover, {
  Menu: PopoverMenu
});

// node_modules/antd-mobile/es/utils/undefined-fallback.js
function undefinedFallback(...items) {
  let i;
  for (i = 0; i < items.length; i++) {
    if (items[i] !== void 0)
      break;
  }
  return items[i];
}

// node_modules/antd-mobile/es/components/form/form-item.js
var NAME_SPLIT = "__SPLIT__";
var classPrefix39 = `adm-form-item`;
var MemoInput = import_react172.default.memo(({
  children
}) => children, (prev, next) => prev.value === next.value && prev.update === next.update);
var FormItemLayout = (props) => {
  var _a;
  const {
    className,
    style,
    extra,
    label,
    help,
    required,
    children,
    htmlFor,
    hidden,
    arrow: arrow2,
    childElementPosition = "normal"
  } = props;
  const context = (0, import_react172.useContext)(FormContext);
  const {
    locale
  } = useConfig();
  const hasFeedback = props.hasFeedback !== void 0 ? props.hasFeedback : context.hasFeedback;
  const layout = props.layout || context.layout;
  const disabled = (_a = props.disabled) !== null && _a !== void 0 ? _a : context.disabled;
  const requiredMark = (() => {
    const {
      requiredMarkStyle
    } = context;
    switch (requiredMarkStyle) {
      case "asterisk":
        return required && import_react172.default.createElement("span", {
          className: `${classPrefix39}-required-asterisk`
        }, "*");
      case "text-required":
        return required && import_react172.default.createElement("span", {
          className: `${classPrefix39}-required-text`
        }, "(", locale.Form.required, ")");
      case "text-optional":
        return !required && import_react172.default.createElement("span", {
          className: `${classPrefix39}-required-text`
        }, "(", locale.Form.optional, ")");
      case "none":
        return null;
      default:
        return null;
    }
  })();
  const labelElement = label ? import_react172.default.createElement("label", {
    className: `${classPrefix39}-label`,
    htmlFor
  }, label, requiredMark, help && import_react172.default.createElement(popover_default, {
    content: help,
    mode: "dark",
    trigger: "click"
  }, import_react172.default.createElement("span", {
    className: `${classPrefix39}-label-help`,
    onClick: (e) => {
      e.preventDefault();
    }
  }, import_react172.default.createElement(QuestionCircleOutline_default, null)))) : null;
  const description = props.description || hasFeedback ? import_react172.default.createElement(import_react172.default.Fragment, null, props.description, hasFeedback && import_react172.default.createElement(import_react172.default.Fragment, null, props.errors.map((error, index) => import_react172.default.createElement("div", {
    key: `error-${index}`,
    className: `${classPrefix39}-feedback-error`
  }, error)), props.warnings.map((warning, index) => import_react172.default.createElement("div", {
    key: `warning-${index}`,
    className: `${classPrefix39}-feedback-warning`
  }, warning)))) : null;
  return withNativeProps(props, import_react172.default.createElement(list_default.Item, {
    style,
    title: layout === "vertical" && labelElement,
    prefix: layout === "horizontal" && labelElement,
    extra,
    description,
    className: (0, import_classnames32.default)(classPrefix39, className, `${classPrefix39}-${layout}`, {
      [`${classPrefix39}-hidden`]: hidden,
      [`${classPrefix39}-has-error`]: props.errors.length
    }),
    disabled,
    onClick: props.onClick,
    clickable: props.clickable,
    arrow: arrow2
  }, import_react172.default.createElement("div", {
    className: (0, import_classnames32.default)(`${classPrefix39}-child`, `${classPrefix39}-child-position-${childElementPosition}`)
  }, import_react172.default.createElement("div", {
    className: (0, import_classnames32.default)(`${classPrefix39}-child-inner`)
  }, children))));
};
var FormItem = (props) => {
  const {
    className,
    style,
    label,
    help,
    extra,
    hasFeedback,
    name,
    required,
    noStyle,
    hidden,
    layout,
    childElementPosition,
    description,
    disabled,
    rules,
    children,
    messageVariables,
    trigger: trigger2 = "onChange",
    validateTrigger = trigger2,
    onClick,
    shouldUpdate,
    dependencies,
    clickable,
    arrow: arrow2
  } = props, fieldProps = __rest(props, ["className", "style", "label", "help", "extra", "hasFeedback", "name", "required", "noStyle", "hidden", "layout", "childElementPosition", "description", "disabled", "rules", "children", "messageVariables", "trigger", "validateTrigger", "onClick", "shouldUpdate", "dependencies", "clickable", "arrow"]);
  const {
    name: formName
  } = (0, import_react172.useContext)(FormContext);
  const {
    validateTrigger: contextValidateTrigger
  } = (0, import_react172.useContext)(import_FieldContext.default);
  const mergedValidateTrigger = undefinedFallback(validateTrigger, contextValidateTrigger, trigger2);
  const widgetRef = (0, import_react172.useRef)(null);
  const updateRef2 = (0, import_react172.useRef)(0);
  updateRef2.current += 1;
  const [subMetas, setSubMetas] = (0, import_react172.useState)({});
  const onSubMetaChange = (0, import_react172.useCallback)((subMeta, namePath) => {
    setSubMetas((prevSubMetas) => {
      const nextSubMetas = Object.assign({}, prevSubMetas);
      const nameKey = namePath.join(NAME_SPLIT);
      if (subMeta.destroy) {
        delete nextSubMetas[nameKey];
      } else {
        nextSubMetas[nameKey] = subMeta;
      }
      return nextSubMetas;
    });
  }, [setSubMetas]);
  function renderLayout(baseChildren, fieldId, meta, isRequired) {
    var _a, _b;
    if (noStyle && !hidden) {
      return baseChildren;
    }
    const curErrors = (_a = meta === null || meta === void 0 ? void 0 : meta.errors) !== null && _a !== void 0 ? _a : [];
    const errors = Object.keys(subMetas).reduce((subErrors, key) => {
      var _a2, _b2;
      const errors2 = (_b2 = (_a2 = subMetas[key]) === null || _a2 === void 0 ? void 0 : _a2.errors) !== null && _b2 !== void 0 ? _b2 : [];
      if (errors2.length) {
        subErrors = [...subErrors, ...errors2];
      }
      return subErrors;
    }, curErrors);
    const curWarnings = (_b = meta === null || meta === void 0 ? void 0 : meta.warnings) !== null && _b !== void 0 ? _b : [];
    const warnings = Object.keys(subMetas).reduce((subWarnings, key) => {
      var _a2, _b2;
      const warnings2 = (_b2 = (_a2 = subMetas[key]) === null || _a2 === void 0 ? void 0 : _a2.warnings) !== null && _b2 !== void 0 ? _b2 : [];
      if (warnings2.length) {
        subWarnings = [...subWarnings, ...warnings2];
      }
      return subWarnings;
    }, curWarnings);
    return withNativeProps(props, import_react172.default.createElement(FormItemLayout, {
      className,
      style,
      label,
      extra,
      help,
      description,
      required: isRequired,
      disabled,
      hasFeedback,
      htmlFor: fieldId,
      errors,
      warnings,
      onClick: onClick && ((e) => onClick(e, widgetRef)),
      hidden,
      layout,
      childElementPosition,
      clickable,
      arrow: arrow2
    }, import_react172.default.createElement(NoStyleItemContext.Provider, {
      value: onSubMetaChange
    }, baseChildren)));
  }
  const isRenderProps = typeof children === "function";
  if (!name && !isRenderProps && !props.dependencies) {
    return renderLayout(children);
  }
  let Variables = {};
  Variables.label = typeof label === "string" ? label : "";
  if (messageVariables) {
    Variables = Object.assign(Object.assign({}, Variables), messageVariables);
  }
  const notifyParentMetaChange = (0, import_react172.useContext)(NoStyleItemContext);
  const onMetaChange = (meta) => {
    if (noStyle && notifyParentMetaChange) {
      const namePath = meta.name;
      notifyParentMetaChange(meta, namePath);
    }
  };
  return import_react172.default.createElement(Field_default, Object.assign({}, fieldProps, {
    name,
    shouldUpdate,
    dependencies,
    rules,
    trigger: trigger2,
    validateTrigger: mergedValidateTrigger,
    onMetaChange,
    messageVariables: Variables
  }), (control, meta, context) => {
    let childNode = null;
    const isRequired = required !== void 0 ? required : rules && rules.some((rule) => !!(rule && typeof rule === "object" && rule.required));
    const nameList = toArray2(name).length && meta ? meta.name : [];
    const fieldId = (nameList.length > 0 && formName ? [formName, ...nameList] : nameList).join("_");
    if (shouldUpdate && dependencies) {
      devWarning("Form.Item", "`shouldUpdate` and `dependencies` shouldn't be used together.");
    }
    if (isRenderProps) {
      if ((shouldUpdate || dependencies) && !name) {
        childNode = children(context);
      } else {
        if (!(shouldUpdate || dependencies)) {
          devWarning("Form.Item", "`children` of render props only work with `shouldUpdate` or `dependencies`.");
        }
        if (name) {
          devWarning("Form.Item", "Do not use `name` with `children` of render props since it's not a field.");
        }
      }
    } else if (dependencies && !name) {
      devWarning("Form.Item", "Must set `name` or use render props when `dependencies` is set.");
    } else if (import_react172.default.isValidElement(children)) {
      if (children.props.defaultValue) {
        devWarning("Form.Item", "`defaultValue` will not work on controlled Field. You should use `initialValues` of Form instead.");
      }
      const childProps = Object.assign(Object.assign({}, children.props), control);
      if (isSafeSetRefComponent(children)) {
        childProps.ref = (instance) => {
          const originRef = children.ref;
          if (originRef) {
            if (typeof originRef === "function") {
              originRef(instance);
            }
            if ("current" in originRef) {
              originRef.current = instance;
            }
          }
          widgetRef.current = instance;
        };
      }
      if (!childProps.id) {
        childProps.id = fieldId;
      }
      const triggers = /* @__PURE__ */ new Set([...toArray2(trigger2), ...toArray2(mergedValidateTrigger)]);
      triggers.forEach((eventName) => {
        childProps[eventName] = (...args) => {
          var _a, _b, _c;
          (_a = control[eventName]) === null || _a === void 0 ? void 0 : _a.call(control, ...args);
          (_c = (_b = children.props)[eventName]) === null || _c === void 0 ? void 0 : _c.call(_b, ...args);
        };
      });
      childNode = import_react172.default.createElement(MemoInput, {
        value: control[props.valuePropName || "value"],
        update: updateRef2.current
      }, import_react172.default.cloneElement(children, childProps));
    } else {
      if (name) {
        devWarning("Form.Item", "`name` is only used for validate React element. If you are using Form.Item as layout display, please remove `name` instead.");
      }
      childNode = children;
    }
    return renderLayout(childNode, fieldId, meta, isRequired);
  });
};

// node_modules/antd-mobile/es/components/form/form-subscribe.js
var import_react173 = __toESM(require_react());
var FormSubscribe = (props) => {
  const update3 = useUpdate_default();
  const form = (0, import_react173.useContext)(FieldContext_default);
  return import_react173.default.createElement(import_react173.default.Fragment, null, props.children(form.getFieldsValue(props.to), form), props.to.map((namePath) => import_react173.default.createElement(Watcher, {
    key: namePath.toString(),
    form,
    namePath,
    onChange: update3
  })));
};
var Watcher = (0, import_react173.memo)((props) => {
  const value = useWatch_default(props.namePath, props.form);
  useIsomorphicUpdateLayoutEffect(() => {
    props.onChange();
  }, [value]);
  return null;
});

// node_modules/antd-mobile/es/components/form/index.js
var form_default = attachPropertiesToComponent(Form, {
  Item: FormItem,
  Subscribe: FormSubscribe,
  Header,
  Array: FormArray,
  useForm: useForm_default,
  useWatch: useWatch_default
});

// node_modules/antd-mobile/es/components/grid/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/grid/grid.css";

// node_modules/antd-mobile/es/components/grid/grid.js
var import_react174 = __toESM(require_react());
var classPrefix40 = `adm-grid`;
var Grid = (props) => {
  const style = {
    "--columns": props.columns.toString()
  };
  const {
    gap
  } = props;
  if (gap !== void 0) {
    if (Array.isArray(gap)) {
      style["--gap-horizontal"] = toCSSLength(gap[0]);
      style["--gap-vertical"] = toCSSLength(gap[1]);
    } else {
      style["--gap"] = toCSSLength(gap);
    }
  }
  return withNativeProps(props, import_react174.default.createElement("div", {
    className: classPrefix40,
    style
  }, props.children));
};
var GridItem = (p) => {
  const props = mergeProps({
    span: 1
  }, p);
  const itemStyle = {
    "--item-span": props.span
  };
  return withNativeProps(props, import_react174.default.createElement("div", {
    className: `${classPrefix40}-item`,
    style: itemStyle,
    onClick: props.onClick
  }, props.children));
};

// node_modules/antd-mobile/es/components/grid/index.js
var grid_default = attachPropertiesToComponent(Grid, {
  Item: GridItem
});

// node_modules/antd-mobile/es/components/image-uploader/image-uploader.js
var import_react183 = __toESM(require_react());

// node_modules/antd-mobile/es/components/image-viewer/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/image-viewer/image-viewer.css";

// node_modules/antd-mobile/es/components/image-viewer/image-viewer.js
var import_react179 = __toESM(require_react());

// node_modules/antd-mobile/es/components/image-viewer/slide.js
var import_react176 = __toESM(require_react());

// node_modules/antd-mobile/es/utils/use-drag-and-pinch.js
var useDragAndPinch = createUseGesture([dragAction, pinchAction]);

// node_modules/antd-mobile/es/utils/matrix.js
var create = () => {
  return [1, 0, 0, 1, 0, 0];
};
var getTranslateX = (m) => {
  return m[4];
};
var getTranslateY = (m) => {
  return m[5];
};
var getScaleX = (m) => {
  return m[0];
};
var translate = (m, x, y) => {
  return multiply([1, 0, 0, 1, x, y], m);
};
var scale = (m, scaleX, scaleY = scaleX) => {
  return multiply([scaleX, 0, 0, scaleY, 0, 0], m);
};
var apply = (m, [ox, oy]) => {
  return [m[0] * ox + m[2] * oy + m[4], m[1] * ox + m[3] * oy + m[5]];
};
var multiply = (m1, m2) => {
  return [m1[0] * m2[0] + m1[2] * m2[1], m1[1] * m2[0] + m1[3] * m2[1], m1[0] * m2[2] + m1[2] * m2[3], m1[1] * m2[2] + m1[3] * m2[3], m1[0] * m2[4] + m1[2] * m2[5] + m1[4], m1[1] * m2[4] + m1[3] * m2[5] + m1[5]];
};

// node_modules/antd-mobile/es/components/image-viewer/slide.js
var classPrefix41 = `adm-image-viewer`;
var Slide = (props) => {
  const {
    dragLockRef
  } = props;
  const controlRef = (0, import_react176.useRef)(null);
  const imgRef = (0, import_react176.useRef)(null);
  const [{
    matrix
  }, api] = useSpring(() => ({
    matrix: create(),
    config: {
      tension: 200
    }
  }));
  const controlSize = useSize_default(controlRef);
  const imgSize = useSize_default(imgRef);
  const pinchLockRef = (0, import_react176.useRef)(false);
  const boundMatrix = (nextMatrix, type, last = false) => {
    if (!controlSize || !imgSize)
      return nextMatrix;
    const controlLeft = -controlSize.width / 2;
    const controlTop = -controlSize.height / 2;
    const imgLeft = -imgSize.width / 2;
    const imgTop = -imgSize.height / 2;
    const zoom = getScaleX(nextMatrix);
    const scaledImgWidth = zoom * imgSize.width;
    const scaledImgHeight = zoom * imgSize.height;
    const [x, y] = apply(nextMatrix, [imgLeft, imgTop]);
    if (type === "translate") {
      let boundedX = x;
      let boundedY = y;
      if (scaledImgWidth > controlSize.width) {
        const minX = controlLeft - (scaledImgWidth - controlSize.width);
        const maxX = controlLeft;
        boundedX = last ? bound(x, minX, maxX) : rubberbandIfOutOfBounds2(x, minX, maxX, zoom * 50);
      } else {
        boundedX = -scaledImgWidth / 2;
      }
      if (scaledImgHeight > controlSize.height) {
        const minY = controlTop - (scaledImgHeight - controlSize.height);
        const maxY = controlTop;
        boundedY = last ? bound(y, minY, maxY) : rubberbandIfOutOfBounds2(y, minY, maxY, zoom * 50);
      } else {
        boundedY = -scaledImgHeight / 2;
      }
      return translate(nextMatrix, boundedX - x, boundedY - y);
    }
    if (type === "scale" && last) {
      const [boundedX, boundedY] = [scaledImgWidth > controlSize.width ? bound(x, controlLeft - (scaledImgWidth - controlSize.width), controlLeft) : -scaledImgWidth / 2, scaledImgHeight > controlSize.height ? bound(y, controlTop - (scaledImgHeight - controlSize.height), controlTop) : -scaledImgHeight / 2];
      return translate(nextMatrix, boundedX - x, boundedY - y);
    }
    return nextMatrix;
  };
  useDragAndPinch({
    onDrag: (state) => {
      if (state.first)
        return;
      if (state.pinching)
        return state.cancel();
      if (state.tap && state.elapsedTime > 0 && state.elapsedTime < 1e3) {
        props.onTap();
        return;
      }
      const currentZoom = getScaleX(matrix.get());
      if (dragLockRef) {
        dragLockRef.current = currentZoom !== 1;
      }
      if (!pinchLockRef.current && currentZoom <= 1) {
        api.start({
          matrix: create()
        });
      } else {
        const currentMatrix = matrix.get();
        const offset2 = [state.offset[0] - getTranslateX(currentMatrix), state.offset[1] - getTranslateY(currentMatrix)];
        const nextMatrix = translate(currentMatrix, ...state.last ? [offset2[0] + state.velocity[0] * state.direction[0] * 200, offset2[1] + state.velocity[1] * state.direction[1] * 200] : offset2);
        api.start({
          matrix: boundMatrix(nextMatrix, "translate", state.last),
          immediate: !state.last
        });
      }
    },
    onPinch: (state) => {
      var _a;
      pinchLockRef.current = !state.last;
      const [d] = state.offset;
      if (d < 0)
        return;
      const nextZoom = state.last ? bound(d, 1, props.maxZoom) : d;
      (_a = props.onZoomChange) === null || _a === void 0 ? void 0 : _a.call(props, nextZoom);
      if (state.last && nextZoom <= 1) {
        api.start({
          matrix: create()
        });
        if (dragLockRef) {
          dragLockRef.current = false;
        }
      } else {
        if (!controlSize)
          return;
        const currentMatrix = matrix.get();
        const currentZoom = getScaleX(currentMatrix);
        const originOffsetX = state.origin[0] - controlSize.width / 2;
        const originOffsetY = state.origin[1] - controlSize.height / 2;
        let nextMatrix = translate(currentMatrix, -originOffsetX, -originOffsetY);
        nextMatrix = scale(nextMatrix, nextZoom / currentZoom);
        nextMatrix = translate(nextMatrix, originOffsetX, originOffsetY);
        api.start({
          matrix: boundMatrix(nextMatrix, "scale", state.last),
          immediate: !state.last
        });
        if (dragLockRef) {
          dragLockRef.current = true;
        }
      }
    }
  }, {
    target: controlRef,
    drag: {
      from: () => [getTranslateX(matrix.get()), getTranslateY(matrix.get())],
      pointer: {
        touch: true
      }
    },
    pinch: {
      from: () => [getScaleX(matrix.get()), 0],
      pointer: {
        touch: true
      }
    }
  });
  return import_react176.default.createElement("div", {
    className: `${classPrefix41}-slide`,
    onPointerMove: (e) => {
      if (getScaleX(matrix.get()) !== 1) {
        e.stopPropagation();
      }
    }
  }, import_react176.default.createElement("div", {
    className: `${classPrefix41}-control`,
    ref: controlRef
  }, import_react176.default.createElement(animated.div, {
    className: `${classPrefix41}-image-wrapper`,
    style: {
      matrix
    }
  }, import_react176.default.createElement("img", {
    ref: imgRef,
    src: props.image,
    draggable: false,
    alt: props.image
  }))));
};

// node_modules/antd-mobile/es/components/image-viewer/slides.js
var import_react177 = __toESM(require_react());
var classPrefix42 = `adm-image-viewer`;
var Slides = (0, import_react177.forwardRef)((props, ref) => {
  const slideWidth = window.innerWidth + convertPx(16);
  const [{
    x
  }, api] = useSpring(() => ({
    x: props.defaultIndex * slideWidth,
    config: {
      tension: 250,
      clamp: true
    }
  }));
  const count = props.images.length;
  function swipeTo(index, immediate = false) {
    var _a;
    const i = bound(index, 0, count - 1);
    (_a = props.onIndexChange) === null || _a === void 0 ? void 0 : _a.call(props, i);
    api.start({
      x: i * slideWidth,
      immediate
    });
  }
  (0, import_react177.useImperativeHandle)(ref, () => ({
    swipeTo
  }));
  const dragLockRef = (0, import_react177.useRef)(false);
  const bind = useDrag((state) => {
    if (dragLockRef.current)
      return;
    const [offsetX] = state.offset;
    if (state.last) {
      const minIndex = Math.floor(offsetX / slideWidth);
      const maxIndex = minIndex + 1;
      const velocityOffset = Math.min(state.velocity[0] * 2e3, slideWidth) * state.direction[0];
      swipeTo(bound(Math.round((offsetX + velocityOffset) / slideWidth), minIndex, maxIndex));
    } else {
      api.start({
        x: offsetX,
        immediate: true
      });
    }
  }, {
    transform: ([x2, y]) => [-x2, y],
    from: () => [x.get(), 0],
    bounds: () => {
      return {
        left: 0,
        right: (count - 1) * slideWidth
      };
    },
    rubberband: true,
    axis: "x",
    pointer: {
      touch: true
    }
  });
  return import_react177.default.createElement("div", Object.assign({
    className: `${classPrefix42}-slides`
  }, bind()), import_react177.default.createElement(animated.div, {
    className: `${classPrefix42}-indicator`
  }, x.to((v) => {
    const index = bound(Math.round(v / slideWidth), 0, count - 1);
    return `${index + 1} / ${count}`;
  })), import_react177.default.createElement(animated.div, {
    className: `${classPrefix42}-slides-inner`,
    style: {
      x: x.to((x2) => -x2)
    }
  }, props.images.map((image) => import_react177.default.createElement(Slide, {
    key: image,
    image,
    onTap: props.onTap,
    maxZoom: props.maxZoom,
    onZoomChange: (zoom) => {
      if (zoom !== 1) {
        const index = Math.round(x.get() / slideWidth);
        api.start({
          x: index * slideWidth
        });
      }
    },
    dragLockRef
  }))));
});

// node_modules/antd-mobile/es/components/image-viewer/image-viewer.js
var classPrefix43 = `adm-image-viewer`;
var defaultProps32 = {
  maxZoom: 3,
  getContainer: null,
  visible: false
};
var ImageViewer = (p) => {
  var _a;
  const props = mergeProps(defaultProps32, p);
  const node = import_react179.default.createElement(mask_default, {
    visible: props.visible,
    disableBodyScroll: false,
    opacity: "thick",
    afterClose: props.afterClose,
    destroyOnClose: true
  }, import_react179.default.createElement("div", {
    className: `${classPrefix43}-content`
  }, props.image && import_react179.default.createElement(Slide, {
    image: props.image,
    onTap: () => {
      var _a2;
      (_a2 = props.onClose) === null || _a2 === void 0 ? void 0 : _a2.call(props);
    },
    maxZoom: props.maxZoom
  })), props.image && import_react179.default.createElement("div", {
    className: `${classPrefix43}-footer`
  }, (_a = props.renderFooter) === null || _a === void 0 ? void 0 : _a.call(props, props.image), import_react179.default.createElement(safe_area_default, {
    position: "bottom"
  })));
  return renderToContainer(props.getContainer, node);
};
var multiDefaultProps = Object.assign(Object.assign({}, defaultProps32), {
  defaultIndex: 0
});
var MultiImageViewer = (0, import_react179.forwardRef)((p, ref) => {
  var _a;
  const props = mergeProps(multiDefaultProps, p);
  const [index, setIndex] = (0, import_react179.useState)(props.defaultIndex);
  const slidesRef = (0, import_react179.useRef)(null);
  (0, import_react179.useImperativeHandle)(ref, () => ({
    swipeTo: (index2, immediate) => {
      var _a2;
      setIndex(index2);
      (_a2 = slidesRef.current) === null || _a2 === void 0 ? void 0 : _a2.swipeTo(index2, immediate);
    }
  }));
  const onSlideChange = (0, import_react179.useCallback)((index2) => {
    var _a2;
    setIndex(index2);
    (_a2 = props.onIndexChange) === null || _a2 === void 0 ? void 0 : _a2.call(props, index2);
  }, [props.onIndexChange]);
  const node = import_react179.default.createElement(mask_default, {
    visible: props.visible,
    disableBodyScroll: false,
    opacity: "thick",
    afterClose: props.afterClose,
    destroyOnClose: true
  }, import_react179.default.createElement("div", {
    className: `${classPrefix43}-content`
  }, props.images && import_react179.default.createElement(Slides, {
    ref: slidesRef,
    defaultIndex: index,
    onIndexChange: onSlideChange,
    images: props.images,
    onTap: () => {
      var _a2;
      (_a2 = props.onClose) === null || _a2 === void 0 ? void 0 : _a2.call(props);
    },
    maxZoom: props.maxZoom
  })), props.images && import_react179.default.createElement("div", {
    className: `${classPrefix43}-footer`
  }, (_a = props.renderFooter) === null || _a === void 0 ? void 0 : _a.call(props, props.images[index], index), import_react179.default.createElement(safe_area_default, {
    position: "bottom"
  })));
  return renderToContainer(props.getContainer, node);
});

// node_modules/antd-mobile/es/components/image-viewer/methods.js
var import_react180 = __toESM(require_react());
var handlerSet = /* @__PURE__ */ new Set();
function showImageViewer(props) {
  clearImageViewer();
  const handler = renderImperatively(import_react180.default.createElement(ImageViewer, Object.assign({}, props, {
    afterClose: () => {
      var _a;
      handlerSet.delete(handler);
      (_a = props.afterClose) === null || _a === void 0 ? void 0 : _a.call(props);
    }
  })));
  handlerSet.add(handler);
  return handler;
}
function showMultiImageViewer(props) {
  clearImageViewer();
  const handler = renderImperatively(import_react180.default.createElement(MultiImageViewer, Object.assign({}, props, {
    afterClose: () => {
      var _a;
      handlerSet.delete(handler);
      (_a = props.afterClose) === null || _a === void 0 ? void 0 : _a.call(props);
    }
  })));
  handlerSet.add(handler);
  return handler;
}
function clearImageViewer() {
  handlerSet.forEach((handler) => {
    handler.close();
  });
  handlerSet.clear();
}

// node_modules/antd-mobile/es/components/image-viewer/index.js
var Multi = attachPropertiesToComponent(MultiImageViewer, {
  show: showMultiImageViewer
});
var image_viewer_default = attachPropertiesToComponent(ImageViewer, {
  Multi,
  show: showImageViewer,
  clear: clearImageViewer
});

// node_modules/antd-mobile/es/components/image-uploader/preview-item.js
var import_react181 = __toESM(require_react());
var import_classnames33 = __toESM(require_classnames());
var classPrefix44 = `adm-image-uploader`;
var PreviewItem = (props) => {
  const {
    locale
  } = useConfig();
  const {
    url,
    file,
    deletable,
    onDelete,
    imageFit
  } = props;
  const src = (0, import_react181.useMemo)(() => {
    if (url) {
      return url;
    }
    if (file) {
      return URL.createObjectURL(file);
    }
    return "";
  }, [url, file]);
  function renderLoading() {
    return props.status === "pending" && import_react181.default.createElement("div", {
      className: `${classPrefix44}-cell-mask`
    }, import_react181.default.createElement("span", {
      className: `${classPrefix44}-cell-loading`
    }, import_react181.default.createElement(spin_loading_default, {
      color: "white"
    }), import_react181.default.createElement("span", {
      className: `${classPrefix44}-cell-mask-message`
    }, locale.ImageUploader.uploading)));
  }
  function renderDelete() {
    return deletable && import_react181.default.createElement("span", {
      className: `${classPrefix44}-cell-delete`,
      onClick: onDelete
    }, import_react181.default.createElement(CloseOutline_default, {
      className: `${classPrefix44}-cell-delete-icon`
    }));
  }
  return import_react181.default.createElement("div", {
    className: (0, import_classnames33.default)(`${classPrefix44}-cell`, props.status === "fail" && `${classPrefix44}-cell-fail`)
  }, import_react181.default.createElement(image_default, {
    className: `${classPrefix44}-cell-image`,
    src,
    fit: imageFit,
    onClick: props.onClick
  }), renderLoading(), renderDelete());
};
var preview_item_default = PreviewItem;

// node_modules/antd-mobile/es/components/space/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/space/space.css";

// node_modules/antd-mobile/es/components/space/space.js
var import_react182 = __toESM(require_react());
var import_classnames34 = __toESM(require_classnames());
var classPrefix45 = `adm-space`;
var defaultProps33 = {
  direction: "horizontal"
};
var Space = (p) => {
  const props = mergeProps(defaultProps33, p);
  const {
    direction,
    onClick
  } = props;
  return withNativeProps(props, import_react182.default.createElement("div", {
    className: (0, import_classnames34.default)(classPrefix45, {
      [`${classPrefix45}-wrap`]: props.wrap,
      [`${classPrefix45}-block`]: props.block,
      [`${classPrefix45}-${direction}`]: true,
      [`${classPrefix45}-align-${props.align}`]: !!props.align,
      [`${classPrefix45}-justify-${props.justify}`]: !!props.justify
    }),
    onClick
  }, import_react182.default.Children.map(props.children, (child) => {
    return child !== null && child !== void 0 && import_react182.default.createElement("div", {
      className: `${classPrefix45}-item`
    }, child);
  })));
};

// node_modules/antd-mobile/es/components/space/index.js
var space_default = Space;

// node_modules/antd-mobile/es/components/image-uploader/image-uploader.js
var classPrefix46 = `adm-image-uploader`;
var defaultProps34 = {
  disableUpload: false,
  deletable: true,
  showUpload: true,
  multiple: false,
  maxCount: 0,
  defaultValue: [],
  accept: "image/*",
  preview: true,
  showFailed: true,
  imageFit: "cover"
};
var ImageUploader = (p) => {
  const {
    locale
  } = useConfig();
  const props = mergeProps(defaultProps34, p);
  const [value, setValue] = usePropsValue(props);
  const [tasks, setTasks] = (0, import_react183.useState)([]);
  useIsomorphicLayoutEffect_default(() => {
    setTasks((prev) => prev.filter((task) => {
      if (task.url === void 0)
        return true;
      return !value.some((fileItem) => fileItem.url === task.url);
    }));
  }, [value]);
  const idCountRef = (0, import_react183.useRef)(0);
  const {
    maxCount,
    onPreview
  } = props;
  function processFile(file, fileList) {
    return __awaiter(this, void 0, void 0, function* () {
      const {
        beforeUpload
      } = props;
      let transformedFile = file;
      transformedFile = yield beforeUpload === null || beforeUpload === void 0 ? void 0 : beforeUpload(file, fileList);
      return transformedFile;
    });
  }
  function onChange(e) {
    var _a;
    return __awaiter(this, void 0, void 0, function* () {
      e.persist();
      const {
        files: rawFiles
      } = e.target;
      if (!rawFiles)
        return;
      let files = [].slice.call(rawFiles);
      e.target.value = "";
      if (props.beforeUpload) {
        const postFiles = files.map((file) => {
          return processFile(file, files);
        });
        yield Promise.all(postFiles).then((filesList) => {
          files = filesList.filter(Boolean);
        });
      }
      if (files.length === 0) {
        return;
      }
      if (maxCount > 0) {
        const exceed = value.length + files.length - maxCount;
        if (exceed > 0) {
          files = files.slice(0, files.length - exceed);
          (_a = props.onCountExceed) === null || _a === void 0 ? void 0 : _a.call(props, exceed);
        }
      }
      const newTasks = files.map((file) => ({
        id: idCountRef.current++,
        status: "pending",
        file
      }));
      setTasks((prev) => [...prev, ...newTasks]);
      yield Promise.all(newTasks.map((currentTask) => __awaiter(this, void 0, void 0, function* () {
        try {
          const result = yield props.upload(currentTask.file);
          setTasks((prev) => {
            return prev.map((task) => {
              if (task.id === currentTask.id) {
                return Object.assign(Object.assign({}, task), {
                  url: result.url
                });
              }
              return task;
            });
          });
          setValue((prev) => {
            const newVal = Object.assign({}, result);
            return [...prev, newVal];
          });
        } catch (e2) {
          setTasks((prev) => {
            return prev.map((task) => {
              if (task.id === currentTask.id) {
                return Object.assign(Object.assign({}, task), {
                  status: "fail"
                });
              }
              return task;
            });
          });
          throw e2;
        }
      }))).catch((error) => console.error(error));
    });
  }
  const imageViewerHandlerRef = (0, import_react183.useRef)(null);
  function previewImage(index) {
    imageViewerHandlerRef.current = image_viewer_default.Multi.show({
      images: value.map((fileItem) => fileItem.url),
      defaultIndex: index,
      onClose: () => {
        imageViewerHandlerRef.current = null;
      }
    });
  }
  useUnmount_default(() => {
    var _a;
    (_a = imageViewerHandlerRef.current) === null || _a === void 0 ? void 0 : _a.close();
  });
  const showUpload = props.showUpload && (maxCount === 0 || value.length + tasks.length < maxCount);
  return withNativeProps(props, import_react183.default.createElement("div", {
    className: classPrefix46
  }, import_react183.default.createElement(space_default, {
    className: `${classPrefix46}-space`,
    wrap: true,
    block: true
  }, value.map((fileItem, index) => {
    var _a, _b;
    return import_react183.default.createElement(preview_item_default, {
      key: (_a = fileItem.key) !== null && _a !== void 0 ? _a : index,
      url: (_b = fileItem.thumbnailUrl) !== null && _b !== void 0 ? _b : fileItem.url,
      deletable: props.deletable,
      imageFit: props.imageFit,
      onClick: () => {
        if (props.preview) {
          previewImage(index);
        }
        onPreview && onPreview(index, fileItem);
      },
      onDelete: () => __awaiter(void 0, void 0, void 0, function* () {
        var _c;
        const canDelete = yield (_c = props.onDelete) === null || _c === void 0 ? void 0 : _c.call(props, fileItem);
        if (canDelete === false)
          return;
        setValue(value.filter((x, i) => i !== index));
      })
    });
  }), tasks.map((task) => {
    if (!props.showFailed && task.status === "fail") {
      return null;
    }
    return import_react183.default.createElement(preview_item_default, {
      key: task.id,
      file: task.file,
      deletable: task.status !== "pending",
      status: task.status,
      imageFit: props.imageFit,
      onDelete: () => {
        setTasks(tasks.filter((x) => x.id !== task.id));
      }
    });
  }), showUpload && import_react183.default.createElement("div", {
    className: `${classPrefix46}-upload-button-wrap`
  }, props.children ? props.children : import_react183.default.createElement("span", {
    className: `${classPrefix46}-cell ${classPrefix46}-upload-button`,
    role: "button",
    "aria-label": locale.ImageUploader.upload
  }, import_react183.default.createElement("span", {
    className: `${classPrefix46}-upload-button-icon`
  }, import_react183.default.createElement(AddOutline_default, null))), !props.disableUpload && import_react183.default.createElement("input", {
    capture: props.capture,
    accept: props.accept,
    multiple: props.multiple,
    type: "file",
    className: `${classPrefix46}-input`,
    onChange,
    "aria-hidden": true
  })))));
};

// node_modules/antd-mobile/es/components/image-uploader/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/image-uploader/image-uploader.css";
var image_uploader_default = ImageUploader;

// node_modules/antd-mobile/es/components/index-bar/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/index-bar/index-bar.css";

// node_modules/antd-mobile/es/components/index-bar/panel.js
var Panel = () => null;

// node_modules/antd-mobile/es/components/index-bar/index-bar.js
var import_react185 = __toESM(require_react());
var import_classnames36 = __toESM(require_classnames());

// node_modules/antd-mobile/es/components/index-bar/sidebar.js
var import_react184 = __toESM(require_react());
var import_classnames35 = __toESM(require_classnames());
var classPrefix47 = `adm-index-bar`;
var Sidebar = (props) => {
  const [interacting, setInteracting] = (0, import_react184.useState)(false);
  return import_react184.default.createElement("div", {
    className: (0, import_classnames35.default)(`${classPrefix47}-sidebar`, {
      [`${classPrefix47}-sidebar-interacting`]: interacting
    }),
    onMouseDown: () => {
      setInteracting(true);
    },
    onMouseUp: () => {
      setInteracting(false);
    },
    onTouchStart: () => {
      setInteracting(true);
    },
    onTouchEnd: () => {
      setInteracting(false);
    },
    onTouchMove: (e) => {
      if (!interacting)
        return;
      const {
        clientX,
        clientY
      } = e.touches[0];
      const target = document.elementFromPoint(clientX, clientY);
      if (!target)
        return;
      const index = target.dataset["index"];
      if (index) {
        props.onActive(index);
      }
    }
  }, props.indexItems.map(({
    index,
    brief
  }) => {
    const active = index === props.activeIndex;
    return import_react184.default.createElement("div", {
      className: `${classPrefix47}-sidebar-row`,
      onMouseDown: () => {
        props.onActive(index);
      },
      onTouchStart: () => {
        props.onActive(index);
      },
      onMouseEnter: () => {
        if (interacting) {
          props.onActive(index);
        }
      },
      "data-index": index,
      key: index
    }, interacting && active && import_react184.default.createElement("div", {
      className: `${classPrefix47}-sidebar-bubble`
    }, brief), import_react184.default.createElement("div", {
      className: (0, import_classnames35.default)(`${classPrefix47}-sidebar-item`, {
        [`${classPrefix47}-sidebar-item-active`]: active
      }),
      "data-index": index
    }, import_react184.default.createElement("div", null, brief)));
  }));
};

// node_modules/antd-mobile/es/components/index-bar/index-bar.js
var classPrefix48 = `adm-index-bar`;
var defaultProps35 = {
  sticky: true
};
var IndexBar = (0, import_react185.forwardRef)((p, ref) => {
  const props = mergeProps(defaultProps35, p);
  const titleHeight = convertPx(35);
  const bodyRef = (0, import_react185.useRef)(null);
  const indexItems = [];
  const panels = [];
  traverseReactNode(props.children, (child) => {
    var _a;
    if (!import_react185.default.isValidElement(child))
      return;
    if (child.type !== Panel) {
      devWarning("IndexBar", "The children of `IndexBar` must be `IndexBar.Panel` components.");
      return;
    }
    indexItems.push({
      index: child.props.index,
      brief: (_a = child.props.brief) !== null && _a !== void 0 ? _a : child.props.index.charAt(0)
    });
    panels.push(withNativeProps(child.props, import_react185.default.createElement("div", {
      key: child.props.index,
      "data-index": child.props.index,
      className: `${classPrefix48}-anchor`
    }, import_react185.default.createElement("div", {
      className: `${classPrefix48}-anchor-title`
    }, child.props.title || child.props.index), child.props.children)));
  });
  const [activeIndex, setActiveIndex] = (0, import_react185.useState)(() => {
    const firstItem = indexItems[0];
    return firstItem ? firstItem.index : null;
  });
  (0, import_react185.useImperativeHandle)(ref, () => ({
    scrollTo
  }));
  function scrollTo(index) {
    var _a;
    const body = bodyRef.current;
    if (!body)
      return;
    const children = body.children;
    for (let i = 0; i < children.length; i++) {
      const panel = children.item(i);
      if (!panel)
        continue;
      const panelIndex = panel.dataset["index"];
      if (panelIndex === index) {
        body.scrollTop = panel.offsetTop;
        setActiveIndex(index);
        activeIndex !== index && ((_a = props.onIndexChange) === null || _a === void 0 ? void 0 : _a.call(props, index));
        return;
      }
    }
  }
  const {
    run: checkActiveIndex
  } = useThrottleFn_default(() => {
    var _a;
    const body = bodyRef.current;
    if (!body)
      return;
    const scrollTop = body.scrollTop;
    const elements = body.getElementsByClassName(`${classPrefix48}-anchor`);
    for (let i = 0; i < elements.length; i++) {
      const panel = elements.item(i);
      if (!panel)
        continue;
      const panelIndex = panel.dataset["index"];
      if (!panelIndex)
        continue;
      if (panel.offsetTop + panel.clientHeight - titleHeight > scrollTop) {
        setActiveIndex(panelIndex);
        activeIndex !== panelIndex && ((_a = props.onIndexChange) === null || _a === void 0 ? void 0 : _a.call(props, panelIndex));
        return;
      }
    }
  }, {
    wait: 50,
    trailing: true,
    leading: true
  });
  return withNativeProps(props, import_react185.default.createElement("div", {
    className: (0, import_classnames36.default)(`${classPrefix48}`, {
      [`${classPrefix48}-sticky`]: props.sticky
    })
  }, import_react185.default.createElement(Sidebar, {
    indexItems,
    activeIndex,
    onActive: (index) => {
      scrollTo(index);
    }
  }), import_react185.default.createElement("div", {
    className: `${classPrefix48}-body`,
    ref: bodyRef,
    onScroll: checkActiveIndex
  }, panels)));
});

// node_modules/antd-mobile/es/components/index-bar/index.js
var index_bar_default = attachPropertiesToComponent(IndexBar, {
  Panel
});

// node_modules/antd-mobile/es/components/infinite-scroll/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/infinite-scroll/infinite-scroll.css";

// node_modules/antd-mobile/es/components/infinite-scroll/infinite-scroll.js
var import_react186 = __toESM(require_react());
function isWindow2(element) {
  return element === window;
}
var classPrefix49 = `adm-infinite-scroll`;
var defaultProps36 = {
  threshold: 250,
  children: (hasMore, failed, retry) => import_react186.default.createElement(InfiniteScrollContent, {
    hasMore,
    failed,
    retry
  })
};
var InfiniteScroll = (p) => {
  const props = mergeProps(defaultProps36, p);
  const [failed, setFailed] = (0, import_react186.useState)(false);
  const doLoadMore = useLockFn_default((isRetry) => __awaiter(void 0, void 0, void 0, function* () {
    try {
      yield props.loadMore(isRetry);
    } catch (e) {
      setFailed(true);
      throw e;
    }
  }));
  const elementRef = (0, import_react186.useRef)(null);
  const [flag, setFlag] = (0, import_react186.useState)({});
  const nextFlagRef = (0, import_react186.useRef)(flag);
  const [scrollParent, setScrollParent] = (0, import_react186.useState)();
  const {
    run: check
  } = useThrottleFn_default(() => __awaiter(void 0, void 0, void 0, function* () {
    if (nextFlagRef.current !== flag)
      return;
    if (!props.hasMore)
      return;
    const element = elementRef.current;
    if (!element)
      return;
    if (!element.offsetParent)
      return;
    const parent = getScrollParent(element);
    setScrollParent(parent);
    if (!parent)
      return;
    const rect = element.getBoundingClientRect();
    const elementTop = rect.top;
    const current = isWindow2(parent) ? window.innerHeight : parent.getBoundingClientRect().bottom;
    if (current >= elementTop - props.threshold) {
      const nextFlag = {};
      nextFlagRef.current = nextFlag;
      yield doLoadMore(false);
      setFlag(nextFlag);
    }
  }), {
    wait: 100,
    leading: true,
    trailing: true
  });
  (0, import_react186.useEffect)(() => {
    check();
  });
  (0, import_react186.useEffect)(() => {
    const element = elementRef.current;
    if (!element)
      return;
    if (!scrollParent)
      return;
    function onScroll() {
      check();
    }
    scrollParent.addEventListener("scroll", onScroll);
    return () => {
      scrollParent.removeEventListener("scroll", onScroll);
    };
  }, [scrollParent]);
  function retry() {
    return __awaiter(this, void 0, void 0, function* () {
      setFailed(false);
      yield doLoadMore(true);
      setFlag(nextFlagRef.current);
    });
  }
  return withNativeProps(props, import_react186.default.createElement("div", {
    className: classPrefix49,
    ref: elementRef
  }, typeof props.children === "function" ? props.children(props.hasMore, failed, retry) : props.children));
};
var InfiniteScrollContent = (props) => {
  const {
    locale
  } = useConfig();
  if (!props.hasMore) {
    return import_react186.default.createElement("span", null, locale.InfiniteScroll.noMore);
  }
  if (props.failed) {
    return import_react186.default.createElement("span", null, import_react186.default.createElement("span", {
      className: `${classPrefix49}-failed-text`
    }, locale.InfiniteScroll.failedToLoad), import_react186.default.createElement("a", {
      onClick: () => {
        props.retry();
      }
    }, locale.InfiniteScroll.retry));
  }
  return import_react186.default.createElement(import_react186.default.Fragment, null, import_react186.default.createElement("span", null, locale.common.loading), import_react186.default.createElement(dot_loading_default, null));
};

// node_modules/antd-mobile/es/components/infinite-scroll/index.js
var infinite_scroll_default = InfiniteScroll;

// node_modules/antd-mobile/es/components/input/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/input/input.css";

// node_modules/antd-mobile/es/components/input/input.js
var import_react187 = __toESM(require_react());
var import_classnames37 = __toESM(require_classnames());
var classPrefix50 = `adm-input`;
var defaultProps37 = {
  defaultValue: "",
  onlyShowClearWhenFocus: true
};
var Input = (0, import_react187.forwardRef)((p, ref) => {
  const props = mergeProps(defaultProps37, p);
  const [value, setValue] = usePropsValue(props);
  const [hasFocus, setHasFocus] = (0, import_react187.useState)(false);
  const compositionStartRef = (0, import_react187.useRef)(false);
  const nativeInputRef = (0, import_react187.useRef)(null);
  const {
    locale
  } = useConfig();
  (0, import_react187.useImperativeHandle)(ref, () => ({
    clear: () => {
      setValue("");
    },
    focus: () => {
      var _a;
      (_a = nativeInputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    },
    blur: () => {
      var _a;
      (_a = nativeInputRef.current) === null || _a === void 0 ? void 0 : _a.blur();
    },
    get nativeElement() {
      return nativeInputRef.current;
    }
  }));
  const handleKeydown = (e) => {
    var _a;
    if (props.onEnterPress && (e.code === "Enter" || e.keyCode === 13)) {
      props.onEnterPress(e);
    }
    (_a = props.onKeyDown) === null || _a === void 0 ? void 0 : _a.call(props, e);
  };
  useIsomorphicLayoutEffect_default(() => {
    var _a;
    if (!props.enterKeyHint)
      return;
    (_a = nativeInputRef.current) === null || _a === void 0 ? void 0 : _a.setAttribute("enterkeyhint", props.enterKeyHint);
    return () => {
      var _a2;
      (_a2 = nativeInputRef.current) === null || _a2 === void 0 ? void 0 : _a2.removeAttribute("enterkeyhint");
    };
  }, [props.enterKeyHint]);
  function checkValue() {
    let nextValue = value;
    if (props.type === "number") {
      nextValue = nextValue && bound(parseFloat(nextValue), props.min, props.max).toString();
    }
    if (nextValue !== value) {
      setValue(nextValue);
    }
  }
  const shouldShowClear = (() => {
    if (!props.clearable || !value || props.readOnly)
      return false;
    if (props.onlyShowClearWhenFocus) {
      return hasFocus;
    } else {
      return true;
    }
  })();
  return withNativeProps(props, import_react187.default.createElement("div", {
    className: (0, import_classnames37.default)(`${classPrefix50}`, props.disabled && `${classPrefix50}-disabled`)
  }, import_react187.default.createElement("input", {
    ref: nativeInputRef,
    className: `${classPrefix50}-element`,
    value,
    onChange: (e) => {
      setValue(e.target.value);
    },
    onFocus: (e) => {
      var _a;
      setHasFocus(true);
      (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, e);
    },
    onBlur: (e) => {
      var _a;
      setHasFocus(false);
      checkValue();
      (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props, e);
    },
    id: props.id,
    placeholder: props.placeholder,
    disabled: props.disabled,
    readOnly: props.readOnly,
    maxLength: props.maxLength,
    minLength: props.minLength,
    max: props.max,
    min: props.min,
    autoComplete: props.autoComplete,
    autoFocus: props.autoFocus,
    pattern: props.pattern,
    inputMode: props.inputMode,
    type: props.type,
    name: props.name,
    autoCapitalize: props.autoCapitalize,
    autoCorrect: props.autoCorrect,
    onKeyDown: handleKeydown,
    onKeyUp: props.onKeyUp,
    onCompositionStart: (e) => {
      var _a;
      compositionStartRef.current = true;
      (_a = props.onCompositionStart) === null || _a === void 0 ? void 0 : _a.call(props, e);
    },
    onCompositionEnd: (e) => {
      var _a;
      compositionStartRef.current = false;
      (_a = props.onCompositionEnd) === null || _a === void 0 ? void 0 : _a.call(props, e);
    },
    onClick: props.onClick,
    role: props.role,
    "aria-valuenow": props["aria-valuenow"],
    "aria-valuemax": props["aria-valuemax"],
    "aria-valuemin": props["aria-valuemin"],
    "aria-label": props["aria-label"]
  }), shouldShowClear && import_react187.default.createElement("div", {
    className: `${classPrefix50}-clear`,
    onMouseDown: (e) => {
      e.preventDefault();
    },
    onClick: () => {
      var _a, _b;
      setValue("");
      (_a = props.onClear) === null || _a === void 0 ? void 0 : _a.call(props);
      if (isIOS() && compositionStartRef.current) {
        compositionStartRef.current = false;
        (_b = nativeInputRef.current) === null || _b === void 0 ? void 0 : _b.blur();
      }
    },
    "aria-label": locale.Input.clear
  }, import_react187.default.createElement(CloseCircleFill_default, null))));
});

// node_modules/antd-mobile/es/components/input/index.js
var input_default = Input;

// node_modules/antd-mobile/es/components/jumbo-tabs/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/jumbo-tabs/jumbo-tabs.css";

// node_modules/antd-mobile/es/components/jumbo-tabs/jumbo-tabs.js
var import_react188 = __toESM(require_react());
var import_classnames38 = __toESM(require_classnames());
var classPrefix51 = `adm-jumbo-tabs`;
var JumboTab = () => {
  return null;
};
var JumboTabs = (props) => {
  var _a;
  const tabListContainerRef = (0, import_react188.useRef)(null);
  const rootRef = (0, import_react188.useRef)(null);
  const keyToIndexRecord = {};
  let firstActiveKey = null;
  const panes = [];
  traverseReactNode(props.children, (child, index) => {
    if (!import_react188.default.isValidElement(child))
      return;
    const key = child.key;
    if (typeof key !== "string")
      return;
    if (index === 0) {
      firstActiveKey = key;
    }
    const length = panes.push(child);
    keyToIndexRecord[key] = length - 1;
  });
  const [activeKey, setActiveKey] = usePropsValue({
    value: props.activeKey,
    defaultValue: (_a = props.defaultActiveKey) !== null && _a !== void 0 ? _a : firstActiveKey,
    onChange: (v) => {
      var _a2;
      if (v === null)
        return;
      (_a2 = props.onChange) === null || _a2 === void 0 ? void 0 : _a2.call(props, v);
    }
  });
  const {
    scrollLeft,
    animate
  } = useTabListScroll(tabListContainerRef, keyToIndexRecord[activeKey]);
  useResizeEffect(() => {
    animate(true);
  }, rootRef);
  return withNativeProps(props, import_react188.default.createElement("div", {
    className: classPrefix51,
    ref: rootRef
  }, import_react188.default.createElement("div", {
    className: `${classPrefix51}-header`
  }, import_react188.default.createElement(scroll_mask_default, {
    scrollTrackRef: tabListContainerRef
  }), import_react188.default.createElement(animated.div, {
    className: `${classPrefix51}-tab-list`,
    ref: tabListContainerRef,
    scrollLeft
  }, panes.map((pane) => withNativeProps(pane.props, import_react188.default.createElement("div", {
    key: pane.key,
    className: `${classPrefix51}-tab-wrapper`
  }, import_react188.default.createElement("div", {
    onClick: () => {
      const {
        key
      } = pane;
      if (pane.props.disabled)
        return;
      if (key === void 0 || key === null) {
        return;
      }
      setActiveKey(key.toString());
    },
    className: (0, import_classnames38.default)(`${classPrefix51}-tab`, {
      [`${classPrefix51}-tab-active`]: pane.key === activeKey,
      [`${classPrefix51}-tab-disabled`]: pane.props.disabled
    })
  }, import_react188.default.createElement("div", {
    className: `${classPrefix51}-tab-title`
  }, pane.props.title), import_react188.default.createElement("div", {
    className: `${classPrefix51}-tab-description`
  }, pane.props.description))))))), panes.map((pane) => {
    if (pane.props.children === void 0) {
      return null;
    }
    const active = pane.key === activeKey;
    return import_react188.default.createElement(ShouldRender, {
      key: pane.key,
      active,
      forceRender: pane.props.forceRender,
      destroyOnClose: pane.props.destroyOnClose
    }, import_react188.default.createElement("div", {
      className: `${classPrefix51}-content`,
      style: {
        display: active ? "block" : "none"
      }
    }, pane.props.children));
  })));
};

// node_modules/antd-mobile/es/components/jumbo-tabs/index.js
var jumbo_tabs_default = attachPropertiesToComponent(JumboTabs, {
  Tab: JumboTab
});

// node_modules/antd-mobile/es/components/loading/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/dot-loading/dot-loading.css";
var loading_default = DotLoading;

// node_modules/antd-mobile/es/components/modal/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/modal/modal.css";

// node_modules/antd-mobile/es/components/modal/show.js
var import_react191 = __toESM(require_react());

// node_modules/antd-mobile/es/components/modal/modal.js
var import_react190 = __toESM(require_react());
var import_classnames40 = __toESM(require_classnames());

// node_modules/antd-mobile/es/components/modal/modal-action-button.js
var import_react189 = __toESM(require_react());
var import_classnames39 = __toESM(require_classnames());
var ModalActionButton = (props) => {
  const {
    action
  } = props;
  return withNativeProps(props.action, import_react189.default.createElement(button_default, {
    key: action.key,
    onClick: props.onAction,
    className: (0, import_classnames39.default)("adm-modal-button", {
      "adm-modal-button-primary": props.action.primary
    }),
    fill: props.action.primary ? "solid" : "none",
    size: props.action.primary ? "large" : "middle",
    block: true,
    color: action.danger ? "danger" : "primary",
    loading: "auto",
    disabled: action.disabled
  }, action.text));
};

// node_modules/antd-mobile/es/components/modal/modal.js
var defaultProps38 = {
  actions: [],
  closeOnAction: false,
  closeOnMaskClick: false,
  getContainer: null
};
var Modal = (p) => {
  const props = mergeProps(defaultProps38, p);
  const element = import_react190.default.createElement(import_react190.default.Fragment, null, !!props.image && import_react190.default.createElement("div", {
    className: cls2("image-container")
  }, import_react190.default.createElement(image_default, {
    src: props.image,
    alt: "modal header image",
    width: "100%"
  })), !!props.header && import_react190.default.createElement("div", {
    className: cls2("header")
  }, import_react190.default.createElement(auto_center_default, null, props.header)), !!props.title && import_react190.default.createElement("div", {
    className: cls2("title")
  }, props.title), import_react190.default.createElement("div", {
    className: cls2("content")
  }, typeof props.content === "string" ? import_react190.default.createElement(auto_center_default, null, props.content) : props.content), import_react190.default.createElement(space_default, {
    direction: "vertical",
    block: true,
    className: (0, import_classnames40.default)(cls2("footer"), props.actions.length === 0 && cls2("footer-empty"))
  }, props.actions.map((action, index) => {
    return import_react190.default.createElement(ModalActionButton, {
      key: action.key,
      action,
      onAction: () => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c;
        yield Promise.all([(_a = action.onClick) === null || _a === void 0 ? void 0 : _a.call(action), (_b = props.onAction) === null || _b === void 0 ? void 0 : _b.call(props, action, index)]);
        if (props.closeOnAction) {
          (_c = props.onClose) === null || _c === void 0 ? void 0 : _c.call(props);
        }
      })
    });
  })));
  return import_react190.default.createElement(center_popup_default, {
    className: (0, import_classnames40.default)(cls2(), props.className),
    style: props.style,
    afterClose: props.afterClose,
    afterShow: props.afterShow,
    showCloseButton: props.showCloseButton,
    closeOnMaskClick: props.closeOnMaskClick,
    onClose: props.onClose,
    visible: props.visible,
    getContainer: props.getContainer,
    bodyStyle: props.bodyStyle,
    bodyClassName: (0, import_classnames40.default)(cls2("body"), props.image && cls2("with-image"), props.bodyClassName),
    maskStyle: props.maskStyle,
    maskClassName: props.maskClassName,
    stopPropagation: props.stopPropagation,
    disableBodyScroll: props.disableBodyScroll,
    destroyOnClose: props.destroyOnClose,
    forceRender: props.forceRender
  }, element);
};
function cls2(name = "") {
  return "adm-modal" + (name && "-") + name;
}

// node_modules/antd-mobile/es/components/modal/show.js
var closeFnSet2 = /* @__PURE__ */ new Set();
function show2(props) {
  const handler = renderImperatively(import_react191.default.createElement(Modal, Object.assign({}, props, {
    afterClose: () => {
      var _a;
      closeFnSet2.delete(handler.close);
      (_a = props.afterClose) === null || _a === void 0 ? void 0 : _a.call(props);
    }
  })));
  closeFnSet2.add(handler.close);
  return handler;
}

// node_modules/antd-mobile/es/components/modal/alert.js
function alert2(p) {
  const defaultProps68 = {
    confirmText: getDefaultConfig().locale.Modal.ok
  };
  const props = mergeProps(defaultProps68, p);
  return new Promise((resolve) => {
    show2(Object.assign(Object.assign({}, props), {
      closeOnAction: true,
      actions: [{
        key: "confirm",
        text: props.confirmText,
        primary: true
      }],
      onAction: props.onConfirm,
      onClose: () => {
        var _a;
        (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
        resolve();
      }
    }));
  });
}

// node_modules/antd-mobile/es/components/modal/confirm.js
var defaultProps39 = {
  confirmText: "\u786E\u8BA4",
  cancelText: "\u53D6\u6D88"
};
function confirm2(p) {
  const {
    locale
  } = getDefaultConfig();
  const props = mergeProps(defaultProps39, {
    confirmText: locale.common.confirm,
    cancelText: locale.common.cancel
  }, p);
  return new Promise((resolve) => {
    show2(Object.assign(Object.assign({}, props), {
      closeOnAction: true,
      onClose: () => {
        var _a;
        (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
        resolve(false);
      },
      actions: [{
        key: "confirm",
        text: props.confirmText,
        primary: true,
        onClick: () => __awaiter(this, void 0, void 0, function* () {
          var _a;
          yield (_a = props.onConfirm) === null || _a === void 0 ? void 0 : _a.call(props);
          resolve(true);
        })
      }, {
        key: "cancel",
        text: props.cancelText,
        onClick: () => __awaiter(this, void 0, void 0, function* () {
          var _b;
          yield (_b = props.onCancel) === null || _b === void 0 ? void 0 : _b.call(props);
          resolve(false);
        })
      }]
    }));
  });
}

// node_modules/antd-mobile/es/components/modal/clear.js
function clear2() {
  closeFnSet2.forEach((close) => {
    close();
  });
}

// node_modules/antd-mobile/es/components/modal/index.js
var modal_default = attachPropertiesToComponent(Modal, {
  show: show2,
  alert: alert2,
  confirm: confirm2,
  clear: clear2
});

// node_modules/antd-mobile/es/components/nav-bar/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/nav-bar/nav-bar.css";

// node_modules/antd-mobile/es/components/nav-bar/nav-bar.js
var import_react192 = __toESM(require_react());
var import_classnames41 = __toESM(require_classnames());
var classPrefix52 = `adm-nav-bar`;
var defaultProps40 = {
  back: "",
  backArrow: true
};
var NavBar = (p) => {
  const props = mergeProps(defaultProps40, p);
  const {
    back,
    backArrow
  } = props;
  return withNativeProps(props, import_react192.default.createElement("div", {
    className: (0, import_classnames41.default)(classPrefix52)
  }, import_react192.default.createElement("div", {
    className: `${classPrefix52}-left`,
    role: "button"
  }, back !== null && import_react192.default.createElement("div", {
    className: `${classPrefix52}-back`,
    onClick: props.onBack
  }, backArrow && import_react192.default.createElement("span", {
    className: `${classPrefix52}-back-arrow`
  }, backArrow === true ? import_react192.default.createElement(LeftOutline_default, null) : backArrow), import_react192.default.createElement("span", {
    "aria-hidden": "true"
  }, back)), props.left), import_react192.default.createElement("div", {
    className: `${classPrefix52}-title`
  }, props.children), import_react192.default.createElement("div", {
    className: `${classPrefix52}-right`
  }, props.right)));
};

// node_modules/antd-mobile/es/components/nav-bar/index.js
var nav_bar_default = NavBar;

// node_modules/antd-mobile/es/components/notice-bar/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/notice-bar/notice-bar.css";

// node_modules/antd-mobile/es/components/notice-bar/notice-bar.js
var import_react193 = __toESM(require_react());
var import_classnames42 = __toESM(require_classnames());
var classPrefix53 = `adm-notice-bar`;
var defaultProps41 = {
  color: "default",
  delay: 2e3,
  speed: 50,
  icon: import_react193.default.createElement(SoundOutline_default, null)
};
var NoticeBar = (0, import_react193.memo)((p) => {
  const props = mergeProps(defaultProps41, p);
  const containerRef = (0, import_react193.useRef)(null);
  const textRef = (0, import_react193.useRef)(null);
  const [visible, setVisible] = (0, import_react193.useState)(true);
  const speed = props.speed;
  const delayLockRef = (0, import_react193.useRef)(true);
  const animatingRef = (0, import_react193.useRef)(false);
  function start2() {
    if (delayLockRef.current)
      return;
    const container = containerRef.current;
    const text = textRef.current;
    if (!container || !text)
      return;
    if (container.offsetWidth >= text.offsetWidth) {
      animatingRef.current = false;
      text.style.removeProperty("transition-duration");
      text.style.removeProperty("transform");
      return;
    }
    if (animatingRef.current)
      return;
    const initial = !text.style.transform;
    text.style.transitionDuration = "0s";
    if (initial) {
      text.style.transform = "translateX(0)";
    } else {
      text.style.transform = `translateX(${container.offsetWidth}px)`;
    }
    const distance = initial ? text.offsetWidth : container.offsetWidth + text.offsetWidth;
    animatingRef.current = true;
    text.style.transitionDuration = `${Math.round(distance / speed)}s`;
    text.style.transform = `translateX(-${text.offsetWidth}px)`;
  }
  useTimeout_default(() => {
    delayLockRef.current = false;
    start2();
  }, props.delay);
  useResizeEffect(() => {
    start2();
  }, containerRef);
  useMutationEffect(() => {
    start2();
  }, textRef, {
    subtree: true,
    childList: true,
    characterData: true
  });
  if (!visible)
    return null;
  return withNativeProps(props, import_react193.default.createElement("div", {
    className: (0, import_classnames42.default)(classPrefix53, `${classPrefix53}-${props.color}`)
  }, props.icon && import_react193.default.createElement("span", {
    className: `${classPrefix53}-left`
  }, props.icon), import_react193.default.createElement("span", {
    ref: containerRef,
    className: `${classPrefix53}-content`
  }, import_react193.default.createElement("span", {
    onTransitionEnd: () => {
      animatingRef.current = false;
      start2();
    },
    ref: textRef,
    className: `${classPrefix53}-content-inner`
  }, props.content)), (props.closeable || props.extra) && import_react193.default.createElement("span", {
    className: `${classPrefix53}-right`
  }, props.extra, props.closeable && import_react193.default.createElement("div", {
    className: `${classPrefix53}-close`,
    onClick: () => {
      var _a;
      setVisible(false);
      (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
    }
  }, import_react193.default.createElement(CloseOutline_default, {
    className: `${classPrefix53}-close-icon`
  })))));
});

// node_modules/antd-mobile/es/components/notice-bar/index.js
var notice_bar_default = NoticeBar;

// node_modules/antd-mobile/es/components/number-keyboard/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/number-keyboard/number-keyboard.css";

// node_modules/antd-mobile/es/components/number-keyboard/number-keyboard.js
var import_react194 = __toESM(require_react());
var import_classnames43 = __toESM(require_classnames());

// node_modules/antd-mobile/es/utils/shuffle.js
function shuffle(array) {
  const result = [...array];
  for (let i = result.length; i > 0; i--) {
    const j = Math.floor(Math.random() * i);
    [result[i - 1], result[j]] = [result[j], result[i - 1]];
  }
  return result;
}

// node_modules/antd-mobile/es/components/number-keyboard/number-keyboard.js
var classPrefix54 = "adm-number-keyboard";
var defaultProps42 = {
  defaultVisible: false,
  randomOrder: false,
  showCloseButton: true,
  confirmText: null,
  closeOnConfirm: true,
  safeArea: true,
  destroyOnClose: false,
  forceRender: false
};
var NumberKeyboard = (p) => {
  const props = mergeProps(defaultProps42, p);
  const {
    visible,
    title,
    getContainer,
    confirmText,
    customKey,
    randomOrder,
    showCloseButton,
    onInput
  } = props;
  const keyboardRef = (0, import_react194.useRef)(null);
  const keys = (0, import_react194.useMemo)(() => {
    const defaultKeys = ["1", "2", "3", "4", "5", "6", "7", "8", "9"];
    const keyList = randomOrder ? shuffle(defaultKeys) : defaultKeys;
    const customKeys = Array.isArray(customKey) ? customKey : [customKey];
    keyList.push("0");
    if (confirmText) {
      if (customKeys.length === 2) {
        keyList.splice(9, 0, customKeys.pop());
      }
      keyList.push(customKeys[0] || "");
    } else {
      keyList.splice(9, 0, customKeys[0] || "");
      keyList.push(customKeys[1] || "BACKSPACE");
    }
    return keyList;
  }, [customKey, confirmText, randomOrder, randomOrder && visible]);
  const timeoutRef = (0, import_react194.useRef)(-1);
  const intervalRef = (0, import_react194.useRef)(-1);
  const onDelete = useMemoizedFn_default(() => {
    var _a;
    (_a = props.onDelete) === null || _a === void 0 ? void 0 : _a.call(props);
  });
  const onBackspacePressStart = () => {
    timeoutRef.current = window.setTimeout(() => {
      onDelete();
      intervalRef.current = window.setInterval(onDelete, 150);
    }, 700);
  };
  const onBackspacePressEnd = () => {
    clearTimeout(timeoutRef.current);
    clearInterval(intervalRef.current);
  };
  const onKeyPress = (e, key) => {
    var _a, _b;
    e.preventDefault();
    switch (key) {
      case "BACKSPACE":
        onDelete === null || onDelete === void 0 ? void 0 : onDelete();
        break;
      case "OK":
        (_a = props.onConfirm) === null || _a === void 0 ? void 0 : _a.call(props);
        if (props.closeOnConfirm) {
          (_b = props.onClose) === null || _b === void 0 ? void 0 : _b.call(props);
        }
        break;
      default:
        if (key !== "")
          onInput === null || onInput === void 0 ? void 0 : onInput(key);
        break;
    }
  };
  const renderHeader = () => {
    if (!showCloseButton && !title)
      return null;
    return import_react194.default.createElement("div", {
      className: (0, import_classnames43.default)(`${classPrefix54}-header`, {
        [`${classPrefix54}-header-with-title`]: !!title
      })
    }, title && import_react194.default.createElement("div", {
      className: `${classPrefix54}-title`
    }, title), showCloseButton && import_react194.default.createElement("span", {
      className: `${classPrefix54}-header-close-button`,
      onClick: () => {
        var _a;
        (_a = props.onClose) === null || _a === void 0 ? void 0 : _a.call(props);
      },
      role: "button",
      title: "CLOSE"
    }, import_react194.default.createElement(DownOutline_default, null)));
  };
  const renderKey = (key, index) => {
    const isNumberKey = /^\d$/.test(key);
    const className = (0, import_classnames43.default)(`${classPrefix54}-key`, {
      [`${classPrefix54}-key-number`]: isNumberKey,
      [`${classPrefix54}-key-sign`]: !isNumberKey && key,
      [`${classPrefix54}-key-mid`]: index === 9 && !!confirmText && keys.length < 12
    });
    const ariaProps = key ? {
      role: "button",
      title: key
    } : void 0;
    return import_react194.default.createElement("div", Object.assign({
      key,
      className,
      onTouchStart: () => {
        if (key === "BACKSPACE") {
          onBackspacePressStart();
        }
      },
      onTouchEnd: (e) => {
        onKeyPress(e, key);
        if (key === "BACKSPACE") {
          onBackspacePressEnd();
        }
      }
    }, ariaProps), key === "BACKSPACE" ? import_react194.default.createElement(TextDeletionOutline_default, null) : key);
  };
  return import_react194.default.createElement(popup_default, {
    visible,
    getContainer,
    mask: false,
    afterClose: props.afterClose,
    afterShow: props.afterShow,
    className: `${classPrefix54}-popup`,
    stopPropagation: props.stopPropagation,
    destroyOnClose: props.destroyOnClose,
    forceRender: props.forceRender
  }, withNativeProps(props, import_react194.default.createElement("div", {
    ref: keyboardRef,
    className: classPrefix54,
    onMouseDown: (e) => {
      e.preventDefault();
    }
  }, renderHeader(), import_react194.default.createElement("div", {
    className: `${classPrefix54}-wrapper`
  }, import_react194.default.createElement("div", {
    className: (0, import_classnames43.default)(`${classPrefix54}-main`, {
      [`${classPrefix54}-main-confirmed-style`]: !!confirmText
    })
  }, keys.map(renderKey)), !!confirmText && import_react194.default.createElement("div", {
    className: `${classPrefix54}-confirm`
  }, import_react194.default.createElement("div", {
    className: `${classPrefix54}-key ${classPrefix54}-key-extra ${classPrefix54}-key-bs`,
    onTouchStart: () => {
      onBackspacePressStart();
    },
    onTouchEnd: (e) => {
      onKeyPress(e, "BACKSPACE");
      onBackspacePressEnd();
    },
    title: "BACKSPACE",
    role: "button"
  }, import_react194.default.createElement(TextDeletionOutline_default, null)), import_react194.default.createElement("div", {
    className: `${classPrefix54}-key ${classPrefix54}-key-extra ${classPrefix54}-key-ok`,
    onTouchEnd: (e) => onKeyPress(e, "OK"),
    role: "button"
  }, confirmText))), props.safeArea && import_react194.default.createElement("div", {
    className: `${classPrefix54}-footer`
  }, import_react194.default.createElement(safe_area_default, {
    position: "bottom"
  })))));
};

// node_modules/antd-mobile/es/components/number-keyboard/index.js
var number_keyboard_default = NumberKeyboard;

// node_modules/antd-mobile/es/components/page-indicator/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/page-indicator/page-indicator.css";

// node_modules/antd-mobile/es/components/page-indicator/page-indicator.js
var import_react195 = __toESM(require_react());
var import_classnames44 = __toESM(require_classnames());
var classPrefix55 = `adm-page-indicator`;
var defaultProps43 = {
  color: "primary",
  direction: "horizontal"
};
var PageIndicator = (0, import_react195.memo)((p) => {
  const props = mergeProps(defaultProps43, p);
  const dots = [];
  for (let i = 0; i < props.total; i++) {
    dots.push(import_react195.default.createElement("div", {
      key: i,
      className: (0, import_classnames44.default)(`${classPrefix55}-dot`, {
        [`${classPrefix55}-dot-active`]: props.current === i
      })
    }));
  }
  return withNativeProps(props, import_react195.default.createElement("div", {
    className: (0, import_classnames44.default)(classPrefix55, `${classPrefix55}-${props.direction}`, `${classPrefix55}-color-${props.color}`)
  }, dots));
});

// node_modules/antd-mobile/es/components/page-indicator/index.js
var page_indicator_default = PageIndicator;

// node_modules/antd-mobile/es/components/passcode-input/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/passcode-input/passcode-input.css";

// node_modules/antd-mobile/es/components/passcode-input/passcode-input.js
var import_react196 = __toESM(require_react());
var import_classnames45 = __toESM(require_classnames());
var classPrefix56 = "adm-passcode-input";
var defaultProps44 = {
  defaultValue: "",
  length: 6,
  plain: false,
  error: false,
  seperated: false,
  caret: true
};
var PasscodeInput = (0, import_react196.forwardRef)((p, ref) => {
  const props = mergeProps(defaultProps44, p);
  const cellLength = props.length > 0 && props.length < Infinity ? Math.floor(props.length) : defaultProps44.length;
  const {
    locale
  } = useConfig();
  const [focused, setFocused] = (0, import_react196.useState)(false);
  const [value, setValue] = usePropsValue(props);
  const rootRef = (0, import_react196.useRef)(null);
  const nativeInputRef = (0, import_react196.useRef)(null);
  (0, import_react196.useEffect)(() => {
    var _a;
    if (value.length >= cellLength) {
      (_a = props.onFill) === null || _a === void 0 ? void 0 : _a.call(props, value);
    }
  }, [value, cellLength]);
  const onFocus = () => {
    var _a, _b;
    if (!props.keyboard) {
      (_a = nativeInputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    }
    setFocused(true);
    (_b = props.onFocus) === null || _b === void 0 ? void 0 : _b.call(props);
  };
  (0, import_react196.useEffect)(() => {
    if (!focused)
      return;
    const timeout = window.setTimeout(() => {
      var _a;
      (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.scrollIntoView({
        block: "center",
        inline: "center",
        behavior: "smooth"
      });
    }, 100);
    return () => {
      window.clearTimeout(timeout);
    };
  }, [focused]);
  const onBlur = () => {
    var _a;
    setFocused(false);
    (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props);
  };
  (0, import_react196.useImperativeHandle)(ref, () => ({
    focus: () => {
      var _a;
      return (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    },
    blur: () => {
      var _a, _b;
      (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.blur();
      (_b = nativeInputRef.current) === null || _b === void 0 ? void 0 : _b.blur();
    }
  }));
  const renderCells = () => {
    const cells = [];
    const chars = value.split("");
    const caretIndex = chars.length;
    const focusedIndex = bound(chars.length, 0, cellLength - 1);
    for (let i = 0; i < cellLength; i++) {
      cells.push(import_react196.default.createElement("div", {
        className: (0, import_classnames45.default)(`${classPrefix56}-cell`, {
          [`${classPrefix56}-cell-caret`]: props.caret && caretIndex === i && focused,
          [`${classPrefix56}-cell-focused`]: focusedIndex === i && focused,
          [`${classPrefix56}-cell-dot`]: !props.plain && chars[i]
        }),
        key: i
      }, chars[i] && props.plain ? chars[i] : ""));
    }
    return cells;
  };
  const cls3 = (0, import_classnames45.default)(classPrefix56, {
    [`${classPrefix56}-focused`]: focused,
    [`${classPrefix56}-error`]: props.error,
    [`${classPrefix56}-seperated`]: props.seperated
  });
  return import_react196.default.createElement(import_react196.default.Fragment, null, withNativeProps(props, import_react196.default.createElement("div", {
    ref: rootRef,
    tabIndex: 0,
    className: cls3,
    onFocus,
    onBlur,
    role: "button",
    "aria-label": locale.PasscodeInput.name
  }, import_react196.default.createElement("div", {
    className: `${classPrefix56}-cell-container`
  }, renderCells()), import_react196.default.createElement("input", {
    ref: nativeInputRef,
    className: `${classPrefix56}-native-input`,
    value,
    type: "text",
    pattern: "[0-9]*",
    inputMode: "numeric",
    onChange: (e) => {
      setValue(e.target.value.slice(0, props.length));
    },
    "aria-hidden": true
  }))), props.keyboard && import_react196.default.cloneElement(props.keyboard, {
    visible: focused,
    onInput: (v) => {
      if (value.length < cellLength) {
        setValue((value + v).slice(0, props.length));
      }
    },
    onDelete: () => {
      setValue(value.slice(0, -1));
    },
    onClose: () => {
      var _a;
      (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.blur();
    }
  }));
});

// node_modules/antd-mobile/es/components/passcode-input/index.js
var passcode_input_default = PasscodeInput;

// node_modules/antd-mobile/es/components/progress-bar/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/progress-bar/progress-bar.css";

// node_modules/antd-mobile/es/components/progress-bar/progress-bar.js
var import_react197 = __toESM(require_react());
var import_classnames46 = __toESM(require_classnames());
var classPrefix57 = `adm-progress-bar`;
var defaultProps45 = {
  percent: 0,
  rounded: true,
  text: false
};
var ProgressBar = (p) => {
  const props = mergeProps(defaultProps45, p);
  const fillStyle = {
    width: `${props.percent}%`
  };
  const textElement = function() {
    if (props.text === true) {
      return `${props.percent}%`;
    }
    if (typeof props.text === "function") {
      return props.text(props.percent);
    }
    return props.text;
  }();
  return withNativeProps(props, import_react197.default.createElement("div", {
    className: (0, import_classnames46.default)(classPrefix57, props.rounded && `${classPrefix57}-rounded`)
  }, import_react197.default.createElement("div", {
    className: `${classPrefix57}-trail`
  }, import_react197.default.createElement("div", {
    className: `${classPrefix57}-fill`,
    style: fillStyle
  })), isNodeWithContent(textElement) && import_react197.default.createElement("div", {
    className: `${classPrefix57}-text`
  }, textElement)));
};

// node_modules/antd-mobile/es/components/progress-bar/index.js
var progress_bar_default = ProgressBar;

// node_modules/antd-mobile/es/components/progress-circle/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/progress-circle/progress-circle.css";

// node_modules/antd-mobile/es/components/progress-circle/progress-circle.js
var import_react198 = __toESM(require_react());
var classPrefix58 = `adm-progress-circle`;
var ProgressCircle = (p) => {
  const props = mergeProps({
    percent: 0
  }, p);
  const style = {
    "--percent": props.percent.toString()
  };
  return withNativeProps(props, import_react198.default.createElement("div", {
    className: `${classPrefix58}`,
    style
  }, import_react198.default.createElement("div", {
    className: `${classPrefix58}-content`
  }, import_react198.default.createElement("svg", {
    className: `${classPrefix58}-svg`
  }, import_react198.default.createElement("circle", {
    className: `${classPrefix58}-track`,
    fill: "transparent"
  }), import_react198.default.createElement("circle", {
    className: `${classPrefix58}-fill`,
    fill: "transparent"
  })), import_react198.default.createElement("div", {
    className: `${classPrefix58}-info`
  }, props.children))));
};

// node_modules/antd-mobile/es/components/progress-circle/index.js
var progress_circle_default = ProgressCircle;

// node_modules/antd-mobile/es/components/pull-to-refresh/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/pull-to-refresh/pull-to-refresh.css";

// node_modules/antd-mobile/es/components/pull-to-refresh/pull-to-refresh.js
var import_react200 = __toESM(require_react());

// node_modules/antd-mobile/es/utils/sleep.js
var sleep = (time) => new Promise((resolve) => setTimeout(resolve, time));

// node_modules/antd-mobile/es/components/pull-to-refresh/pull-to-refresh.js
var classPrefix59 = `adm-pull-to-refresh`;
var defaultProps46 = {
  pullingText: "\u4E0B\u62C9\u5237\u65B0",
  canReleaseText: "\u91CA\u653E\u7ACB\u5373\u5237\u65B0",
  refreshingText: "\u52A0\u8F7D\u4E2D...",
  completeText: "\u5237\u65B0\u6210\u529F",
  completeDelay: 500,
  disabled: false,
  onRefresh: () => {
  }
};
var PullToRefresh = (p) => {
  var _a, _b;
  const {
    locale
  } = useConfig();
  const props = mergeProps(defaultProps46, {
    refreshingText: `${locale.common.loading}...`,
    pullingText: locale.PullToRefresh.pulling,
    canReleaseText: locale.PullToRefresh.canRelease,
    completeText: locale.PullToRefresh.complete
  }, p);
  const headHeight = (_a = props.headHeight) !== null && _a !== void 0 ? _a : convertPx(40);
  const threshold = (_b = props.threshold) !== null && _b !== void 0 ? _b : convertPx(60);
  const [status, setStatus] = (0, import_react200.useState)("pulling");
  const [springStyles, api] = useSpring(() => ({
    from: {
      height: 0
    },
    config: {
      tension: 300,
      friction: 30,
      clamp: true
    }
  }));
  const elementRef = (0, import_react200.useRef)(null);
  const pullingRef = (0, import_react200.useRef)(false);
  (0, import_react200.useEffect)(() => {
    var _a2;
    (_a2 = elementRef.current) === null || _a2 === void 0 ? void 0 : _a2.addEventListener("touchmove", () => {
    });
  }, []);
  function doRefresh() {
    return __awaiter(this, void 0, void 0, function* () {
      api.start({
        height: headHeight
      });
      setStatus("refreshing");
      try {
        yield props.onRefresh();
        setStatus("complete");
      } catch (e) {
        api.start({
          to: (next) => __awaiter(this, void 0, void 0, function* () {
            yield next({
              height: 0
            });
            setStatus("pulling");
          })
        });
        throw e;
      }
      if (props.completeDelay > 0) {
        yield sleep(props.completeDelay);
      }
      api.start({
        to: (next) => __awaiter(this, void 0, void 0, function* () {
          yield next({
            height: 0
          });
          setStatus("pulling");
        })
      });
    });
  }
  useDrag((state) => {
    if (status === "refreshing" || status === "complete")
      return;
    const {
      event
    } = state;
    if (state.last) {
      pullingRef.current = false;
      if (status === "canRelease") {
        doRefresh();
      } else {
        api.start({
          height: 0
        });
      }
      return;
    }
    const [, y] = state.movement;
    if (state.first && y > 0) {
      let getScrollTop2 = function(element) {
        return "scrollTop" in element ? element.scrollTop : element.scrollY;
      };
      const target = state.event.target;
      if (!target || !(target instanceof Element))
        return;
      let scrollParent = getScrollParent(target);
      while (true) {
        if (!scrollParent)
          return;
        const scrollTop = getScrollTop2(scrollParent);
        if (scrollTop > 0) {
          return;
        }
        if (scrollParent instanceof Window) {
          break;
        }
        scrollParent = getScrollParent(scrollParent.parentNode);
      }
      pullingRef.current = true;
    }
    if (!pullingRef.current)
      return;
    if (event.cancelable) {
      event.preventDefault();
    }
    event.stopPropagation();
    const height = Math.max(rubberbandIfOutOfBounds2(y, 0, 0, headHeight * 5, 0.5), 0);
    api.start({
      height
    });
    setStatus(height > threshold ? "canRelease" : "pulling");
  }, {
    pointer: {
      touch: true
    },
    axis: "y",
    target: elementRef,
    enabled: !props.disabled,
    eventOptions: supportsPassive ? {
      passive: false
    } : false
  });
  const renderStatusText = () => {
    var _a2;
    if (props.renderText) {
      return (_a2 = props.renderText) === null || _a2 === void 0 ? void 0 : _a2.call(props, status);
    }
    if (status === "pulling")
      return props.pullingText;
    if (status === "canRelease")
      return props.canReleaseText;
    if (status === "refreshing")
      return props.refreshingText;
    if (status === "complete")
      return props.completeText;
  };
  return import_react200.default.createElement(animated.div, {
    ref: elementRef,
    className: classPrefix59
  }, import_react200.default.createElement(animated.div, {
    style: springStyles,
    className: `${classPrefix59}-head`
  }, import_react200.default.createElement("div", {
    className: `${classPrefix59}-head-content`,
    style: {
      height: headHeight
    }
  }, renderStatusText())), import_react200.default.createElement("div", {
    className: `${classPrefix59}-content`
  }, props.children));
};

// node_modules/antd-mobile/es/components/pull-to-refresh/index.js
var pull_to_refresh_default = PullToRefresh;

// node_modules/antd-mobile/es/components/radio/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/radio/radio.css";

// node_modules/antd-mobile/es/components/radio/group.js
var import_react202 = __toESM(require_react());

// node_modules/antd-mobile/es/components/radio/group-context.js
var import_react201 = __toESM(require_react());
var RadioGroupContext = (0, import_react201.createContext)(null);

// node_modules/antd-mobile/es/components/radio/group.js
var defaultProps47 = {
  disabled: false,
  defaultValue: null
};
var Group2 = (p) => {
  const props = mergeProps(defaultProps47, p);
  const [value, setValue] = usePropsValue({
    value: props.value,
    defaultValue: props.defaultValue,
    onChange: (v) => {
      var _a;
      if (v === null)
        return;
      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, v);
    }
  });
  return import_react202.default.createElement(
    RadioGroupContext.Provider,
    {
      value: {
        value: value === null ? [] : [value],
        check: (v) => {
          setValue(v);
        },
        uncheck: () => {
        },
        disabled: props.disabled
      }
    },
    props.children
  );
};

// node_modules/antd-mobile/es/components/radio/radio.js
var import_react203 = __toESM(require_react());
var import_classnames47 = __toESM(require_classnames());
var classPrefix60 = `adm-radio`;
var defaultProps48 = {
  defaultChecked: false
};
var Radio = (p) => {
  const props = mergeProps(defaultProps48, p);
  const groupContext = (0, import_react203.useContext)(RadioGroupContext);
  let [checked, setChecked] = usePropsValue({
    value: props.checked,
    defaultValue: props.defaultChecked,
    onChange: props.onChange
  });
  let disabled = props.disabled;
  const {
    value
  } = props;
  if (groupContext && value !== void 0) {
    if (isDev2) {
      if (p.checked !== void 0) {
        devWarning("Radio", "When used within `Radio.Group`, the `checked` prop of `Radio` will not work.");
      }
      if (p.defaultChecked !== void 0) {
        devWarning("Radio", "When used within `Radio.Group`, the `defaultChecked` prop of `Radio` will not work.");
      }
    }
    checked = groupContext.value.includes(value);
    setChecked = (innerChecked) => {
      var _a;
      if (innerChecked) {
        groupContext.check(value);
      } else {
        groupContext.uncheck(value);
      }
      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, innerChecked);
    };
    disabled = disabled || groupContext.disabled;
  }
  const renderIcon = () => {
    if (props.icon) {
      return import_react203.default.createElement("div", {
        className: `${classPrefix60}-custom-icon`
      }, props.icon(checked));
    }
    return import_react203.default.createElement("div", {
      className: `${classPrefix60}-icon`
    }, checked && import_react203.default.createElement(CheckIcon, null));
  };
  return withNativeProps(props, import_react203.default.createElement("label", {
    className: (0, import_classnames47.default)(classPrefix60, {
      [`${classPrefix60}-checked`]: checked,
      [`${classPrefix60}-disabled`]: disabled,
      [`${classPrefix60}-block`]: props.block
    })
  }, import_react203.default.createElement(NativeInput, {
    type: "radio",
    checked,
    onChange: setChecked,
    disabled,
    id: props.id
  }), renderIcon(), props.children && import_react203.default.createElement("div", {
    className: `${classPrefix60}-content`
  }, props.children)));
};

// node_modules/antd-mobile/es/components/radio/index.js
var radio_default = attachPropertiesToComponent(Radio, {
  Group: Group2
});

// node_modules/antd-mobile/es/components/rate/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/rate/rate.css";

// node_modules/antd-mobile/es/components/rate/rate.js
var import_react205 = __toESM(require_react());
var import_classnames48 = __toESM(require_classnames());

// node_modules/antd-mobile/es/components/rate/star.js
var import_react204 = __toESM(require_react());
var Star = () => {
  return import_react204.default.createElement("svg", {
    viewBox: "0 0 42 40",
    height: "1em",
    xmlns: "http://www.w3.org/2000/svg",
    style: {
      verticalAlign: "-0.125em"
    }
  }, import_react204.default.createElement("path", {
    d: "m21 34-10.52 5.53a2 2 0 0 1-2.902-2.108l2.01-11.714-8.511-8.296a2 2 0 0 1 1.108-3.411l11.762-1.71 5.26-10.657a2 2 0 0 1 3.586 0l5.26 10.658L39.815 14a2 2 0 0 1 1.108 3.411l-8.51 8.296 2.009 11.714a2 2 0 0 1-2.902 2.109L21 34Z",
    fill: "currentColor",
    fillRule: "evenodd"
  }));
};

// node_modules/antd-mobile/es/components/rate/rate.js
var classPrefix61 = `adm-rate`;
var defaultProps49 = {
  count: 5,
  allowHalf: false,
  character: import_react205.default.createElement(Star, null),
  defaultValue: 0,
  readOnly: false,
  allowClear: true
};
var Rate = (p) => {
  const props = mergeProps(defaultProps49, p);
  const [value, setValue] = usePropsValue(props);
  const containerRef = (0, import_react205.useRef)(null);
  const starList = Array(props.count).fill(null);
  function renderStar(v, half) {
    return import_react205.default.createElement("div", {
      className: (0, import_classnames48.default)(`${classPrefix61}-star`, {
        [`${classPrefix61}-star-active`]: value >= v,
        [`${classPrefix61}-star-half`]: half,
        [`${classPrefix61}-star-readonly`]: props.readOnly
      }),
      role: "radio",
      "aria-checked": value >= v,
      "aria-label": "" + v
    }, props.character);
  }
  const bind = useDrag((state) => {
    if (props.readOnly)
      return;
    const {
      xy: [clientX],
      tap
    } = state;
    const container = containerRef.current;
    if (!container)
      return;
    const rect = container.getBoundingClientRect();
    const rawValue = (clientX - rect.left) / rect.width * props.count;
    const ceiledValue = props.allowHalf ? Math.ceil(rawValue * 2) / 2 : Math.ceil(rawValue);
    const boundValue = bound(ceiledValue, 0, props.count);
    if (tap) {
      if (props.allowClear && boundValue === value) {
        setValue(0);
        return;
      }
    }
    setValue(boundValue);
  }, {
    axis: "x",
    pointer: {
      touch: true
    },
    filterTaps: true
  });
  return withNativeProps(props, import_react205.default.createElement("div", Object.assign({
    className: classPrefix61,
    role: "radiogroup",
    "aria-readonly": props.readOnly,
    ref: containerRef
  }, bind()), starList.map((_, i) => import_react205.default.createElement("div", {
    key: i,
    className: (0, import_classnames48.default)(`${classPrefix61}-box`)
  }, props.allowHalf && renderStar(i + 0.5, true), renderStar(i + 1, false)))));
};

// node_modules/antd-mobile/es/components/rate/index.js
var rate_default = Rate;

// node_modules/antd-mobile/es/components/result/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/result/result.css";

// node_modules/antd-mobile/es/components/result/result.js
var import_react207 = __toESM(require_react());
var import_classnames49 = __toESM(require_classnames());
var classPrefix62 = `adm-result`;
var iconRecord = {
  success: CheckCircleFill_default,
  error: CloseCircleFill_default,
  info: InformationCircleFill_default,
  waiting: ClockCircleFill_default,
  warning: ExclamationCircleFill_default
};
var defaultProps50 = {
  status: "info"
};
var Result = (p) => {
  const props = mergeProps(defaultProps50, p);
  const {
    status,
    title,
    description,
    icon
  } = props;
  if (!status)
    return null;
  const resultIcon = icon || import_react207.default.createElement(iconRecord[status]);
  return withNativeProps(props, import_react207.default.createElement("div", {
    className: (0, import_classnames49.default)(classPrefix62, `${classPrefix62}-${status}`)
  }, import_react207.default.createElement("div", {
    className: `${classPrefix62}-icon`
  }, resultIcon), import_react207.default.createElement("div", {
    className: `${classPrefix62}-title`
  }, title), description ? import_react207.default.createElement("div", {
    className: `${classPrefix62}-description`
  }, description) : null));
};

// node_modules/antd-mobile/es/components/result/index.js
var result_default = Result;

// node_modules/antd-mobile/es/components/result-page/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/result-page/result-page.css";

// node_modules/antd-mobile/es/components/result-page/result-page.js
var import_react208 = __toESM(require_react());
var import_classnames50 = __toESM(require_classnames());
var classPrefix63 = `adm-result-page`;
var iconRecord2 = {
  success: CheckCircleFill_default,
  error: CloseCircleFill_default,
  info: InformationCircleFill_default,
  waiting: ClockCircleFill_default,
  warning: ExclamationCircleFill_default
};
var defaultProps51 = {
  status: "info",
  details: []
};
var ResultPage = (p) => {
  const props = mergeProps(defaultProps51, p);
  const {
    status,
    title,
    description,
    details,
    icon,
    primaryButtonText,
    secondaryButtonText,
    onPrimaryButtonClick,
    onSecondaryButtonClick
  } = props;
  const resultIcon = icon || import_react208.default.createElement(iconRecord2[status]);
  const [collapse, setCollapse] = (0, import_react208.useState)(true);
  const showSecondaryButton = isNodeWithContent(secondaryButtonText);
  const showPrimaryButton = isNodeWithContent(primaryButtonText);
  return withNativeProps(props, import_react208.default.createElement("div", {
    className: classPrefix63
  }, import_react208.default.createElement("div", {
    className: `${classPrefix63}-header`
  }, import_react208.default.createElement("div", {
    className: `${classPrefix63}-icon`
  }, resultIcon), import_react208.default.createElement("div", {
    className: `${classPrefix63}-title`
  }, title), isNodeWithContent(description) ? import_react208.default.createElement("div", {
    className: `${classPrefix63}-description`
  }, description) : null, details.length ? import_react208.default.createElement("div", {
    className: `${classPrefix63}-details`
  }, (collapse ? details.slice(0, 3) : details).map((detail, index) => {
    return import_react208.default.createElement("div", {
      className: (0, import_classnames50.default)(`${classPrefix63}-detail`, detail.bold && `${classPrefix63}-detail-bold`),
      key: index
    }, import_react208.default.createElement("span", null, detail.label), import_react208.default.createElement("span", null, detail.value));
  }), details.length > 3 && import_react208.default.createElement("div", {
    onClick: () => setCollapse((prev) => !prev)
  }, import_react208.default.createElement("div", {
    className: (0, import_classnames50.default)(`${classPrefix63}-collapse`, !collapse && `${classPrefix63}-collapse-active`)
  }))) : null, import_react208.default.createElement("div", {
    className: `${classPrefix63}-bgWrapper`
  }, import_react208.default.createElement("div", {
    className: `${classPrefix63}-bg`
  }))), import_react208.default.createElement("div", {
    className: `${classPrefix63}-content`
  }, props.children), import_react208.default.createElement("div", {
    className: `${classPrefix63}-footer`
  }, showSecondaryButton && import_react208.default.createElement(button_default, {
    block: true,
    color: "default",
    fill: "solid",
    size: "large",
    onClick: onSecondaryButtonClick,
    className: `${classPrefix63}-footer-btn`
  }, secondaryButtonText), showPrimaryButton && showSecondaryButton && import_react208.default.createElement("div", {
    className: `${classPrefix63}-footer-space`
  }), showPrimaryButton && import_react208.default.createElement(button_default, {
    block: true,
    color: "primary",
    fill: "solid",
    size: "large",
    onClick: onPrimaryButtonClick,
    className: `${classPrefix63}-footer-btn`
  }, primaryButtonText))));
};

// node_modules/antd-mobile/es/components/result-page/result-page-card.js
var import_react209 = __toESM(require_react());
var import_classnames51 = __toESM(require_classnames());
var classPrefix64 = `adm-result-page-card`;
var ResultPageCard = (props) => {
  return withNativeProps(props, import_react209.default.createElement("div", {
    className: (0, import_classnames51.default)(`${classPrefix64}`)
  }, props.children));
};

// node_modules/antd-mobile/es/components/result-page/index.js
var result_page_default = attachPropertiesToComponent(ResultPage, {
  Card: ResultPageCard
});

// node_modules/antd-mobile/es/components/search-bar/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/search-bar/search-bar.css";

// node_modules/antd-mobile/es/components/search-bar/search-bar.js
var import_react210 = __toESM(require_react());
var import_classnames52 = __toESM(require_classnames());
var classPrefix65 = `adm-search-bar`;
var defaultProps52 = {
  clearable: true,
  onlyShowClearWhenFocus: false,
  showCancelButton: false,
  defaultValue: "",
  clearOnCancel: true,
  icon: import_react210.default.createElement(SearchOutline_default, null)
};
var SearchBar = (0, import_react210.forwardRef)((p, ref) => {
  const {
    locale
  } = useConfig();
  const props = mergeProps(defaultProps52, {
    cancelText: locale.common.cancel
  }, p);
  const [value, setValue] = usePropsValue(props);
  const [hasFocus, setHasFocus] = (0, import_react210.useState)(false);
  const inputRef = (0, import_react210.useRef)(null);
  const composingRef = (0, import_react210.useRef)(false);
  (0, import_react210.useImperativeHandle)(ref, () => ({
    clear: () => {
      var _a;
      return (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.clear();
    },
    focus: () => {
      var _a;
      return (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    },
    blur: () => {
      var _a;
      return (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.blur();
    },
    get nativeElement() {
      var _a, _b;
      return (_b = (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.nativeElement) !== null && _b !== void 0 ? _b : null;
    }
  }));
  const renderCancelButton = () => {
    let isShowCancel;
    if (typeof props.showCancelButton === "function") {
      isShowCancel = props.showCancelButton(hasFocus, value);
    } else {
      isShowCancel = props.showCancelButton && hasFocus;
    }
    return isShowCancel && import_react210.default.createElement("div", {
      className: `${classPrefix65}-suffix`
    }, import_react210.default.createElement(button_default, {
      fill: "none",
      className: `${classPrefix65}-cancel-button`,
      onClick: () => {
        var _a, _b, _c;
        if (props.clearOnCancel) {
          (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.clear();
        }
        (_b = inputRef.current) === null || _b === void 0 ? void 0 : _b.blur();
        (_c = props.onCancel) === null || _c === void 0 ? void 0 : _c.call(props);
      },
      onMouseDown: (e) => {
        e.preventDefault();
      }
    }, props.cancelText));
  };
  return withNativeProps(props, import_react210.default.createElement("div", {
    className: (0, import_classnames52.default)(classPrefix65, {
      [`${classPrefix65}-active`]: hasFocus
    })
  }, import_react210.default.createElement("div", {
    className: `${classPrefix65}-input-box`
  }, props.icon && import_react210.default.createElement("div", {
    className: `${classPrefix65}-input-box-icon`
  }, props.icon), import_react210.default.createElement(input_default, {
    ref: inputRef,
    className: (0, import_classnames52.default)(`${classPrefix65}-input`, {
      [`${classPrefix65}-input-without-icon`]: !props.icon
    }),
    value,
    onChange: setValue,
    maxLength: props.maxLength,
    placeholder: props.placeholder,
    clearable: props.clearable,
    onlyShowClearWhenFocus: props.onlyShowClearWhenFocus,
    onFocus: (e) => {
      var _a;
      setHasFocus(true);
      (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, e);
    },
    onBlur: (e) => {
      var _a;
      setHasFocus(false);
      (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props, e);
    },
    onClear: props.onClear,
    type: "search",
    enterKeyHint: "search",
    onEnterPress: () => {
      var _a, _b;
      if (!composingRef.current) {
        (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.blur();
        (_b = props.onSearch) === null || _b === void 0 ? void 0 : _b.call(props, value);
      }
    },
    "aria-label": locale.SearchBar.name,
    onCompositionStart: () => {
      composingRef.current = true;
    },
    onCompositionEnd: () => {
      composingRef.current = false;
    }
  })), renderCancelButton()));
});

// node_modules/antd-mobile/es/components/search-bar/index.js
var search_bar_default = SearchBar;

// node_modules/antd-mobile/es/components/selector/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/selector/selector.css";

// node_modules/antd-mobile/es/components/selector/selector.js
var import_classnames53 = __toESM(require_classnames());
var import_react212 = __toESM(require_react());

// node_modules/antd-mobile/es/components/selector/check-mark.js
var import_react211 = __toESM(require_react());
var CheckMark = (0, import_react211.memo)(() => {
  return import_react211.default.createElement("svg", {
    width: "17px",
    height: "13px",
    viewBox: "0 0 17 13",
    version: "1.1",
    xmlns: "http://www.w3.org/2000/svg"
  }, import_react211.default.createElement("g", {
    stroke: "none",
    strokeWidth: "1",
    fill: "none",
    fillRule: "evenodd",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }, import_react211.default.createElement("g", {
    transform: "translate(-2832.000000, -1103.000000)",
    stroke: "#FFFFFF",
    strokeWidth: "3"
  }, import_react211.default.createElement("g", {
    transform: "translate(2610.000000, 955.000000)"
  }, import_react211.default.createElement("g", {
    transform: "translate(24.000000, 91.000000)"
  }, import_react211.default.createElement("g", {
    transform: "translate(179.177408, 36.687816)"
  }, import_react211.default.createElement("polyline", {
    points: "34.2767388 22 24.797043 31.4796958 21 27.6826527"
  })))))));
});

// node_modules/antd-mobile/es/components/selector/selector.js
var classPrefix66 = `adm-selector`;
var defaultProps53 = {
  multiple: false,
  defaultValue: [],
  showCheckMark: true
};
var Selector = (p) => {
  const props = mergeProps(defaultProps53, p);
  const [value, setValue] = usePropsValue({
    value: props.value,
    defaultValue: props.defaultValue,
    onChange: (val) => {
      var _a;
      const extend = {
        get items() {
          return props.options.filter((option) => val.includes(option.value));
        }
      };
      (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, val, extend);
    }
  });
  const items = props.options.map((option) => {
    const active = (value || []).includes(option.value);
    const disabled = option.disabled || props.disabled;
    const itemCls = (0, import_classnames53.default)(`${classPrefix66}-item`, {
      [`${classPrefix66}-item-active`]: active && !props.multiple,
      [`${classPrefix66}-item-multiple-active`]: active && props.multiple,
      [`${classPrefix66}-item-disabled`]: disabled
    });
    return import_react212.default.createElement("div", {
      key: option.value,
      className: itemCls,
      onClick: () => {
        if (disabled) {
          return;
        }
        if (props.multiple) {
          const val = active ? value.filter((v) => v !== option.value) : [...value, option.value];
          setValue(val);
        } else {
          const val = active ? [] : [option.value];
          setValue(val);
        }
      }
    }, option.label, option.description && import_react212.default.createElement("div", {
      className: `${classPrefix66}-item-description`
    }, option.description), active && props.showCheckMark && import_react212.default.createElement("div", {
      className: `${classPrefix66}-check-mark-wrapper`
    }, import_react212.default.createElement(CheckMark, null)));
  });
  return withNativeProps(props, import_react212.default.createElement("div", {
    className: classPrefix66
  }, !props.columns && import_react212.default.createElement(space_default, {
    wrap: true
  }, items), props.columns && import_react212.default.createElement(grid_default, {
    columns: props.columns
  }, items)));
};

// node_modules/antd-mobile/es/components/selector/index.js
var selector_default = Selector;

// node_modules/antd-mobile/es/components/side-bar/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/side-bar/side-bar.css";

// node_modules/antd-mobile/es/components/side-bar/side-bar.js
var import_react214 = __toESM(require_react());
var import_classnames54 = __toESM(require_classnames());

// node_modules/antd-mobile/es/components/side-bar/corner.js
var import_react213 = __toESM(require_react());
var Corner = (0, import_react213.memo)((props) => withNativeProps(props, import_react213.default.createElement("svg", {
  viewBox: "0 0 30 30"
}, import_react213.default.createElement("g", {
  stroke: "none",
  strokeWidth: "1",
  fill: "none",
  fillRule: "evenodd"
}, import_react213.default.createElement("path", {
  d: "M30,0 C13.4314575,3.04359188e-15 -2.02906125e-15,13.4314575 0,30 L0,30 L0,0 Z",
  fill: "var(--adm-color-background)",
  transform: "translate(15.000000, 15.000000) scale(-1, -1) translate(-15.000000, -15.000000) "
})))));

// node_modules/antd-mobile/es/components/side-bar/side-bar.js
var classPrefix67 = `adm-side-bar`;
var SideBarItem = () => {
  return null;
};
var SideBar = (props) => {
  var _a;
  let firstActiveKey = null;
  const items = [];
  traverseReactNode(props.children, (child, index) => {
    if (!import_react214.default.isValidElement(child))
      return;
    const key = child.key;
    if (typeof key !== "string")
      return;
    if (index === 0) {
      firstActiveKey = key;
    }
    items.push(child);
  });
  const [activeKey, setActiveKey] = usePropsValue({
    value: props.activeKey,
    defaultValue: (_a = props.defaultActiveKey) !== null && _a !== void 0 ? _a : firstActiveKey,
    onChange: (v) => {
      var _a2;
      if (v === null)
        return;
      (_a2 = props.onChange) === null || _a2 === void 0 ? void 0 : _a2.call(props, v);
    }
  });
  const lastItem = items[items.length - 1];
  const isLastItemActive = lastItem && lastItem.key === activeKey;
  return withNativeProps(props, import_react214.default.createElement("div", {
    className: classPrefix67
  }, import_react214.default.createElement("div", {
    className: `${classPrefix67}-items`
  }, items.map((item, index) => {
    const active = item.key === activeKey;
    const isActiveNextSibling = items[index - 1] && items[index - 1].key === activeKey;
    const isActivePreviousSibling = items[index + 1] && items[index + 1].key === activeKey;
    return withNativeProps(item.props, import_react214.default.createElement("div", {
      key: item.key,
      onClick: () => {
        const {
          key
        } = item;
        if (key === void 0 || key === null || item.props.disabled)
          return;
        setActiveKey(key.toString());
      },
      className: (0, import_classnames54.default)(`${classPrefix67}-item`, {
        [`${classPrefix67}-item-active`]: active,
        [`${classPrefix67}-item-disabled`]: item.props.disabled
      })
    }, import_react214.default.createElement(import_react214.default.Fragment, null, isActiveNextSibling && import_react214.default.createElement(Corner, {
      className: `${classPrefix67}-item-corner ${classPrefix67}-item-corner-top`
    }), isActivePreviousSibling && import_react214.default.createElement(Corner, {
      className: `${classPrefix67}-item-corner ${classPrefix67}-item-corner-bottom`
    })), import_react214.default.createElement(badge_default, {
      content: item.props.badge,
      className: `${classPrefix67}-badge`
    }, import_react214.default.createElement("div", {
      className: `${classPrefix67}-item-title`
    }, active && import_react214.default.createElement("div", {
      className: `${classPrefix67}-item-highlight`
    }), item.props.title))));
  })), import_react214.default.createElement("div", {
    className: (0, import_classnames54.default)(`${classPrefix67}-extra-space`, isLastItemActive && `${classPrefix67}-item-active-next-sibling`)
  }, isLastItemActive && import_react214.default.createElement(Corner, {
    className: `${classPrefix67}-item-corner ${classPrefix67}-item-corner-top`
  }))));
};

// node_modules/antd-mobile/es/components/side-bar/index.js
var side_bar_default = attachPropertiesToComponent(SideBar, {
  Item: SideBarItem
});

// node_modules/antd-mobile/es/components/slider/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/slider/slider.css";

// node_modules/antd-mobile/es/components/slider/slider.js
var import_react220 = __toESM(require_react());
var import_classnames57 = __toESM(require_classnames());

// node_modules/antd-mobile/es/components/slider/ticks.js
var import_react215 = __toESM(require_react());
var import_classnames55 = __toESM(require_classnames());
var classPrefix68 = `adm-slider`;
var Ticks = ({
  points,
  max: max3,
  min: min3,
  upperBound,
  lowerBound
}) => {
  const range = max3 - min3;
  const elements = points.map((point) => {
    const offset2 = `${Math.abs(point - min3) / range * 100}%`;
    const isActived = point <= upperBound && point >= lowerBound;
    const style = {
      left: offset2
    };
    const pointClassName = (0, import_classnames55.default)({
      [`${classPrefix68}-tick`]: true,
      [`${classPrefix68}-tick-active`]: isActived
    });
    return import_react215.default.createElement("span", {
      className: pointClassName,
      style,
      key: point
    });
  });
  return import_react215.default.createElement("div", {
    className: `${classPrefix68}-ticks`
  }, elements);
};
var ticks_default = Ticks;

// node_modules/antd-mobile/es/components/slider/marks.js
var import_react216 = __toESM(require_react());
var import_classnames56 = __toESM(require_classnames());
var classPrefix69 = `adm-slider-mark`;
var Marks = ({
  marks,
  upperBound,
  lowerBound,
  max: max3,
  min: min3
}) => {
  const marksKeys = Object.keys(marks);
  const range = max3 - min3;
  const elements = marksKeys.map(parseFloat).sort((a, b) => a - b).filter((point) => point >= min3 && point <= max3).map((point) => {
    const markPoint = marks[point];
    if (!markPoint && markPoint !== 0) {
      return null;
    }
    const isActive = point <= upperBound && point >= lowerBound;
    const markClassName = (0, import_classnames56.default)({
      [`${classPrefix69}-text`]: true,
      [`${classPrefix69}-text-active`]: isActive
    });
    const style = {
      left: `${(point - min3) / range * 100}%`
    };
    return import_react216.default.createElement("span", {
      className: markClassName,
      style,
      key: point
    }, markPoint);
  });
  return import_react216.default.createElement("div", {
    className: classPrefix69
  }, elements);
};
var marks_default = Marks;

// node_modules/antd-mobile/es/components/slider/thumb.js
var import_react218 = __toESM(require_react());

// node_modules/antd-mobile/es/components/slider/thumb-icon.js
var import_react217 = __toESM(require_react());
var ThumbIcon = (props) => {
  return withNativeProps(props, import_react217.default.createElement("svg", {
    viewBox: "0 0 24 24",
    xmlns: "http://www.w3.org/2000/svg"
  }, import_react217.default.createElement("g", {
    fill: "currentColor",
    fillRule: "evenodd"
  }, import_react217.default.createElement("rect", {
    x: 10,
    width: 4,
    height: 24,
    rx: 2
  }), import_react217.default.createElement("rect", {
    y: 4,
    width: 4,
    height: 16,
    rx: 2
  }), import_react217.default.createElement("rect", {
    x: 20,
    y: 4,
    width: 4,
    height: 16,
    rx: 2
  }))));
};

// node_modules/antd-mobile/es/components/slider/thumb.js
var classPrefix70 = `adm-slider`;
var Thumb = (props) => {
  const {
    value,
    min: min3,
    max: max3,
    disabled,
    onDrag,
    icon
  } = props;
  const prevValue = (0, import_react218.useRef)(value);
  const {
    locale
  } = useConfig();
  const currentPosition = () => {
    return {
      left: `${(value - min3) / (max3 - min3) * 100}%`,
      right: "auto"
    };
  };
  const [dragging, setDragging] = (0, import_react218.useState)(false);
  const bind = useDrag((state) => {
    var _a;
    if (disabled)
      return;
    if (state.first) {
      prevValue.current = value;
    }
    const x = state.xy[0] - state.initial[0];
    const sliderOffsetWith = (_a = props.trackRef.current) === null || _a === void 0 ? void 0 : _a.offsetWidth;
    if (!sliderOffsetWith)
      return;
    const diff = x / Math.ceil(sliderOffsetWith) * (max3 - min3);
    onDrag(prevValue.current + diff, state.first, state.last);
    setDragging(!state.last);
  }, {
    axis: "x",
    pointer: {
      touch: true
    }
  });
  const renderPopoverContent = typeof props.popover === "function" ? props.popover : props.popover ? (value2) => value2.toString() : null;
  const thumbElement = import_react218.default.createElement("div", {
    className: `${classPrefix70}-thumb`
  }, icon ? icon : import_react218.default.createElement(ThumbIcon, {
    className: `${classPrefix70}-thumb-icon`
  }));
  return import_react218.default.createElement("div", Object.assign({
    className: `${classPrefix70}-thumb-container`,
    style: currentPosition()
  }, bind(), {
    role: "slider",
    "aria-label": props["aria-label"] || locale.Slider.name,
    "aria-valuemax": max3,
    "aria-valuemin": min3,
    "aria-valuenow": value,
    "aria-disabled": disabled
  }), renderPopoverContent ? import_react218.default.createElement(Popover, {
    content: renderPopoverContent(value),
    placement: "top",
    visible: dragging,
    getContainer: null,
    mode: "dark"
  }, thumbElement) : thumbElement);
};
var thumb_default = Thumb;

// node_modules/antd-mobile/es/components/slider/slider.js
var classPrefix71 = `adm-slider`;
var defaultProps54 = {
  min: 0,
  max: 100,
  step: 1,
  ticks: false,
  range: false,
  disabled: false,
  popover: false
};
var Slider = (p) => {
  var _a;
  const props = mergeProps(defaultProps54, p);
  const {
    min: min3,
    max: max3,
    disabled,
    marks,
    ticks,
    step,
    icon
  } = props;
  function sortValue(val) {
    return val.sort((a, b) => a - b);
  }
  function convertValue(value) {
    return props.range ? value : [props.min, value];
  }
  function reverseValue(value) {
    return props.range ? value : value[1];
  }
  function onAfterChange(value) {
    var _a2;
    (_a2 = props.onAfterChange) === null || _a2 === void 0 ? void 0 : _a2.call(props, reverseValue(value));
  }
  const [rawValue, setRawValue] = usePropsValue({
    value: props.value,
    defaultValue: (_a = props.defaultValue) !== null && _a !== void 0 ? _a : props.range ? [min3, min3] : min3,
    onChange: props.onChange
  });
  const sliderValue = sortValue(convertValue(rawValue));
  function setSliderValue(value) {
    const next = sortValue(value);
    const current = sliderValue;
    if (next[0] === current[0] && next[1] === current[1])
      return;
    setRawValue(reverseValue(next));
  }
  const trackRef = (0, import_react220.useRef)(null);
  const fillSize = `${100 * (sliderValue[1] - sliderValue[0]) / (max3 - min3)}%`;
  const fillStart = `${100 * (sliderValue[0] - min3) / (max3 - min3)}%`;
  const pointList = (0, import_react220.useMemo)(() => {
    if (marks) {
      return Object.keys(marks).map(parseFloat).sort((a, b) => a - b);
    } else {
      const points = [];
      for (let i = min3; i <= max3; i += step) {
        points.push(i);
      }
      return points;
    }
  }, [marks, ticks, step, min3, max3]);
  function getValueByPosition(position) {
    const newPosition = position < min3 ? min3 : position > max3 ? max3 : position;
    let value = min3;
    if (pointList.length) {
      value = nearest(pointList, newPosition);
    } else {
      const lengthPerStep = 100 / ((max3 - min3) / step);
      const steps = Math.round(newPosition / lengthPerStep);
      value = steps * lengthPerStep * (max3 - min3) * 0.01 + min3;
    }
    return value;
  }
  const dragLockRef = (0, import_react220.useRef)(0);
  const onTrackClick = (event) => {
    if (dragLockRef.current > 0)
      return;
    event.stopPropagation();
    if (disabled)
      return;
    const track = trackRef.current;
    if (!track)
      return;
    const sliderOffsetLeft = track.getBoundingClientRect().left;
    const position = (event.clientX - sliderOffsetLeft) / Math.ceil(track.offsetWidth) * (max3 - min3) + min3;
    const targetValue = getValueByPosition(position);
    let nextSliderValue;
    if (props.range) {
      if (Math.abs(targetValue - sliderValue[0]) > Math.abs(targetValue - sliderValue[1])) {
        nextSliderValue = [sliderValue[0], targetValue];
      } else {
        nextSliderValue = [targetValue, sliderValue[1]];
      }
    } else {
      nextSliderValue = [props.min, targetValue];
    }
    setSliderValue(nextSliderValue);
    onAfterChange(nextSliderValue);
  };
  const valueBeforeDragRef = (0, import_react220.useRef)();
  const renderThumb = (index) => {
    return import_react220.default.createElement(thumb_default, {
      key: index,
      value: sliderValue[index],
      min: min3,
      max: max3,
      disabled,
      trackRef,
      icon,
      popover: props.popover,
      onDrag: (position, first, last) => {
        if (first) {
          dragLockRef.current += 1;
          valueBeforeDragRef.current = sliderValue;
        }
        const val = getValueByPosition(position);
        const valueBeforeDrag = valueBeforeDragRef.current;
        if (!valueBeforeDrag)
          return;
        const next = [...valueBeforeDrag];
        next[index] = val;
        setSliderValue(next);
        if (last) {
          onAfterChange(next);
          window.setTimeout(() => {
            dragLockRef.current -= 1;
          }, 100);
        }
      },
      "aria-label": props["aria-label"]
    });
  };
  return withNativeProps(props, import_react220.default.createElement("div", {
    className: (0, import_classnames57.default)(classPrefix71, {
      [`${classPrefix71}-disabled`]: disabled
    })
  }, import_react220.default.createElement("div", {
    className: `${classPrefix71}-track-container`,
    onClick: onTrackClick
  }, import_react220.default.createElement("div", {
    className: `${classPrefix71}-track`,
    onClick: onTrackClick,
    ref: trackRef
  }, import_react220.default.createElement("div", {
    className: `${classPrefix71}-fill`,
    style: {
      width: fillSize,
      left: fillStart
    }
  }), props.ticks && import_react220.default.createElement(ticks_default, {
    points: pointList,
    min: min3,
    max: max3,
    lowerBound: sliderValue[0],
    upperBound: sliderValue[1]
  }), props.range && renderThumb(0), renderThumb(1))), marks && import_react220.default.createElement(marks_default, {
    min: min3,
    max: max3,
    marks,
    lowerBound: sliderValue[0],
    upperBound: sliderValue[1]
  })));
};

// node_modules/antd-mobile/es/components/slider/index.js
var slider_default = Slider;

// node_modules/antd-mobile/es/components/stepper/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/stepper/stepper.css";

// node_modules/antd-mobile/es/components/stepper/stepper.js
var import_classnames58 = __toESM(require_classnames());
var import_react221 = __toESM(require_react());

// node_modules/big.js/big.mjs
var DP = 20;
var RM = 1;
var MAX_DP = 1e6;
var MAX_POWER = 1e6;
var NE = -7;
var PE = 21;
var STRICT = false;
var NAME = "[big.js] ";
var INVALID = NAME + "Invalid ";
var INVALID_DP = INVALID + "decimal places";
var INVALID_RM = INVALID + "rounding mode";
var DIV_BY_ZERO = NAME + "Division by zero";
var P = {};
var UNDEFINED = void 0;
var NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
function _Big_() {
  function Big2(n) {
    var x = this;
    if (!(x instanceof Big2))
      return n === UNDEFINED ? _Big_() : new Big2(n);
    if (n instanceof Big2) {
      x.s = n.s;
      x.e = n.e;
      x.c = n.c.slice();
    } else {
      if (typeof n !== "string") {
        if (Big2.strict === true && typeof n !== "bigint") {
          throw TypeError(INVALID + "value");
        }
        n = n === 0 && 1 / n < 0 ? "-0" : String(n);
      }
      parse2(x, n);
    }
    x.constructor = Big2;
  }
  Big2.prototype = P;
  Big2.DP = DP;
  Big2.RM = RM;
  Big2.NE = NE;
  Big2.PE = PE;
  Big2.strict = STRICT;
  Big2.roundDown = 0;
  Big2.roundHalfUp = 1;
  Big2.roundHalfEven = 2;
  Big2.roundUp = 3;
  return Big2;
}
function parse2(x, n) {
  var e, i, nl;
  if (!NUMERIC.test(n)) {
    throw Error(INVALID + "number");
  }
  x.s = n.charAt(0) == "-" ? (n = n.slice(1), -1) : 1;
  if ((e = n.indexOf(".")) > -1)
    n = n.replace(".", "");
  if ((i = n.search(/e/i)) > 0) {
    if (e < 0)
      e = i;
    e += +n.slice(i + 1);
    n = n.substring(0, i);
  } else if (e < 0) {
    e = n.length;
  }
  nl = n.length;
  for (i = 0; i < nl && n.charAt(i) == "0"; )
    ++i;
  if (i == nl) {
    x.c = [x.e = 0];
  } else {
    for (; nl > 0 && n.charAt(--nl) == "0"; )
      ;
    x.e = e - i - 1;
    x.c = [];
    for (e = 0; i <= nl; )
      x.c[e++] = +n.charAt(i++);
  }
  return x;
}
function round2(x, sd, rm, more) {
  var xc = x.c;
  if (rm === UNDEFINED)
    rm = x.constructor.RM;
  if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {
    throw Error(INVALID_RM);
  }
  if (sd < 1) {
    more = rm === 3 && (more || !!xc[0]) || sd === 0 && (rm === 1 && xc[0] >= 5 || rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED)));
    xc.length = 1;
    if (more) {
      x.e = x.e - sd + 1;
      xc[0] = 1;
    } else {
      xc[0] = x.e = 0;
    }
  } else if (sd < xc.length) {
    more = rm === 1 && xc[sd] >= 5 || rm === 2 && (xc[sd] > 5 || xc[sd] === 5 && (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) || rm === 3 && (more || !!xc[0]);
    xc.length = sd;
    if (more) {
      for (; ++xc[--sd] > 9; ) {
        xc[sd] = 0;
        if (sd === 0) {
          ++x.e;
          xc.unshift(1);
          break;
        }
      }
    }
    for (sd = xc.length; !xc[--sd]; )
      xc.pop();
  }
  return x;
}
function stringify(x, doExponential, isNonzero) {
  var e = x.e, s = x.c.join(""), n = s.length;
  if (doExponential) {
    s = s.charAt(0) + (n > 1 ? "." + s.slice(1) : "") + (e < 0 ? "e" : "e+") + e;
  } else if (e < 0) {
    for (; ++e; )
      s = "0" + s;
    s = "0." + s;
  } else if (e > 0) {
    if (++e > n) {
      for (e -= n; e--; )
        s += "0";
    } else if (e < n) {
      s = s.slice(0, e) + "." + s.slice(e);
    }
  } else if (n > 1) {
    s = s.charAt(0) + "." + s.slice(1);
  }
  return x.s < 0 && isNonzero ? "-" + s : s;
}
P.abs = function() {
  var x = new this.constructor(this);
  x.s = 1;
  return x;
};
P.cmp = function(y) {
  var isneg, x = this, xc = x.c, yc = (y = new x.constructor(y)).c, i = x.s, j = y.s, k = x.e, l = y.e;
  if (!xc[0] || !yc[0])
    return !xc[0] ? !yc[0] ? 0 : -j : i;
  if (i != j)
    return i;
  isneg = i < 0;
  if (k != l)
    return k > l ^ isneg ? 1 : -1;
  j = (k = xc.length) < (l = yc.length) ? k : l;
  for (i = -1; ++i < j; ) {
    if (xc[i] != yc[i])
      return xc[i] > yc[i] ^ isneg ? 1 : -1;
  }
  return k == l ? 0 : k > l ^ isneg ? 1 : -1;
};
P.div = function(y) {
  var x = this, Big2 = x.constructor, a = x.c, b = (y = new Big2(y)).c, k = x.s == y.s ? 1 : -1, dp = Big2.DP;
  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
    throw Error(INVALID_DP);
  }
  if (!b[0]) {
    throw Error(DIV_BY_ZERO);
  }
  if (!a[0]) {
    y.s = k;
    y.c = [y.e = 0];
    return y;
  }
  var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), rl = r.length, q = y, qc = q.c = [], qi = 0, p = dp + (q.e = x.e - y.e) + 1;
  q.s = k;
  k = p < 0 ? 0 : p;
  bz.unshift(0);
  for (; rl++ < bl; )
    r.push(0);
  do {
    for (n = 0; n < 10; n++) {
      if (bl != (rl = r.length)) {
        cmp = bl > rl ? 1 : -1;
      } else {
        for (ri = -1, cmp = 0; ++ri < bl; ) {
          if (b[ri] != r[ri]) {
            cmp = b[ri] > r[ri] ? 1 : -1;
            break;
          }
        }
      }
      if (cmp < 0) {
        for (bt = rl == bl ? b : bz; rl; ) {
          if (r[--rl] < bt[rl]) {
            ri = rl;
            for (; ri && !r[--ri]; )
              r[ri] = 9;
            --r[ri];
            r[rl] += 10;
          }
          r[rl] -= bt[rl];
        }
        for (; !r[0]; )
          r.shift();
      } else {
        break;
      }
    }
    qc[qi++] = cmp ? n : ++n;
    if (r[0] && cmp)
      r[rl] = a[ai] || 0;
    else
      r = [a[ai]];
  } while ((ai++ < al || r[0] !== UNDEFINED) && k--);
  if (!qc[0] && qi != 1) {
    qc.shift();
    q.e--;
    p--;
  }
  if (qi > p)
    round2(q, p, Big2.RM, r[0] !== UNDEFINED);
  return q;
};
P.eq = function(y) {
  return this.cmp(y) === 0;
};
P.gt = function(y) {
  return this.cmp(y) > 0;
};
P.gte = function(y) {
  return this.cmp(y) > -1;
};
P.lt = function(y) {
  return this.cmp(y) < 0;
};
P.lte = function(y) {
  return this.cmp(y) < 1;
};
P.minus = P.sub = function(y) {
  var i, j, t, xlty, x = this, Big2 = x.constructor, a = x.s, b = (y = new Big2(y)).s;
  if (a != b) {
    y.s = -b;
    return x.plus(y);
  }
  var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;
  if (!xc[0] || !yc[0]) {
    if (yc[0]) {
      y.s = -b;
    } else if (xc[0]) {
      y = new Big2(x);
    } else {
      y.s = 1;
    }
    return y;
  }
  if (a = xe - ye) {
    if (xlty = a < 0) {
      a = -a;
      t = xc;
    } else {
      ye = xe;
      t = yc;
    }
    t.reverse();
    for (b = a; b--; )
      t.push(0);
    t.reverse();
  } else {
    j = ((xlty = xc.length < yc.length) ? xc : yc).length;
    for (a = b = 0; b < j; b++) {
      if (xc[b] != yc[b]) {
        xlty = xc[b] < yc[b];
        break;
      }
    }
  }
  if (xlty) {
    t = xc;
    xc = yc;
    yc = t;
    y.s = -y.s;
  }
  if ((b = (j = yc.length) - (i = xc.length)) > 0)
    for (; b--; )
      xc[i++] = 0;
  for (b = i; j > a; ) {
    if (xc[--j] < yc[j]) {
      for (i = j; i && !xc[--i]; )
        xc[i] = 9;
      --xc[i];
      xc[j] += 10;
    }
    xc[j] -= yc[j];
  }
  for (; xc[--b] === 0; )
    xc.pop();
  for (; xc[0] === 0; ) {
    xc.shift();
    --ye;
  }
  if (!xc[0]) {
    y.s = 1;
    xc = [ye = 0];
  }
  y.c = xc;
  y.e = ye;
  return y;
};
P.mod = function(y) {
  var ygtx, x = this, Big2 = x.constructor, a = x.s, b = (y = new Big2(y)).s;
  if (!y.c[0]) {
    throw Error(DIV_BY_ZERO);
  }
  x.s = y.s = 1;
  ygtx = y.cmp(x) == 1;
  x.s = a;
  y.s = b;
  if (ygtx)
    return new Big2(x);
  a = Big2.DP;
  b = Big2.RM;
  Big2.DP = Big2.RM = 0;
  x = x.div(y);
  Big2.DP = a;
  Big2.RM = b;
  return this.minus(x.times(y));
};
P.neg = function() {
  var x = new this.constructor(this);
  x.s = -x.s;
  return x;
};
P.plus = P.add = function(y) {
  var e, k, t, x = this, Big2 = x.constructor;
  y = new Big2(y);
  if (x.s != y.s) {
    y.s = -y.s;
    return x.minus(y);
  }
  var xe = x.e, xc = x.c, ye = y.e, yc = y.c;
  if (!xc[0] || !yc[0]) {
    if (!yc[0]) {
      if (xc[0]) {
        y = new Big2(x);
      } else {
        y.s = x.s;
      }
    }
    return y;
  }
  xc = xc.slice();
  if (e = xe - ye) {
    if (e > 0) {
      ye = xe;
      t = yc;
    } else {
      e = -e;
      t = xc;
    }
    t.reverse();
    for (; e--; )
      t.push(0);
    t.reverse();
  }
  if (xc.length - yc.length < 0) {
    t = yc;
    yc = xc;
    xc = t;
  }
  e = yc.length;
  for (k = 0; e; xc[e] %= 10)
    k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;
  if (k) {
    xc.unshift(k);
    ++ye;
  }
  for (e = xc.length; xc[--e] === 0; )
    xc.pop();
  y.c = xc;
  y.e = ye;
  return y;
};
P.pow = function(n) {
  var x = this, one = new x.constructor("1"), y = one, isneg = n < 0;
  if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {
    throw Error(INVALID + "exponent");
  }
  if (isneg)
    n = -n;
  for (; ; ) {
    if (n & 1)
      y = y.times(x);
    n >>= 1;
    if (!n)
      break;
    x = x.times(x);
  }
  return isneg ? one.div(y) : y;
};
P.prec = function(sd, rm) {
  if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
    throw Error(INVALID + "precision");
  }
  return round2(new this.constructor(this), sd, rm);
};
P.round = function(dp, rm) {
  if (dp === UNDEFINED)
    dp = 0;
  else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {
    throw Error(INVALID_DP);
  }
  return round2(new this.constructor(this), dp + this.e + 1, rm);
};
P.sqrt = function() {
  var r, c, t, x = this, Big2 = x.constructor, s = x.s, e = x.e, half = new Big2("0.5");
  if (!x.c[0])
    return new Big2(x);
  if (s < 0) {
    throw Error(NAME + "No square root");
  }
  s = Math.sqrt(x + "");
  if (s === 0 || s === 1 / 0) {
    c = x.c.join("");
    if (!(c.length + e & 1))
      c += "0";
    s = Math.sqrt(c);
    e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);
    r = new Big2((s == 1 / 0 ? "5e" : (s = s.toExponential()).slice(0, s.indexOf("e") + 1)) + e);
  } else {
    r = new Big2(s + "");
  }
  e = r.e + (Big2.DP += 4);
  do {
    t = r;
    r = half.times(t.plus(x.div(t)));
  } while (t.c.slice(0, e).join("") !== r.c.slice(0, e).join(""));
  return round2(r, (Big2.DP -= 4) + r.e + 1, Big2.RM);
};
P.times = P.mul = function(y) {
  var c, x = this, Big2 = x.constructor, xc = x.c, yc = (y = new Big2(y)).c, a = xc.length, b = yc.length, i = x.e, j = y.e;
  y.s = x.s == y.s ? 1 : -1;
  if (!xc[0] || !yc[0]) {
    y.c = [y.e = 0];
    return y;
  }
  y.e = i + j;
  if (a < b) {
    c = xc;
    xc = yc;
    yc = c;
    j = a;
    a = b;
    b = j;
  }
  for (c = new Array(j = a + b); j--; )
    c[j] = 0;
  for (i = b; i--; ) {
    b = 0;
    for (j = a + i; j > i; ) {
      b = c[j] + yc[i] * xc[j - i - 1] + b;
      c[j--] = b % 10;
      b = b / 10 | 0;
    }
    c[j] = b;
  }
  if (b)
    ++y.e;
  else
    c.shift();
  for (i = c.length; !c[--i]; )
    c.pop();
  y.c = c;
  return y;
};
P.toExponential = function(dp, rm) {
  var x = this, n = x.c[0];
  if (dp !== UNDEFINED) {
    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
      throw Error(INVALID_DP);
    }
    x = round2(new x.constructor(x), ++dp, rm);
    for (; x.c.length < dp; )
      x.c.push(0);
  }
  return stringify(x, true, !!n);
};
P.toFixed = function(dp, rm) {
  var x = this, n = x.c[0];
  if (dp !== UNDEFINED) {
    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
      throw Error(INVALID_DP);
    }
    x = round2(new x.constructor(x), dp + x.e + 1, rm);
    for (dp = dp + x.e + 1; x.c.length < dp; )
      x.c.push(0);
  }
  return stringify(x, false, !!n);
};
P[Symbol.for("nodejs.util.inspect.custom")] = P.toJSON = P.toString = function() {
  var x = this, Big2 = x.constructor;
  return stringify(x, x.e <= Big2.NE || x.e >= Big2.PE, !!x.c[0]);
};
P.toNumber = function() {
  var n = Number(stringify(this, true, true));
  if (this.constructor.strict === true && !this.eq(n.toString())) {
    throw Error(NAME + "Imprecise conversion");
  }
  return n;
};
P.toPrecision = function(sd, rm) {
  var x = this, Big2 = x.constructor, n = x.c[0];
  if (sd !== UNDEFINED) {
    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
      throw Error(INVALID + "precision");
    }
    x = round2(new Big2(x), sd, rm);
    for (; x.c.length < sd; )
      x.c.push(0);
  }
  return stringify(x, sd <= x.e || x.e <= Big2.NE || x.e >= Big2.PE, !!n);
};
P.valueOf = function() {
  var x = this, Big2 = x.constructor;
  if (Big2.strict === true) {
    throw Error(NAME + "valueOf disallowed");
  }
  return stringify(x, x.e <= Big2.NE || x.e >= Big2.PE, true);
};
var Big = _Big_();
var big_default = Big;

// node_modules/antd-mobile/es/components/stepper/stepper.js
var classPrefix72 = `adm-stepper`;
var defaultProps55 = {
  defaultValue: 0,
  step: 1,
  disabled: false,
  allowEmpty: false
};
var Stepper = (p) => {
  const props = mergeProps(defaultProps55, p);
  const {
    disabled,
    step,
    max: max3,
    min: min3,
    inputReadOnly
  } = props;
  const {
    locale
  } = useConfig();
  const [value, setValue] = usePropsValue(props);
  const [inputValue, setInputValue] = (0, import_react221.useState)(() => convertValueToText(value, props.digits));
  function setValueWithCheck(v) {
    if (isNaN(v))
      return;
    let target = bound(v, props.min, props.max);
    if (props.digits !== void 0) {
      target = parseFloat(target.toFixed(props.digits));
    }
    setValue(target);
  }
  const [hasFocus, setHasFocus] = (0, import_react221.useState)(false);
  (0, import_react221.useEffect)(() => {
    if (!hasFocus) {
      setInputValue(convertValueToText(value, props.digits));
    }
  }, [hasFocus]);
  (0, import_react221.useEffect)(() => {
    if (!hasFocus) {
      setInputValue(convertValueToText(value, props.digits));
    }
  }, [value, props.digits]);
  const handleInputChange = (v) => {
    setInputValue(v);
    const value2 = convertTextToValue(v);
    if (value2 === null) {
      if (props.allowEmpty) {
        setValue(null);
      } else {
        setValue(props.defaultValue);
      }
    } else {
      setValueWithCheck(value2);
    }
  };
  const handleMinus = () => {
    setValueWithCheck(big_default(value !== null && value !== void 0 ? value : 0).minus(step).toNumber());
  };
  const handlePlus = () => {
    setValueWithCheck(big_default(value !== null && value !== void 0 ? value : 0).add(step).toNumber());
  };
  const minusDisabled = () => {
    if (disabled)
      return true;
    if (value === null)
      return false;
    if (min3 !== void 0) {
      return value <= min3;
    }
    return false;
  };
  const plusDisabled = () => {
    if (disabled)
      return true;
    if (value === null)
      return false;
    if (max3 !== void 0) {
      return value >= max3;
    }
    return false;
  };
  return withNativeProps(props, import_react221.default.createElement("div", {
    className: (0, import_classnames58.default)(classPrefix72, {
      [`${classPrefix72}-active`]: hasFocus
    })
  }, import_react221.default.createElement(button_default, {
    className: `${classPrefix72}-minus`,
    onClick: handleMinus,
    disabled: minusDisabled(),
    fill: "none",
    shape: "rectangular",
    color: "primary",
    "aria-label": locale.Stepper.decrease
  }, import_react221.default.createElement(MinusOutline_default, null)), import_react221.default.createElement("div", {
    className: `${classPrefix72}-middle`
  }, import_react221.default.createElement(input_default, {
    className: `${classPrefix72}-input`,
    onFocus: (e) => {
      var _a;
      setHasFocus(true);
      (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, e);
    },
    value: inputValue,
    onChange: (val) => {
      disabled || handleInputChange(val);
    },
    disabled,
    onBlur: (e) => {
      var _a;
      setHasFocus(false);
      (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props, e);
    },
    readOnly: inputReadOnly,
    role: "spinbutton",
    "aria-valuenow": Number(inputValue),
    "aria-valuemax": max3,
    "aria-valuemin": min3
  })), import_react221.default.createElement(button_default, {
    className: `${classPrefix72}-plus`,
    onClick: handlePlus,
    disabled: plusDisabled(),
    fill: "none",
    shape: "rectangular",
    color: "primary",
    "aria-label": locale.Stepper.increase
  }, import_react221.default.createElement(AddOutline_default, null))));
};
function convertValueToText(value, digits) {
  if (value === null)
    return "";
  if (digits !== void 0) {
    return value.toFixed(digits);
  } else {
    return value.toString();
  }
}
function convertTextToValue(text) {
  if (text === "")
    return null;
  return parseFloat(text);
}

// node_modules/antd-mobile/es/components/stepper/index.js
var stepper_default = Stepper;

// node_modules/antd-mobile/es/components/steps/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/steps/steps.css";

// node_modules/antd-mobile/es/components/steps/step.js
var import_react222 = __toESM(require_react());
var import_classnames59 = __toESM(require_classnames());
var classPrefix73 = `adm-step`;
var Step = (props) => {
  const {
    title,
    description,
    icon,
    status = "wait"
  } = props;
  return withNativeProps(props, import_react222.default.createElement("div", {
    className: (0, import_classnames59.default)(`${classPrefix73}`, `${classPrefix73}-status-${status}`)
  }, import_react222.default.createElement("div", {
    className: `${classPrefix73}-indicator`
  }, import_react222.default.createElement("div", {
    className: `${classPrefix73}-icon-container`
  }, icon)), import_react222.default.createElement("div", {
    className: `${classPrefix73}-content`
  }, import_react222.default.createElement("div", {
    className: `${classPrefix73}-title`
  }, title), !!description && import_react222.default.createElement("div", {
    className: `${classPrefix73}-description`
  }, description))));
};

// node_modules/antd-mobile/es/components/steps/steps.js
var import_react223 = __toESM(require_react());
var import_classnames60 = __toESM(require_classnames());
var classPrefix74 = `adm-steps`;
var stepClassPrefix = `adm-step`;
var defaultIcon = import_react223.default.createElement("span", {
  className: `${stepClassPrefix}-icon-dot`
});
var defaultProps56 = {
  current: 0,
  direction: "horizontal"
};
var Steps = (p) => {
  const props = mergeProps(defaultProps56, p);
  const {
    direction,
    current
  } = props;
  const classString = (0, import_classnames60.default)(classPrefix74, `${classPrefix74}-${direction}`);
  return withNativeProps(props, import_react223.default.createElement("div", {
    className: classString
  }, import_react223.default.Children.map(props.children, (child, index) => {
    var _a;
    if (!import_react223.default.isValidElement(child)) {
      return child;
    }
    const props2 = child.props;
    let status = props2.status || "wait";
    if (index < current) {
      status = props2.status || "finish";
    } else if (index === current) {
      status = props2.status || "process";
    }
    const icon = (_a = props2.icon) !== null && _a !== void 0 ? _a : defaultIcon;
    return import_react223.default.cloneElement(child, {
      status,
      icon
    });
  })));
};

// node_modules/antd-mobile/es/components/steps/index.js
var steps_default = attachPropertiesToComponent(Steps, {
  Step
});

// node_modules/antd-mobile/es/components/swipe-action/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/swipe-action/swipe-action.css";

// node_modules/antd-mobile/es/components/swipe-action/swipe-action.js
var import_react224 = __toESM(require_react());
var classPrefix75 = `adm-swipe-action`;
var defaultProps57 = {
  rightActions: [],
  leftActions: [],
  closeOnTouchOutside: true,
  closeOnAction: true,
  stopPropagation: []
};
var SwipeAction = (0, import_react224.forwardRef)((p, ref) => {
  const props = mergeProps(defaultProps57, p);
  const rootRef = (0, import_react224.useRef)(null);
  const leftRef = (0, import_react224.useRef)(null);
  const rightRef = (0, import_react224.useRef)(null);
  function getWidth(ref2) {
    const element = ref2.current;
    if (!element)
      return 0;
    return element.offsetWidth;
  }
  function getLeftWidth() {
    return getWidth(leftRef);
  }
  function getRightWidth() {
    return getWidth(rightRef);
  }
  const [{
    x
  }, api] = useSpring(() => ({
    x: 0,
    config: {
      tension: 200,
      friction: 30
    }
  }), []);
  const draggingRef = (0, import_react224.useRef)(false);
  const dragCancelRef = (0, import_react224.useRef)(null);
  function forceCancelDrag() {
    var _a;
    (_a = dragCancelRef.current) === null || _a === void 0 ? void 0 : _a.call(dragCancelRef);
    draggingRef.current = false;
  }
  const bind = useDrag((state) => {
    var _a;
    dragCancelRef.current = state.cancel;
    if (!state.intentional)
      return;
    if (state.down) {
      draggingRef.current = true;
    }
    if (!draggingRef.current)
      return;
    const [offsetX] = state.offset;
    if (state.last) {
      const leftWidth = getLeftWidth();
      const rightWidth = getRightWidth();
      let position = offsetX + state.velocity[0] * state.direction[0] * 50;
      if (offsetX > 0) {
        position = Math.max(0, position);
      } else if (offsetX < 0) {
        position = Math.min(0, position);
      } else {
        position = 0;
      }
      const targetX = nearest([-rightWidth, 0, leftWidth], position);
      api.start({
        x: targetX
      });
      if (targetX !== 0) {
        (_a = p.onActionsReveal) === null || _a === void 0 ? void 0 : _a.call(p, targetX > 0 ? "left" : "right");
      }
      window.setTimeout(() => {
        draggingRef.current = false;
      });
    } else {
      api.start({
        x: offsetX,
        immediate: true
      });
    }
  }, {
    from: () => [x.get(), 0],
    bounds: () => {
      const leftWidth = getLeftWidth();
      const rightWidth = getRightWidth();
      return {
        left: -rightWidth,
        right: leftWidth
      };
    },
    axis: "x",
    preventScroll: true,
    pointer: {
      touch: true
    },
    triggerAllEvents: true
  });
  function close() {
    api.start({
      x: 0
    });
    forceCancelDrag();
  }
  (0, import_react224.useImperativeHandle)(ref, () => ({
    show: (side = "right") => {
      var _a;
      if (side === "right") {
        api.start({
          x: -getRightWidth()
        });
      } else if (side === "left") {
        api.start({
          x: getLeftWidth()
        });
      }
      (_a = p.onActionsReveal) === null || _a === void 0 ? void 0 : _a.call(p, side);
    },
    close
  }));
  (0, import_react224.useEffect)(() => {
    if (!props.closeOnTouchOutside)
      return;
    function handle(e) {
      if (x.get() === 0) {
        return;
      }
      const root = rootRef.current;
      if (root && !root.contains(e.target)) {
        close();
      }
    }
    document.addEventListener("touchstart", handle);
    return () => {
      document.removeEventListener("touchstart", handle);
    };
  }, [props.closeOnTouchOutside]);
  function renderAction(action) {
    var _a, _b;
    const color = (_a = action.color) !== null && _a !== void 0 ? _a : "light";
    return import_react224.default.createElement(button_default, {
      key: action.key,
      className: `${classPrefix75}-action-button`,
      style: {
        "--background-color": (_b = colorRecord3[color]) !== null && _b !== void 0 ? _b : color
      },
      onClick: (e) => {
        var _a2, _b2;
        if (props.closeOnAction) {
          close();
        }
        (_a2 = action.onClick) === null || _a2 === void 0 ? void 0 : _a2.call(action, e);
        (_b2 = props.onAction) === null || _b2 === void 0 ? void 0 : _b2.call(props, action, e);
      }
    }, action.text);
  }
  return withNativeProps(props, import_react224.default.createElement("div", Object.assign({
    className: classPrefix75
  }, bind(), {
    ref: rootRef,
    onClickCapture: (e) => {
      if (draggingRef.current) {
        e.stopPropagation();
        e.preventDefault();
      }
    }
  }), import_react224.default.createElement(animated.div, {
    className: `${classPrefix75}-track`,
    style: {
      x
    }
  }, withStopPropagation(props.stopPropagation, import_react224.default.createElement("div", {
    className: `${classPrefix75}-actions ${classPrefix75}-actions-left`,
    ref: leftRef
  }, props.leftActions.map(renderAction))), import_react224.default.createElement("div", {
    className: `${classPrefix75}-content`,
    onClickCapture: (e) => {
      if (x.goal !== 0) {
        e.preventDefault();
        e.stopPropagation();
        close();
      }
    }
  }, import_react224.default.createElement(animated.div, {
    style: {
      pointerEvents: x.to((v) => v !== 0 && x.goal !== 0 ? "none" : "auto")
    }
  }, props.children)), withStopPropagation(props.stopPropagation, import_react224.default.createElement("div", {
    className: `${classPrefix75}-actions ${classPrefix75}-actions-right`,
    ref: rightRef
  }, props.rightActions.map(renderAction))))));
});
var colorRecord3 = {
  light: "var(--adm-color-light)",
  weak: "var(--adm-color-weak)",
  primary: "var(--adm-color-primary)",
  success: "var(--adm-color-success)",
  warning: "var(--adm-color-warning)",
  danger: "var(--adm-color-danger)"
};

// node_modules/antd-mobile/es/components/swipe-action/index.js
var swipe_action_default = SwipeAction;

// node_modules/antd-mobile/es/components/swiper/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/swiper/swiper.css";

// node_modules/antd-mobile/es/components/swiper/swiper.js
var import_react228 = __toESM(require_react());
var import_classnames61 = __toESM(require_classnames());

// node_modules/antd-mobile/es/components/swiper/swiper-item.js
var import_react226 = __toESM(require_react());
var SwiperItem = (props) => {
  return withNativeProps(props, import_react226.default.createElement("div", {
    className: "adm-swiper-item",
    onClick: props.onClick
  }, props.children));
};

// node_modules/antd-mobile/es/components/swiper/swiper.js
var import_staged_components2 = __toESM(require_staged_components());

// node_modules/antd-mobile/es/utils/use-ref-state.js
var import_react227 = __toESM(require_react());
function useRefState(initialState) {
  const [state, setState] = (0, import_react227.useState)(initialState);
  const ref = (0, import_react227.useRef)(state);
  (0, import_react227.useEffect)(() => {
    ref.current = state;
  }, [state]);
  return [state, setState, ref];
}

// node_modules/antd-mobile/es/components/swiper/swiper.js
var classPrefix76 = `adm-swiper`;
var defaultProps58 = {
  defaultIndex: 0,
  allowTouchMove: true,
  autoplay: false,
  autoplayInterval: 3e3,
  loop: false,
  direction: "horizontal",
  slideSize: 100,
  trackOffset: 0,
  stuckAtBoundary: true,
  rubberband: true
};
var Swiper = (0, import_react228.forwardRef)((0, import_staged_components2.staged)((p, ref) => {
  const props = mergeProps(defaultProps58, p);
  const isVertical = props.direction === "vertical";
  const slideRatio = props.slideSize / 100;
  const offsetRatio = props.trackOffset / 100;
  const {
    validChildren,
    count
  } = (0, import_react228.useMemo)(() => {
    let count2 = 0;
    const validChildren2 = import_react228.default.Children.map(props.children, (child) => {
      if (!import_react228.default.isValidElement(child))
        return null;
      if (child.type !== SwiperItem) {
        devWarning("Swiper", "The children of `Swiper` must be `Swiper.Item` components.");
        return null;
      }
      count2++;
      return child;
    });
    return {
      validChildren: validChildren2,
      count: count2
    };
  }, [props.children]);
  if (count === 0 || !validChildren) {
    devWarning("Swiper", "`Swiper` needs at least one child.");
    return null;
  }
  return () => {
    let loop2 = props.loop;
    if (slideRatio * (count - 1) < 1) {
      loop2 = false;
    }
    const trackRef = (0, import_react228.useRef)(null);
    function getSlidePixels() {
      const track = trackRef.current;
      if (!track)
        return 0;
      const trackPixels = isVertical ? track.offsetHeight : track.offsetWidth;
      return trackPixels * props.slideSize / 100;
    }
    const [current, setCurrent] = (0, import_react228.useState)(props.defaultIndex);
    useUpdateEffect_default(() => {
      var _a;
      (_a = props.onIndexChange) === null || _a === void 0 ? void 0 : _a.call(props, current);
    }, [current]);
    const [dragging, setDragging, draggingRef] = useRefState(false);
    function boundIndex(current2) {
      let min3 = 0;
      let max3 = count - 1;
      if (props.stuckAtBoundary) {
        min3 += offsetRatio / slideRatio;
        max3 -= (1 - slideRatio - offsetRatio) / slideRatio;
      }
      return bound(current2, min3, max3);
    }
    const [{
      position
    }, api] = useSpring(() => ({
      position: boundIndex(current) * 100,
      config: {
        tension: 200,
        friction: 30
      },
      onRest: () => {
        if (draggingRef.current)
          return;
        if (!loop2)
          return;
        const rawX = position.get();
        const totalWidth = 100 * count;
        const standardPosition = modulus(rawX, totalWidth);
        if (standardPosition === rawX)
          return;
        api.start({
          position: standardPosition,
          immediate: true
        });
      }
    }), [count]);
    const dragCancelRef = (0, import_react228.useRef)(null);
    function forceCancelDrag() {
      var _a;
      (_a = dragCancelRef.current) === null || _a === void 0 ? void 0 : _a.call(dragCancelRef);
      draggingRef.current = false;
    }
    const bind = useDrag((state) => {
      dragCancelRef.current = state.cancel;
      if (!state.intentional)
        return;
      const slidePixels = getSlidePixels();
      if (!slidePixels)
        return;
      const paramIndex = isVertical ? 1 : 0;
      const offset2 = state.offset[paramIndex];
      const direction = state.direction[paramIndex];
      const velocity = state.velocity[paramIndex];
      setDragging(true);
      if (!state.last) {
        api.start({
          position: offset2 * 100 / slidePixels,
          immediate: true
        });
      } else {
        const minIndex = Math.floor(offset2 / slidePixels);
        const maxIndex = minIndex + 1;
        const index = Math.round((offset2 + velocity * 2e3 * direction) / slidePixels);
        swipeTo(bound(index, minIndex, maxIndex));
        window.setTimeout(() => {
          setDragging(false);
        });
      }
    }, {
      transform: ([x, y]) => [-x, -y],
      from: () => {
        const slidePixels = getSlidePixels();
        return [position.get() / 100 * slidePixels, position.get() / 100 * slidePixels];
      },
      triggerAllEvents: true,
      bounds: () => {
        if (loop2)
          return {};
        const slidePixels = getSlidePixels();
        const lowerBound = boundIndex(0) * slidePixels;
        const upperBound = boundIndex(count - 1) * slidePixels;
        return isVertical ? {
          top: lowerBound,
          bottom: upperBound
        } : {
          left: lowerBound,
          right: upperBound
        };
      },
      rubberband: props.rubberband,
      axis: isVertical ? "y" : "x",
      preventScroll: !isVertical,
      pointer: {
        touch: true
      }
    });
    function swipeTo(index, immediate = false) {
      const roundedIndex = Math.round(index);
      const targetIndex = loop2 ? modulus(roundedIndex, count) : bound(roundedIndex, 0, count - 1);
      setCurrent(targetIndex);
      api.start({
        position: (loop2 ? roundedIndex : boundIndex(roundedIndex)) * 100,
        immediate
      });
    }
    function swipeNext() {
      swipeTo(Math.round(position.get() / 100) + 1);
    }
    function swipePrev() {
      swipeTo(Math.round(position.get() / 100) - 1);
    }
    (0, import_react228.useImperativeHandle)(ref, () => ({
      swipeTo,
      swipeNext,
      swipePrev
    }));
    useIsomorphicLayoutEffect_default(() => {
      const maxIndex = validChildren.length - 1;
      if (current > maxIndex) {
        swipeTo(maxIndex, true);
      }
    });
    const {
      autoplay,
      autoplayInterval
    } = props;
    (0, import_react228.useEffect)(() => {
      if (!autoplay || dragging)
        return;
      const interval = window.setInterval(() => {
        swipeNext();
      }, autoplayInterval);
      return () => {
        window.clearInterval(interval);
      };
    }, [autoplay, autoplayInterval, dragging, count]);
    function renderTrackInner() {
      if (loop2) {
        return import_react228.default.createElement("div", {
          className: `${classPrefix76}-track-inner`
        }, import_react228.default.Children.map(validChildren, (child, index) => {
          return import_react228.default.createElement(animated.div, {
            className: `${classPrefix76}-slide`,
            style: {
              [isVertical ? "y" : "x"]: position.to((position2) => {
                let finalPosition = -position2 + index * 100;
                const totalWidth = count * 100;
                const flagWidth = totalWidth / 2;
                finalPosition = modulus(finalPosition + flagWidth, totalWidth) - flagWidth;
                return `${finalPosition}%`;
              }),
              [isVertical ? "top" : "left"]: `-${index * 100}%`
            }
          }, child);
        }));
      } else {
        return import_react228.default.createElement(animated.div, {
          className: `${classPrefix76}-track-inner`,
          style: {
            [isVertical ? "y" : "x"]: position.to((position2) => `${-position2}%`)
          }
        }, import_react228.default.Children.map(validChildren, (child) => {
          return import_react228.default.createElement("div", {
            className: `${classPrefix76}-slide`
          }, child);
        }));
      }
    }
    const style = {
      "--slide-size": `${props.slideSize}%`,
      "--track-offset": `${props.trackOffset}%`
    };
    return withNativeProps(props, import_react228.default.createElement("div", {
      className: (0, import_classnames61.default)(classPrefix76, `${classPrefix76}-${props.direction}`),
      style
    }, import_react228.default.createElement("div", Object.assign({
      ref: trackRef,
      className: (0, import_classnames61.default)(`${classPrefix76}-track`, {
        [`${classPrefix76}-track-allow-touch-move`]: props.allowTouchMove
      }),
      onClickCapture: (e) => {
        if (draggingRef.current) {
          e.stopPropagation();
        }
        forceCancelDrag();
      }
    }, props.allowTouchMove ? bind() : {}), renderTrackInner()), props.indicator === void 0 ? import_react228.default.createElement("div", {
      className: `${classPrefix76}-indicator`
    }, import_react228.default.createElement(page_indicator_default, Object.assign({}, props.indicatorProps, {
      total: count,
      current,
      direction: props.direction
    }))) : props.indicator(count, current)));
  };
}));
function modulus(value, division) {
  const remainder = value % division;
  return remainder < 0 ? remainder + division : remainder;
}

// node_modules/antd-mobile/es/components/swiper/index.js
var swiper_default = attachPropertiesToComponent(Swiper, {
  Item: SwiperItem
});

// node_modules/antd-mobile/es/components/switch/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/switch/switch.css";

// node_modules/antd-mobile/es/components/switch/switch.js
var import_classnames62 = __toESM(require_classnames());
var import_react231 = __toESM(require_react());

// node_modules/antd-mobile/es/components/switch/spin-icon.js
var import_react230 = __toESM(require_react());
var SpinIcon = (0, import_react230.memo)((props) => {
  return withNativeProps(props, import_react230.default.createElement("svg", {
    width: "28px",
    height: "28px",
    viewBox: "0 0 28 28"
  }, import_react230.default.createElement("g", {
    stroke: "none",
    strokeWidth: "1",
    fill: "none",
    fillRule: "evenodd"
  }, import_react230.default.createElement("g", {
    transform: "translate(-137.000000, -840.000000)",
    fill: "#1576FE"
  }, import_react230.default.createElement("g", {
    transform: "translate(80.000000, 823.000000)"
  }, import_react230.default.createElement("g", {
    transform: "translate(53.000000, 13.000000)"
  }, import_react230.default.createElement("path", {
    d: "M17.9996753,31.5 C10.5556724,31.5 4.5,25.4443275 4.5,18.0003247 C4.5,10.5563219 10.5556724,4.5 17.9996753,4.5 C18.5355492,4.5 18.9702974,4.93474816 18.9702974,5.47062208 C18.9702974,6.006496 18.5355492,6.44124416 17.9996753,6.44124416 C11.6261524,6.44124416 6.44124416,11.6267709 6.44124416,18.0002938 C6.44124416,24.3738167 11.6261524,29.5587249 17.9996753,29.5587249 C24.3731982,29.5587249 29.5587249,24.3738167 29.5587249,18.0002938 C29.5587249,14.7964616 28.2778291,11.8169616 25.9523687,9.61220279 C25.5637302,9.24317094 25.5473089,8.62893223 25.9157222,8.23967523 C26.2841356,7.84976878 26.8989928,7.83461537 27.2882498,8.20302872 C30.0042351,10.7787368 31.5,14.2580826 31.5,18.0002938 C31.5,25.4443275 25.4436781,31.5 17.9996753,31.5 Z"
  })))))));
});

// node_modules/antd-mobile/es/components/switch/switch.js
var classPrefix77 = `adm-switch`;
var defaultProps59 = {
  defaultChecked: false
};
var Switch = (p) => {
  const props = mergeProps(defaultProps59, p);
  const disabled = props.disabled || props.loading || false;
  const [changing, setChanging] = (0, import_react231.useState)(false);
  const {
    locale
  } = useConfig();
  const [checked, setChecked] = usePropsValue({
    value: props.checked,
    defaultValue: props.defaultChecked,
    onChange: props.onChange
  });
  function onClick() {
    return __awaiter(this, void 0, void 0, function* () {
      if (disabled || props.loading || changing) {
        return;
      }
      const nextChecked = !checked;
      if (props.beforeChange) {
        setChanging(true);
        try {
          yield props.beforeChange(nextChecked);
          setChanging(false);
        } catch (e) {
          setChanging(false);
          throw e;
        }
      }
      const result = setChecked(nextChecked);
      if (isPromise(result)) {
        setChanging(true);
        try {
          yield result;
          setChanging(false);
        } catch (e) {
          setChanging(false);
          throw e;
        }
      }
    });
  }
  return withNativeProps(props, import_react231.default.createElement("div", {
    onClick,
    className: (0, import_classnames62.default)(classPrefix77, {
      [`${classPrefix77}-checked`]: checked,
      [`${classPrefix77}-disabled`]: disabled || changing
    }),
    role: "switch",
    "aria-label": locale.Switch.name,
    "aria-checked": checked,
    "aria-disabled": disabled
  }, import_react231.default.createElement("div", {
    className: `${classPrefix77}-checkbox`
  }, import_react231.default.createElement("div", {
    className: `${classPrefix77}-handle`
  }, (props.loading || changing) && import_react231.default.createElement(SpinIcon, {
    className: `${classPrefix77}-spin-icon`
  })), import_react231.default.createElement("div", {
    className: `${classPrefix77}-inner`
  }, checked ? props.checkedText : props.uncheckedText))));
};

// node_modules/antd-mobile/es/components/switch/index.js
var switch_default = Switch;

// node_modules/antd-mobile/es/components/tab-bar/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/tab-bar/tab-bar.css";

// node_modules/antd-mobile/es/components/tab-bar/tab-bar.js
var import_react232 = __toESM(require_react());
var import_classnames63 = __toESM(require_classnames());
var TabBarItem = () => {
  return null;
};
var classPrefix78 = `adm-tab-bar`;
var defaultProps60 = {
  safeArea: false
};
var TabBar = (p) => {
  var _a;
  const props = mergeProps(defaultProps60, p);
  let firstActiveKey = null;
  const items = [];
  traverseReactNode(props.children, (child, index) => {
    if (!import_react232.default.isValidElement(child))
      return;
    const key = child.key;
    if (typeof key !== "string")
      return;
    if (index === 0) {
      firstActiveKey = key;
    }
    items.push(child);
  });
  const [activeKey, setActiveKey] = usePropsValue({
    value: props.activeKey,
    defaultValue: (_a = props.defaultActiveKey) !== null && _a !== void 0 ? _a : firstActiveKey,
    onChange: (v) => {
      var _a2;
      if (v === null)
        return;
      (_a2 = props.onChange) === null || _a2 === void 0 ? void 0 : _a2.call(props, v);
    }
  });
  return withNativeProps(props, import_react232.default.createElement("div", {
    className: classPrefix78
  }, import_react232.default.createElement("div", {
    className: `${classPrefix78}-wrap`
  }, items.map((item) => {
    const active = item.key === activeKey;
    function renderContent() {
      const iconElement = item.props.icon && import_react232.default.createElement("div", {
        className: `${classPrefix78}-item-icon`
      }, typeof item.props.icon === "function" ? item.props.icon(active) : item.props.icon);
      const titleElement = item.props.title && import_react232.default.createElement("div", {
        className: (0, import_classnames63.default)(`${classPrefix78}-item-title`, Boolean(iconElement) && `${classPrefix78}-item-title-with-icon`)
      }, typeof item.props.title === "function" ? item.props.title(active) : item.props.title);
      if (iconElement) {
        return import_react232.default.createElement(import_react232.default.Fragment, null, import_react232.default.createElement(badge_default, {
          content: item.props.badge,
          className: `${classPrefix78}-icon-badge`
        }, iconElement), titleElement);
      } else if (titleElement) {
        return import_react232.default.createElement(badge_default, {
          content: item.props.badge,
          className: `${classPrefix78}-title-badge`
        }, titleElement);
      }
      return null;
    }
    return withNativeProps(item.props, import_react232.default.createElement("div", {
      key: item.key,
      onClick: () => {
        const {
          key
        } = item;
        if (key === void 0 || key === null)
          return;
        setActiveKey(key.toString());
      },
      className: (0, import_classnames63.default)(`${classPrefix78}-item`, {
        [`${classPrefix78}-item-active`]: active
      })
    }, renderContent()));
  })), props.safeArea && import_react232.default.createElement(safe_area_default, {
    position: "bottom"
  })));
};

// node_modules/antd-mobile/es/components/tab-bar/index.js
var tab_bar_default = attachPropertiesToComponent(TabBar, {
  Item: TabBarItem
});

// node_modules/antd-mobile/es/components/tag/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/tag/tag.css";

// node_modules/antd-mobile/es/components/tag/tag.js
var import_react233 = __toESM(require_react());
var import_classnames64 = __toESM(require_classnames());
var classPrefix79 = `adm-tag`;
var colorRecord4 = {
  default: "#666666",
  primary: "var(--adm-color-primary, #1677ff)",
  success: "var(--adm-color-success, #00b578)",
  warning: "var(--adm-color-warning, #ff8f1f)",
  danger: "var(--adm-color-danger, #ff3141)"
};
var defaultProps61 = {
  color: "default",
  fill: "solid",
  round: false
};
var Tag = (p) => {
  var _a;
  const props = mergeProps(defaultProps61, p);
  const color = (_a = colorRecord4[props.color]) !== null && _a !== void 0 ? _a : props.color;
  const style = {
    "--border-color": color,
    "--text-color": props.fill === "outline" ? color : "#ffffff",
    "--background-color": props.fill === "outline" ? "transparent" : color
  };
  return withNativeProps(props, import_react233.default.createElement("span", {
    style,
    onClick: props.onClick,
    className: (0, import_classnames64.default)(classPrefix79, {
      [`${classPrefix79}-round`]: props.round
    })
  }, props.children));
};

// node_modules/antd-mobile/es/components/tag/index.js
var tag_default = Tag;

// node_modules/antd-mobile/es/components/text-area/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/text-area/text-area.css";

// node_modules/antd-mobile/es/components/text-area/text-area.js
var import_react234 = __toESM(require_react());
var classPrefix80 = "adm-text-area";
var defaultProps62 = {
  rows: 2,
  showCount: false,
  autoSize: false,
  defaultValue: ""
};
var TextArea = (0, import_react234.forwardRef)((p, ref) => {
  const props = mergeProps(defaultProps62, p);
  const {
    autoSize,
    showCount,
    maxLength
  } = props;
  const [value, setValue] = usePropsValue(Object.assign(Object.assign({}, props), {
    value: props.value === null ? "" : props.value
  }));
  if (props.value === null) {
    devError("TextArea", "`value` prop on `TextArea` should not be `null`. Consider using an empty string to clear the component.");
  }
  const nativeTextAreaRef = (0, import_react234.useRef)(null);
  (0, import_react234.useImperativeHandle)(ref, () => ({
    clear: () => {
      setValue("");
    },
    focus: () => {
      var _a;
      (_a = nativeTextAreaRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    },
    blur: () => {
      var _a;
      (_a = nativeTextAreaRef.current) === null || _a === void 0 ? void 0 : _a.blur();
    },
    get nativeElement() {
      return nativeTextAreaRef.current;
    }
  }));
  useIsomorphicLayoutEffect_default(() => {
    if (!autoSize)
      return;
    const textArea = nativeTextAreaRef.current;
    if (!textArea)
      return;
    textArea.style.height = "auto";
    let height = textArea.scrollHeight;
    if (typeof autoSize === "object") {
      const computedStyle = window.getComputedStyle(textArea);
      const lineHeight = parseFloat(computedStyle.lineHeight);
      if (autoSize.minRows) {
        height = Math.max(height, autoSize.minRows * lineHeight);
      }
      if (autoSize.maxRows) {
        height = Math.min(height, autoSize.maxRows * lineHeight);
      }
    }
    textArea.style.height = `${height}px`;
  }, [value, autoSize]);
  const compositingRef = (0, import_react234.useRef)(false);
  let count;
  const valueLength = [...value].length;
  if (typeof showCount === "function") {
    count = showCount(valueLength, maxLength);
  } else if (showCount) {
    count = import_react234.default.createElement("div", {
      className: `${classPrefix80}-count`
    }, maxLength === void 0 ? valueLength : valueLength + "/" + maxLength);
  }
  return withNativeProps(props, import_react234.default.createElement("div", {
    className: classPrefix80
  }, import_react234.default.createElement("textarea", {
    ref: nativeTextAreaRef,
    className: `${classPrefix80}-element`,
    rows: props.rows,
    value,
    placeholder: props.placeholder,
    onChange: (e) => {
      let v = e.target.value;
      if (maxLength && !compositingRef.current) {
        v = [...v].slice(0, maxLength).join("");
      }
      setValue(v);
    },
    id: props.id,
    onCompositionStart: (e) => {
      var _a;
      compositingRef.current = true;
      (_a = props.onCompositionStart) === null || _a === void 0 ? void 0 : _a.call(props, e);
    },
    onCompositionEnd: (e) => {
      var _a;
      compositingRef.current = false;
      if (maxLength) {
        const v = e.target.value;
        setValue([...v].slice(0, maxLength).join(""));
      }
      (_a = props.onCompositionEnd) === null || _a === void 0 ? void 0 : _a.call(props, e);
    },
    autoComplete: props.autoComplete,
    autoFocus: props.autoFocus,
    disabled: props.disabled,
    readOnly: props.readOnly,
    name: props.name,
    onFocus: props.onFocus,
    onBlur: props.onBlur,
    onClick: props.onClick
  }), count));
});
TextArea.defaultProps = defaultProps62;

// node_modules/antd-mobile/es/components/text-area/index.js
var text_area_default = TextArea;

// node_modules/antd-mobile/es/components/toast/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/toast/toast.css";

// node_modules/antd-mobile/es/components/toast/methods.js
var import_react236 = __toESM(require_react());

// node_modules/antd-mobile/es/components/toast/toast.js
var import_react235 = __toESM(require_react());
var import_classnames65 = __toESM(require_classnames());
var classPrefix81 = `adm-toast`;
var defaultProps63 = {
  maskClickable: true,
  stopPropagation: ["click"]
};
var InternalToast = (p) => {
  const props = mergeProps(defaultProps63, p);
  const {
    maskClickable,
    content,
    icon,
    position
  } = props;
  const iconElement = (0, import_react235.useMemo)(() => {
    if (icon === null || icon === void 0)
      return null;
    switch (icon) {
      case "success":
        return import_react235.default.createElement(CheckOutline_default, {
          className: `${classPrefix81}-icon-success`
        });
      case "fail":
        return import_react235.default.createElement(CloseOutline_default, {
          className: `${classPrefix81}-icon-fail`
        });
      case "loading":
        return import_react235.default.createElement(spin_loading_default, {
          color: "white",
          className: `${classPrefix81}-loading`
        });
      default:
        return icon;
    }
  }, [icon]);
  const top = (0, import_react235.useMemo)(() => {
    switch (position) {
      case "top":
        return "20%";
      case "bottom":
        return "80%";
      default:
        return "50%";
    }
  }, [position]);
  return import_react235.default.createElement(mask_default, {
    visible: props.visible,
    destroyOnClose: true,
    opacity: 0,
    disableBodyScroll: !maskClickable,
    getContainer: props.getContainer,
    afterClose: props.afterClose,
    style: Object.assign({
      pointerEvents: maskClickable ? "none" : "auto"
    }, props.maskStyle),
    className: (0, import_classnames65.default)(`${classPrefix81}-mask`, props.maskClassName),
    stopPropagation: props.stopPropagation
  }, import_react235.default.createElement("div", {
    className: (0, import_classnames65.default)(`${classPrefix81}-wrap`)
  }, import_react235.default.createElement("div", {
    style: {
      top
    },
    className: (0, import_classnames65.default)(`${classPrefix81}-main`, icon ? `${classPrefix81}-main-icon` : `${classPrefix81}-main-text`)
  }, iconElement && import_react235.default.createElement("div", {
    className: `${classPrefix81}-icon`
  }, iconElement), import_react235.default.createElement(auto_center_default, null, content))));
};

// node_modules/antd-mobile/es/components/toast/methods.js
var currentHandler = null;
var currentTimeout = null;
var defaultProps64 = {
  duration: 2e3,
  position: "center",
  maskClickable: true
};
var ToastInner = (props) => import_react236.default.createElement(InternalToast, Object.assign({}, props));
function show3(p) {
  const props = mergeProps(defaultProps64, typeof p === "string" ? {
    content: p
  } : p);
  const element = import_react236.default.createElement(ToastInner, Object.assign({}, props, {
    onClose: () => {
      currentHandler = null;
    }
  }));
  if (currentHandler) {
    currentHandler.replace(element);
  } else {
    currentHandler = renderImperatively(element);
  }
  if (currentTimeout) {
    window.clearTimeout(currentTimeout);
  }
  if (props.duration !== 0) {
    currentTimeout = window.setTimeout(() => {
      clear3();
    }, props.duration);
  }
  return currentHandler;
}
function clear3() {
  currentHandler === null || currentHandler === void 0 ? void 0 : currentHandler.close();
  currentHandler = null;
}
function config2(val) {
  if (val.duration !== void 0) {
    defaultProps64.duration = val.duration;
  }
  if (val.position !== void 0) {
    defaultProps64.position = val.position;
  }
  if (val.maskClickable !== void 0) {
    defaultProps64.maskClickable = val.maskClickable;
  }
}

// node_modules/antd-mobile/es/components/toast/index.js
var Toast = {
  show: show3,
  clear: clear3,
  config: config2
};
var toast_default = Toast;

// node_modules/antd-mobile/es/components/tree-select/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/tree-select/tree-select.css";

// node_modules/antd-mobile/es/components/tree-select/tree-select.js
var import_classnames66 = __toESM(require_classnames());
var import_react237 = __toESM(require_react());

// node_modules/antd-mobile/es/utils/tree.js
function getTreeDeep(treeData, childrenName = "children") {
  const walker = (tree) => {
    let deep = 0;
    tree.forEach((item) => {
      if (item[childrenName]) {
        deep = Math.max(deep, walker(item[childrenName]) + 1);
      } else {
        deep = Math.max(deep, 1);
      }
    });
    return deep;
  };
  return walker(treeData);
}

// node_modules/antd-mobile/es/components/tree-select/tree-select.js
var classPrefix82 = `adm-tree-select`;
var defaultProps65 = {
  options: [],
  fieldNames: {},
  defaultValue: []
};
var TreeSelect = (p) => {
  const props = mergeProps(defaultProps65, p);
  const labelName = props.fieldNames.label || "label";
  const valueName = props.fieldNames.value || "value";
  const childrenName = props.fieldNames.children || "children";
  const [value, setValue] = usePropsValue({
    value: props.value,
    defaultValue: props.defaultValue
  });
  const [deep, optionsMap, optionsParentMap] = (0, import_react237.useMemo)(() => {
    const deep2 = getTreeDeep(props.options, childrenName);
    const optionsMap2 = /* @__PURE__ */ new Map();
    const optionsParentMap2 = /* @__PURE__ */ new Map();
    function traverse(current, children) {
      children.forEach((item) => {
        optionsParentMap2.set(item[valueName], current);
        optionsMap2.set(item[valueName], item);
        if (item[childrenName]) {
          traverse(item, item[childrenName]);
        }
      });
    }
    traverse(void 0, props.options);
    return [deep2, optionsMap2, optionsParentMap2];
  }, [props.options]);
  const onItemSelect = (node) => {
    var _a;
    const parentNodes = [];
    let current = node;
    while (current) {
      parentNodes.push(current);
      const next = optionsParentMap.get(current[valueName]);
      current = next;
    }
    const values = parentNodes.reverse().map((i) => i[valueName]);
    setValue(values);
    (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, values, {
      options: parentNodes
    });
  };
  const renderItems = (columnOptions = [], index) => {
    return columnOptions.map((item) => {
      const isActive = item[valueName] === value[index];
      return import_react237.default.createElement("div", {
        key: item[valueName],
        className: (0, import_classnames66.default)(`${classPrefix82}-item`, {
          [`${classPrefix82}-item-active`]: isActive
        }),
        onClick: () => {
          if (!isActive) {
            onItemSelect(item);
          }
        }
      }, item[labelName]);
    });
  };
  const renderColumns = () => {
    var _a;
    const columns = [];
    for (let i = 0; i < deep; i++) {
      let width = `${100 / deep}%`;
      if (deep === 2 && i === 0) {
        width = `33.33%`;
      }
      if (deep === 2 && i === 1) {
        width = `66.67%`;
      }
      const column = import_react237.default.createElement("div", {
        key: i,
        className: (0, import_classnames66.default)(`${classPrefix82}-column`),
        style: {
          width
        }
      }, renderItems(i === 0 ? props.options : (_a = optionsMap.get(value[i - 1])) === null || _a === void 0 ? void 0 : _a[childrenName], i));
      columns.push(column);
    }
    return columns;
  };
  return withNativeProps(props, import_react237.default.createElement("div", {
    className: classPrefix82
  }, renderColumns()));
};

// node_modules/antd-mobile/es/components/tree-select/multiple.js
var import_classnames67 = __toESM(require_classnames());
var import_react238 = __toESM(require_react());
var classPrefix83 = `adm-tree-select-multiple`;
var Multiple = (p) => {
  const props = mergeProps({
    options: [],
    fieldNames: {},
    allSelectText: [],
    defaultExpandKeys: [],
    defaultValue: []
  }, p);
  (0, import_react238.useEffect)(() => {
    devWarning("TreeSelect", "TreeSelect.Multiple has been deprecated.");
  }, []);
  const labelName = props.fieldNames.label || "label";
  const valueName = props.fieldNames.value || "value";
  const childrenName = props.fieldNames.children || "children";
  const [expandKeys, setExpandKeys] = usePropsValue({
    value: props.expandKeys,
    defaultValue: props.defaultExpandKeys
  });
  const [value, setValue] = usePropsValue({
    value: props.value,
    defaultValue: props.defaultValue
  });
  const getLeafKeys = (option) => {
    const keys = [];
    const walker = (op) => {
      var _a;
      if (!op) {
        return;
      }
      if ((_a = op[childrenName]) === null || _a === void 0 ? void 0 : _a.length) {
        op[childrenName].forEach((i) => walker(i));
      } else {
        keys.push(op[valueName]);
      }
    };
    walker(option);
    return keys;
  };
  const [deep, optionsMap, optionsParentMap] = (0, import_react238.useMemo)(() => {
    const deep2 = getTreeDeep(props.options, childrenName);
    const optionsMap2 = /* @__PURE__ */ new Map();
    const optionsParentMap2 = /* @__PURE__ */ new Map();
    function traverse(current, children) {
      children.forEach((item) => {
        optionsParentMap2.set(item[valueName], current);
        optionsMap2.set(item[valueName], item);
        if (item[childrenName]) {
          traverse(item, item[childrenName]);
        }
      });
    }
    traverse(void 0, props.options);
    return [deep2, optionsMap2, optionsParentMap2];
  }, [props.options]);
  const allSelectedLeafKeys = (0, import_react238.useMemo)(() => {
    let leafKeys = [];
    value.forEach((v) => {
      const option = optionsMap.get(v);
      leafKeys = leafKeys.concat(getLeafKeys(option));
    });
    return leafKeys;
  }, [value, optionsMap]);
  const dotMap = (0, import_react238.useMemo)(() => {
    const map = /* @__PURE__ */ new Map();
    const walker = (key) => {
      const parentOption = optionsParentMap.get(key);
      if (!parentOption) {
        return;
      }
      map.set(parentOption[valueName], true);
      walker(parentOption[valueName]);
    };
    allSelectedLeafKeys.forEach((key) => {
      map.set(key, true);
      walker(key);
    });
    return map;
  }, [optionsParentMap, value]);
  const onChange = (targetKeys) => {
    var _a;
    let groupKeys = [...targetKeys];
    let unusedKeys = [];
    const walker = (keys) => {
      keys.forEach((key) => {
        var _a2;
        if (unusedKeys.includes(key)) {
          return;
        }
        const parent = optionsParentMap.get(key);
        if (!parent) {
          return;
        }
        const childrenKeys = ((_a2 = parent[childrenName]) === null || _a2 === void 0 ? void 0 : _a2.map((i) => i[valueName])) || [];
        if (childrenKeys.every((i) => groupKeys.includes(i))) {
          groupKeys.push(parent[valueName]);
          unusedKeys = unusedKeys.concat(childrenKeys);
        }
      });
    };
    for (let i = 0; i < deep; i++) {
      walker(groupKeys);
    }
    groupKeys = groupKeys.filter((i) => !unusedKeys.includes(i));
    const groupOptions = groupKeys.map((i) => optionsMap.get(i));
    setValue(groupKeys);
    (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, groupKeys, groupOptions);
  };
  const onItemSelect = (option) => {
    var _a;
    const parentNodes = [];
    let current = option;
    while (current) {
      parentNodes.unshift(current);
      const next = optionsParentMap.get(current[valueName]);
      current = next;
    }
    const keys = parentNodes.map((i) => i[valueName]);
    setExpandKeys(keys);
    (_a = props.onExpand) === null || _a === void 0 ? void 0 : _a.call(props, keys, parentNodes);
  };
  const renderSelectAllItem = (columnOptions, index) => {
    var _a;
    const text = (_a = props.selectAllText) === null || _a === void 0 ? void 0 : _a[index];
    if (!text) {
      return;
    }
    let currentLeafKeys = [];
    columnOptions.forEach((option) => {
      currentLeafKeys = currentLeafKeys.concat(getLeafKeys(option));
    });
    const allSelected = currentLeafKeys.every((i) => allSelectedLeafKeys.includes(i));
    return import_react238.default.createElement("div", {
      onClick: () => {
        if (allSelected) {
          onChange(allSelectedLeafKeys.filter((i) => !currentLeafKeys.includes(i)));
        } else {
          onChange(allSelectedLeafKeys.concat(currentLeafKeys));
        }
      },
      className: `${classPrefix83}-item`
    }, text);
  };
  const renderSelectAllLeafItem = (columnOptions, index) => {
    var _a;
    const text = (_a = props.selectAllText) === null || _a === void 0 ? void 0 : _a[index];
    if (!text) {
      return;
    }
    const currentLeafKeys = columnOptions.map((i) => i[valueName]);
    const allSelected = currentLeafKeys.every((i) => allSelectedLeafKeys.includes(i));
    const halfSelected = allSelected ? false : currentLeafKeys.some((i) => allSelectedLeafKeys.includes(i));
    return import_react238.default.createElement("div", {
      onClick: () => {
        if (allSelected) {
          onChange(allSelectedLeafKeys.filter((i) => !currentLeafKeys.includes(i)));
        } else {
          onChange(allSelectedLeafKeys.concat(currentLeafKeys));
        }
      },
      className: (0, import_classnames67.default)(`${classPrefix83}-item`, `${classPrefix83}-item-leaf`)
    }, import_react238.default.createElement(checkbox_default, {
      className: `${classPrefix83}-item-checkbox`,
      checked: allSelected,
      indeterminate: halfSelected
    }), text);
  };
  const renderItem = (option) => {
    const isExpand = expandKeys.includes(option[valueName]);
    return import_react238.default.createElement("div", {
      key: option[valueName],
      onClick: () => {
        if (!isExpand) {
          onItemSelect(option);
        }
      },
      className: (0, import_classnames67.default)(`${classPrefix83}-item`, {
        [`${classPrefix83}-item-expand`]: isExpand
      })
    }, option[labelName], !!dotMap.get(option[valueName]) && import_react238.default.createElement("div", {
      className: `${classPrefix83}-dot`
    }));
  };
  const renderLeafItem = (option) => {
    const isSelected = allSelectedLeafKeys.includes(option[valueName]);
    return import_react238.default.createElement("div", {
      key: option[valueName],
      onClick: () => {
        if (isSelected) {
          onChange(allSelectedLeafKeys.filter((val) => val !== option[valueName]));
        } else {
          onChange([...allSelectedLeafKeys, option[valueName]]);
        }
      },
      className: (0, import_classnames67.default)(`${classPrefix83}-item`, `${classPrefix83}-item-leaf`)
    }, import_react238.default.createElement(checkbox_default, {
      className: `${classPrefix83}-item-checkbox`,
      checked: isSelected
    }), option[labelName]);
  };
  const renderItems = (columnOptions = [], index) => {
    if (columnOptions.length === 0) {
      return;
    }
    const isLeaf = deep === index + 1;
    if (isLeaf) {
      return import_react238.default.createElement(import_react238.default.Fragment, null, renderSelectAllLeafItem(columnOptions, index), columnOptions.map((option) => {
        return renderLeafItem(option);
      }));
    }
    return import_react238.default.createElement(import_react238.default.Fragment, null, renderSelectAllItem(columnOptions, index), columnOptions.map((option) => {
      return renderItem(option);
    }));
  };
  const renderColumns = () => {
    var _a;
    const columns = [];
    for (let i = 0; i < deep; i++) {
      let width = `${100 / deep}%`;
      if (deep === 2 && i === 0) {
        width = `33.33%`;
      }
      if (deep === 2 && i === 1) {
        width = `66.67%`;
      }
      const column = import_react238.default.createElement("div", {
        key: i,
        className: (0, import_classnames67.default)(`${classPrefix83}-column`),
        style: {
          width
        }
      }, renderItems(i === 0 ? props.options : (_a = optionsMap.get(expandKeys[i - 1])) === null || _a === void 0 ? void 0 : _a[childrenName], i));
      columns.push(column);
    }
    return columns;
  };
  return withNativeProps(props, import_react238.default.createElement("div", {
    className: classPrefix83
  }, renderColumns()));
};

// node_modules/antd-mobile/es/components/tree-select/index.js
var tree_select_default = attachPropertiesToComponent(TreeSelect, {
  Multiple
});

// node_modules/antd-mobile/es/components/virtual-input/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/virtual-input/virtual-input.css";

// node_modules/antd-mobile/es/components/virtual-input/virtual-input.js
var import_react239 = __toESM(require_react());
var import_classnames68 = __toESM(require_classnames());
var classPrefix84 = "adm-virtual-input";
var defaultProps66 = {
  defaultValue: ""
};
var VirtualInput = (0, import_react239.forwardRef)((p, ref) => {
  const props = mergeProps(defaultProps66, p);
  const [value, setValue] = usePropsValue(props);
  const rootRef = (0, import_react239.useRef)(null);
  const contentRef = (0, import_react239.useRef)(null);
  const [hasFocus, setHasFocus] = (0, import_react239.useState)(false);
  function scrollToEnd() {
    const root = rootRef.current;
    if (!root)
      return;
    if (document.activeElement !== root) {
      return;
    }
    const content = contentRef.current;
    if (!content)
      return;
    content.scrollLeft = content.clientWidth;
  }
  useIsomorphicLayoutEffect_default(() => {
    scrollToEnd();
  }, [value]);
  (0, import_react239.useEffect)(() => {
    if (hasFocus) {
      scrollToEnd();
    }
  }, [hasFocus]);
  (0, import_react239.useImperativeHandle)(ref, () => ({
    focus: () => {
      var _a;
      (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.focus();
    },
    blur: () => {
      var _a;
      (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.blur();
    }
  }));
  function onFocus() {
    var _a;
    setHasFocus(true);
    (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props);
  }
  function onBlur() {
    var _a;
    setHasFocus(false);
    (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props);
  }
  const keyboard = props.keyboard;
  const keyboardElement = keyboard && import_react239.default.cloneElement(keyboard, {
    onInput: (v) => {
      var _a, _b;
      setValue(value + v);
      (_b = (_a = keyboard.props).onInput) === null || _b === void 0 ? void 0 : _b.call(_a, v);
    },
    onDelete: () => {
      var _a, _b;
      setValue(value.slice(0, -1));
      (_b = (_a = keyboard.props).onDelete) === null || _b === void 0 ? void 0 : _b.call(_a);
    },
    visible: hasFocus,
    onClose: () => {
      var _a, _b, _c;
      (_a = rootRef.current) === null || _a === void 0 ? void 0 : _a.blur();
      (_c = (_b = keyboard.props).onClose) === null || _c === void 0 ? void 0 : _c.call(_b);
    },
    getContainer: null
  });
  return withNativeProps(props, import_react239.default.createElement("div", {
    ref: rootRef,
    className: (0, import_classnames68.default)(classPrefix84, {
      [`${classPrefix84}-disabled`]: props.disabled
    }),
    tabIndex: props.disabled ? void 0 : 0,
    onFocus,
    onBlur,
    onClick: props.onClick
  }, import_react239.default.createElement("div", {
    className: `${classPrefix84}-content`,
    ref: contentRef
  }, value, import_react239.default.createElement("div", {
    className: `${classPrefix84}-caret-container`
  }, hasFocus && import_react239.default.createElement("div", {
    className: `${classPrefix84}-caret`
  }))), props.clearable && !!value && hasFocus && import_react239.default.createElement("div", {
    className: `${classPrefix84}-clear`,
    onClick: (e) => {
      var _a;
      e.stopPropagation();
      setValue("");
      (_a = props.onClear) === null || _a === void 0 ? void 0 : _a.call(props);
    }
  }, import_react239.default.createElement(CloseCircleFill_default, null)), !value && import_react239.default.createElement("div", {
    className: `${classPrefix84}-placeholder`
  }, props.placeholder), keyboardElement));
});

// node_modules/antd-mobile/es/components/virtual-input/index.js
var virtual_input_default = VirtualInput;

// node_modules/antd-mobile/es/components/water-mark/index.js
import "C:/Users/\u5C0F\u5D14/Desktop/lesson_fullstack-master/react/HUPU/node_modules/antd-mobile/es/components/water-mark/water-mark.css";

// node_modules/antd-mobile/es/components/water-mark/water-mark.js
var import_classnames69 = __toESM(require_classnames());
var import_react240 = __toESM(require_react());
var classPrefix85 = `adm-water-mark`;
var defaultProps67 = {
  fullPage: true
};
var WaterMark = (p) => {
  const props = mergeProps(defaultProps67, p);
  const {
    zIndex = 2e3,
    gapX = 24,
    gapY = 48,
    width = 120,
    height = 64,
    rotate = -22,
    image,
    imageWidth = 120,
    imageHeight = 64,
    content,
    fontStyle = "normal",
    fontWeight = "normal",
    fontColor = "rgba(0,0,0,.15)",
    fontSize = 14,
    fontFamily = "sans-serif"
  } = props;
  const [base64Url, setBase64Url] = (0, import_react240.useState)("");
  (0, import_react240.useEffect)(() => {
    const canvas = document.createElement("canvas");
    const ratio = window.devicePixelRatio;
    const ctx2 = canvas.getContext("2d");
    const canvasWidth = `${(gapX + width) * ratio}px`;
    const canvasHeight = `${(gapY + height) * ratio}px`;
    const markWidth = width * ratio;
    const markHeight = height * ratio;
    canvas.setAttribute("width", canvasWidth);
    canvas.setAttribute("height", canvasHeight);
    if (ctx2) {
      if (image) {
        ctx2.translate(markWidth / 2, markHeight / 2);
        ctx2.rotate(Math.PI / 180 * Number(rotate));
        const img = new Image();
        img.crossOrigin = "anonymous";
        img.referrerPolicy = "no-referrer";
        img.onload = () => {
          ctx2.drawImage(img, -imageWidth * ratio / 2, -imageHeight * ratio / 2, imageWidth * ratio, imageHeight * ratio);
          ctx2.restore();
          setBase64Url(canvas.toDataURL());
        };
        img.src = image;
      } else if (content) {
        ctx2.textBaseline = "middle";
        ctx2.textAlign = "center";
        ctx2.translate(markWidth / 2, markHeight / 2);
        ctx2.rotate(Math.PI / 180 * Number(rotate));
        const markSize = Number(fontSize) * ratio;
        ctx2.font = `${fontStyle} normal ${fontWeight} ${markSize}px/${markHeight}px ${fontFamily}`;
        ctx2.fillStyle = fontColor;
        ctx2.fillText(content, 0, 0);
        ctx2.restore();
        setBase64Url(canvas.toDataURL());
      }
    } else {
      throw new Error("Canvas is not supported in the current environment");
    }
  }, [gapX, gapY, rotate, fontStyle, fontWeight, width, height, fontFamily, fontColor, image, content, fontSize]);
  return withNativeProps(props, import_react240.default.createElement("div", {
    className: (0, import_classnames69.default)(classPrefix85, {
      [`${classPrefix85}-full-page`]: props.fullPage
    }),
    style: {
      zIndex,
      backgroundSize: `${gapX + width}px`,
      backgroundImage: `url('${base64Url}')`
    }
  }));
};

// node_modules/antd-mobile/es/components/water-mark/index.js
var water_mark_default = WaterMark;
export {
  action_sheet_default as ActionSheet,
  auto_center_default as AutoCenter,
  avatar_default as Avatar,
  badge_default as Badge,
  button_default as Button,
  calendar_default as Calendar,
  capsule_tabs_default as CapsuleTabs,
  card_default as Card,
  cascade_picker_default as CascadePicker,
  cascade_picker_view_default as CascadePickerView,
  cascader_default as Cascader,
  cascader_view_default as CascaderView,
  center_popup_default as CenterPopup,
  check_list_default as CheckList,
  checkbox_default as Checkbox,
  collapse_default as Collapse,
  config_provider_default as ConfigProvider,
  date_picker_default as DatePicker,
  date_picker_view_default as DatePickerView,
  dialog_default as Dialog,
  divider_default as Divider,
  dot_loading_default as DotLoading,
  dropdown_default2 as Dropdown,
  ellipsis_default as Ellipsis,
  empty_default as Empty,
  error_block_default as ErrorBlock,
  floating_bubble_default as FloatingBubble,
  floating_panel_default as FloatingPanel,
  form_default as Form,
  grid_default as Grid,
  image_default as Image,
  image_uploader_default as ImageUploader,
  image_viewer_default as ImageViewer,
  index_bar_default as IndexBar,
  infinite_scroll_default as InfiniteScroll,
  input_default as Input,
  jumbo_tabs_default as JumboTabs,
  list_default as List,
  loading_default as Loading,
  mask_default as Mask,
  modal_default as Modal,
  nav_bar_default as NavBar,
  notice_bar_default as NoticeBar,
  number_keyboard_default as NumberKeyboard,
  page_indicator_default as PageIndicator,
  passcode_input_default as PasscodeInput,
  picker_default as Picker,
  picker_view_default as PickerView,
  popover_default as Popover,
  popup_default as Popup,
  progress_bar_default as ProgressBar,
  progress_circle_default as ProgressCircle,
  pull_to_refresh_default as PullToRefresh,
  radio_default as Radio,
  rate_default as Rate,
  result_default as Result,
  result_page_default as ResultPage,
  safe_area_default as SafeArea,
  scroll_mask_default as ScrollMask,
  search_bar_default as SearchBar,
  selector_default as Selector,
  side_bar_default as SideBar,
  skeleton_default as Skeleton,
  slider_default as Slider,
  space_default as Space,
  spin_loading_default as SpinLoading,
  stepper_default as Stepper,
  steps_default as Steps,
  swipe_action_default as SwipeAction,
  swiper_default as Swiper,
  switch_default as Switch,
  tab_bar_default as TabBar,
  tabs_default as Tabs,
  tag_default as Tag,
  text_area_default as TextArea,
  toast_default as Toast,
  tree_select_default as TreeSelect,
  virtual_input_default as VirtualInput,
  water_mark_default as WaterMark,
  createErrorBlock,
  reduceMotion,
  restoreMotion,
  setDefaultConfig
};
/*!
 * JavaScript Cookie v2.2.1
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
/*!
* screenfull
* v5.2.0 - 2021-11-03
* (c) Sindre Sorhus; MIT License
*/
/** @license React v17.0.2
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
//# sourceMappingURL=antd-mobile.js.map
